
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00004d60  00004df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008001a8  008001a8  00004f3c  2**0
                  ALLOC
  3 .stab         000050d0  00000000  00000000  00004f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020be  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c26a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c45c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001127a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_1>
       8:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_2>
       c:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_9>
      28:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_10>
      2c:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <main>
      8a:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 27 26 	jmp	0x4c4e	; 0x4c4e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 57       	subi	r30, 0x7D	; 125
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MWDTIMER_enEnable>:
#include "MWDTIMER_priv.h"
#include "MWDTIMER_config.h"
#include "MWDTIMER_int.h"

ErrorState_t MWDTIMER_enEnable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	// Set ON WDT
	SET_BIT(WDTCR_REG, WDE_BIT);
     e36:	a1 e4       	ldi	r26, 0x41	; 65
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	8c 93       	st	X, r24

	return SUCCESS;
     e44:	82 e0       	ldi	r24, 0x02	; 2
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <MWDTIMER_enDisable>:

ErrorState_t MWDTIMER_enDisable(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	// Write Logical One to WDTOE and WDE
	WDTCR_REG |= (1 << WDTOE_BIT) | (1 << WDE_BIT);
     e54:	a1 e4       	ldi	r26, 0x41	; 65
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e4       	ldi	r30, 0x41	; 65
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 61       	ori	r24, 0x18	; 24
     e60:	8c 93       	st	X, r24
	// Turn OFF WDT
	WDTCR_REG = 0x00;
     e62:	e1 e4       	ldi	r30, 0x41	; 65
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1

	return SUCCESS;
     e68:	82 e0       	ldi	r24, 0x02	; 2
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <MWDTIMER_enSleep>:

ErrorState_t MWDTIMER_enSleep(u8 copy_u8TimeOut)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <MWDTIMER_enSleep+0x6>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8TimeOut >= MWDT_TIMEOUT_16_3_MS && copy_u8TimeOut <= MWDT_TIMEOUT_2_1_S)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	88 30       	cpi	r24, 0x08	; 8
     e84:	80 f4       	brcc	.+32     	; 0xea6 <MWDTIMER_enSleep+0x36>
	{
		// Step1: Apply Mask
		WDTCR_REG &= MWDT_PRESCALER_MASK;
     e86:	a1 e4       	ldi	r26, 0x41	; 65
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e4       	ldi	r30, 0x41	; 65
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 7f       	andi	r24, 0xF8	; 248
     e92:	8c 93       	st	X, r24
		// Step2: Insert Value
		WDTCR_REG |= copy_u8TimeOut;
     e94:	a1 e4       	ldi	r26, 0x41	; 65
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e1 e4       	ldi	r30, 0x41	; 65
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	90 81       	ld	r25, Z
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	89 2b       	or	r24, r25
     ea2:	8c 93       	st	X, r24
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <MWDTIMER_enSleep+0x38>
	}
	else
	{
		Local_enState = OUT_OF_RANG_ERR;
     ea6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enState;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MWDTIMER_enRefresh>:

ErrorState_t MWDTIMER_enRefresh(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
     ebc:	a8 95       	wdr
	return SUCCESS;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <MTIMER1_enInit>:
static void (*CallBackPTR) (void) = NULL;

static void (*g_ICU_CallBackPTR) (void) = NULL;

ErrorState_t MTIMER1_enInit(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	// Choose Mode to be Normal Mode
	CLR_BIT(TCCR1A_REG, WGM10_BIT);
     ed0:	af e4       	ldi	r26, 0x4F	; 79
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ef e4       	ldi	r30, 0x4F	; 79
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8e 7f       	andi	r24, 0xFE	; 254
     edc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG, WGM11_BIT);
     ede:	af e4       	ldi	r26, 0x4F	; 79
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ef e4       	ldi	r30, 0x4F	; 79
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8d 7f       	andi	r24, 0xFD	; 253
     eea:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG, WGM12_BIT);
     eec:	ae e4       	ldi	r26, 0x4E	; 78
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ee e4       	ldi	r30, 0x4E	; 78
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG, WGM13_BIT);
     efa:	ae e4       	ldi	r26, 0x4E	; 78
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ee e4       	ldi	r30, 0x4E	; 78
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 7e       	andi	r24, 0xEF	; 239
     f06:	8c 93       	st	X, r24
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <MTIMER1_enStart>:

ErrorState_t MTIMER1_enStart(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER1_CLK >= MTIMER1_NO_CLK && MTIMER1_CLK <= MTIMER1_EXTCLK_RISE_EDGE )
	// Step1: Clear bits by Applying Mask
	TCCR1B_REG &= MTIMER1_CS_MASK;
     f1a:	ae e4       	ldi	r26, 0x4E	; 78
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ee e4       	ldi	r30, 0x4E	; 78
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 7f       	andi	r24, 0xF8	; 248
     f26:	8c 93       	st	X, r24
	// Step2: Insert Value
	TCCR1B_REG |= MTIMER1_CLK;
     f28:	ae e4       	ldi	r26, 0x4E	; 78
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ee e4       	ldi	r30, 0x4E	; 78
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	8c 93       	st	X, r24
#else
#error ("Wrong Timer1 Clock")
#endif
}
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <MTIMER1_enStop>:

ErrorState_t MTIMER1_enStop(void)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	// Step1: Clear bits by Applying Mask
	TCCR1B_REG &= MTIMER1_CS_MASK;
     f48:	ae e4       	ldi	r26, 0x4E	; 78
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ee e4       	ldi	r30, 0x4E	; 78
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	8c 93       	st	X, r24
	// Step2: Insert Value
	//TCCR1B_REG |= MTIMER1_NO_CLK;
}
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <MTIMER1_enSetCallBack>:

ErrorState_t MTIMER1_enSetCallBack(void (*ptrfn) (void))
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <MTIMER1_enSetCallBack+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <MTIMER1_enSetCallBack+0x8>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9b 83       	std	Y+3, r25	; 0x03
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	89 83       	std	Y+1, r24	; 0x01

	if (ptrfn == NULL)
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	19 f4       	brne	.+6      	; 0xf80 <MTIMER1_enSetCallBack+0x22>
	{
		Local_enState = NULL_PTR_ERR;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <MTIMER1_enSetCallBack+0x2e>
	}
	else
	{
		CallBackPTR = ptrfn;
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	90 93 a9 01 	sts	0x01A9, r25
     f88:	80 93 a8 01 	sts	0x01A8, r24
	}
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <MTIMER1_enEnableInt>:

ErrorState_t MTIMER1_enEnableInt(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TIMSK_REG, TOIE1_BIT);
     fa8:	a9 e5       	ldi	r26, 0x59	; 89
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e9 e5       	ldi	r30, 0x59	; 89
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	8c 93       	st	X, r24

	return Local_enState;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <MTIMER1_enDisableInt>:

ErrorState_t MTIMER1_enDisableInt(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(TIMSK_REG, TOIE1_BIT);
     fce:	a9 e5       	ldi	r26, 0x59	; 89
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e9 e5       	ldi	r30, 0x59	; 89
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	8c 93       	st	X, r24

	return Local_enState;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <MTIMER1_ICU_enInit>:


ErrorState_t MTIMER1_ICU_enInit(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RISE_EDGE_TRIG);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MTIMER1_ICU_enSetTrigger>
}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <MTIMER1_ICU_enEnableInt>:

ErrorState_t MTIMER1_ICU_enEnableInt(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG, TICIE1_BIT);
    1008:	a9 e5       	ldi	r26, 0x59	; 89
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e9 e5       	ldi	r30, 0x59	; 89
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 62       	ori	r24, 0x20	; 32
    1014:	8c 93       	st	X, r24
}
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <MTIMER1_ICU_enDisableInt>:

ErrorState_t MTIMER1_ICU_enDisableInt(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG, TICIE1_BIT);
    1028:	a9 e5       	ldi	r26, 0x59	; 89
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e9 e5       	ldi	r30, 0x59	; 89
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
}
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <MTIMER1_ICU_enSetCallBack>:

ErrorState_t MTIMER1_ICU_enSetCallBack(void (*ptrfn) (void))
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <MTIMER1_ICU_enSetCallBack+0x6>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	39 f0       	breq	.+14     	; 0x1068 <MTIMER1_ICU_enSetCallBack+0x2a>
	{
		g_ICU_CallBackPTR = ptrfn;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	90 93 ab 01 	sts	0x01AB, r25
    1062:	80 93 aa 01 	sts	0x01AA, r24
    1066:	02 c0       	rjmp	.+4      	; 0x106c <MTIMER1_ICU_enSetCallBack+0x2e>
	}
	else
	{
		Local_enState = NULL_PTR_ERR;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <MTIMER1_ICU_enRead>:

ErrorState_t MTIMER1_ICU_enRead(volatile u16 *ptrReadValue)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <MTIMER1_ICU_enRead+0x6>
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	89 83       	std	Y+1, r24	; 0x01

	if(ptrReadValue != NULL)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	49 f0       	breq	.+18     	; 0x10a8 <MTIMER1_ICU_enRead+0x2e>
	{
		*ptrReadValue = ICR1_REG;
    1096:	e6 e4       	ldi	r30, 0x46	; 70
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	ea 81       	ldd	r30, Y+2	; 0x02
    10a0:	fb 81       	ldd	r31, Y+3	; 0x03
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <MTIMER1_ICU_enRead+0x32>
	}
	else
	{
		Local_enState = NULL_PTR_ERR;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <MTIMER1_ICU_enSetTrigger>:

ErrorState_t MTIMER1_ICU_enSetTrigger(u8 copy_u8Trigg)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <MTIMER1_ICU_enSetTrigger+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <MTIMER1_ICU_enSetTrigger+0x8>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_u8Trigg)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	31 f0       	breq	.+12     	; 0x10ea <MTIMER1_ICU_enSetTrigger+0x30>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	21 30       	cpi	r18, 0x01	; 1
    10e4:	31 05       	cpc	r19, r1
    10e6:	49 f0       	breq	.+18     	; 0x10fa <MTIMER1_ICU_enSetTrigger+0x40>
    10e8:	10 c0       	rjmp	.+32     	; 0x110a <MTIMER1_ICU_enSetTrigger+0x50>
	{
	case MTIMER1_ICU_FALL_EDGE_TRIG:
		CLR_BIT(TCCR1B_REG, ICES1_BIT);
    10ea:	ae e4       	ldi	r26, 0x4E	; 78
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ee e4       	ldi	r30, 0x4E	; 78
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	8c 93       	st	X, r24
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <MTIMER1_ICU_enSetTrigger+0x52>
		break;
	case MTIMER1_ICU_RISE_EDGE_TRIG:
		SET_BIT(TCCR1B_REG, ICES1_BIT);
    10fa:	ae e4       	ldi	r26, 0x4E	; 78
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ee e4       	ldi	r30, 0x4E	; 78
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	8c 93       	st	X, r24
    1108:	01 c0       	rjmp	.+2      	; 0x110c <MTIMER1_ICU_enSetTrigger+0x52>
		break;
	default:
		Local_enState = OUT_OF_RANG_ERR;
    110a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_enState;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	if(g_ICU_CallBackPTR != NULL)
    1146:	80 91 aa 01 	lds	r24, 0x01AA
    114a:	90 91 ab 01 	lds	r25, 0x01AB
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	29 f0       	breq	.+10     	; 0x115c <__vector_6+0x40>
	{
		g_ICU_CallBackPTR(); // Call Function in Higher Layer
    1152:	e0 91 aa 01 	lds	r30, 0x01AA
    1156:	f0 91 ab 01 	lds	r31, 0x01AB
    115a:	09 95       	icall
	}
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPTR != NULL)
    11ac:	80 91 a8 01 	lds	r24, 0x01A8
    11b0:	90 91 a9 01 	lds	r25, 0x01A9
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	29 f0       	breq	.+10     	; 0x11c2 <__vector_9+0x40>
	{
		CallBackPTR();
    11b8:	e0 91 a8 01 	lds	r30, 0x01A8
    11bc:	f0 91 a9 01 	lds	r31, 0x01A9
    11c0:	09 95       	icall
	}
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	ff 91       	pop	r31
    11c8:	ef 91       	pop	r30
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	7f 91       	pop	r23
    11d4:	6f 91       	pop	r22
    11d6:	5f 91       	pop	r21
    11d8:	4f 91       	pop	r20
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <MTIMER0_enInit>:
static u32 g_u32NumOfOverflows = 0;
static u8 g_u8NumOfRemaningCount = 0;
static u32 g_u32NumOfCompMatches = 0;

ErrorState_t MTIMER0_enInit(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	// Config Timer Mode
#if(MTIMER0_MODE == MTIMER0_MODE_NORMAL || MTIMER0_MODE == MTIMER0_MODE_CTC || MTIMER0_MODE == MTIMER0_MODE_FAST_PWM || MTIMER0_MODE == MTIMER0_MODE_PHASE_CORRECT_PWM)
	// Step1: Clear bits by Applying Mask
	TCCR0_REG &= MTIMER0_MODE_MASK;
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	87 7b       	andi	r24, 0xB7	; 183
    11fe:	8c 93       	st	X, r24
	// Step2: Insert Value
	TCCR0_REG |= MTIMER0_MODE;
    1200:	a3 e5       	ldi	r26, 0x53	; 83
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e3 e5       	ldi	r30, 0x53	; 83
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 64       	ori	r24, 0x40	; 64
    120c:	8c 93       	st	X, r24
#error("Wrong Timer0 Mode")
#endif

	// Config OC0 Wave Generation
#if(MTIMER0_OC0_MODE >= MTIMER_OC0_DISCONNECTED && MTIMER0_OC0_MODE <= MTIMER0_OC0_SH)
	TCCR0_REG &= MTIMER0_OC0_MASK;
    120e:	a3 e5       	ldi	r26, 0x53	; 83
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e3 e5       	ldi	r30, 0x53	; 83
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8f 7c       	andi	r24, 0xCF	; 207
    121a:	8c 93       	st	X, r24
	// Step2: Insert Value
	TCCR0_REG |= MTIMER0_OC0_MASK << MTIMER0_OC0_SH;
    121c:	a3 e5       	ldi	r26, 0x53	; 83
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 6f       	ori	r24, 0xF0	; 240
    1228:	8c 93       	st	X, r24
#else
#error("Wrong Timer0 Mode")
#endif
}
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <MTIMER0_enStart>:

ErrorState_t MTIMER0_enStart(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
#if(MTIMER0_CLK >= MTIMER0_NO_CLK && MTIMER0_CLK <= MTIMER0_EXTCLK_RISE_EDGE )
	// Step1: Clear bits by Applying Mask
	TCCR0_REG &= MTIMER0_CS_MASK;
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 7f       	andi	r24, 0xF8	; 248
    1248:	8c 93       	st	X, r24
	// Step2: Insert Value
	TCCR0_REG |= MTIMER0_CLK;
    124a:	a3 e5       	ldi	r26, 0x53	; 83
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e3 e5       	ldi	r30, 0x53	; 83
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	8c 93       	st	X, r24
#else()
#error ("Wrong Timer0 Clock")
#endif
}
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <MTIMER0_enStop>:

ErrorState_t MTIMER0_enStop(void)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	// Step1: Clear bits by Applying Mask
	TCCR0_REG &= MTIMER0_CS_MASK;
    126a:	a3 e5       	ldi	r26, 0x53	; 83
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e5       	ldi	r30, 0x53	; 83
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 7f       	andi	r24, 0xF8	; 248
    1276:	8c 93       	st	X, r24
	// Step2: Insert Value
	//TCCR0_REG |= MTIMER0_NO_CLK;
}
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <MTIMER0_enSetCallBack>:

ErrorState_t MTIMER0_enSetCallBack(u8 copy_u8IntID, void (*ptrfn) (void))
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <MTIMER0_enSetCallBack+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <MTIMER0_enSetCallBack+0x8>
    1288:	00 d0       	rcall	.+0      	; 0x128a <MTIMER0_enSetCallBack+0xa>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	7c 83       	std	Y+4, r23	; 0x04
    1292:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	89 83       	std	Y+1, r24	; 0x01

	if(ptrfn == NULL)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	19 f4       	brne	.+6      	; 0x12a6 <MTIMER0_enSetCallBack+0x26>
	{
		Local_enState = NULL_PTR_ERR;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	1e c0       	rjmp	.+60     	; 0x12e2 <MTIMER0_enSetCallBack+0x62>
	}
	else
	{
		switch (copy_u8IntID)
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3e 83       	std	Y+6, r19	; 0x06
    12ae:	2d 83       	std	Y+5, r18	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <MTIMER0_enSetCallBack+0x44>
    12b8:	2d 81       	ldd	r18, Y+5	; 0x05
    12ba:	3e 81       	ldd	r19, Y+6	; 0x06
    12bc:	21 30       	cpi	r18, 0x01	; 1
    12be:	31 05       	cpc	r19, r1
    12c0:	41 f0       	breq	.+16     	; 0x12d2 <MTIMER0_enSetCallBack+0x52>
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <MTIMER0_enSetCallBack+0x60>
		{
		case MTIMER0_OVF_INT_ID:
			CallBackArr[0] = ptrfn;
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	90 93 ad 01 	sts	0x01AD, r25
    12cc:	80 93 ac 01 	sts	0x01AC, r24
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <MTIMER0_enSetCallBack+0x62>
			break;
		case MTIMER0_COM_INT_ID:
			CallBackArr[1] = ptrfn;
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	90 93 af 01 	sts	0x01AF, r25
    12da:	80 93 ae 01 	sts	0x01AE, r24
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <MTIMER0_enSetCallBack+0x62>
			break;
		default:
			Local_enState = OUT_OF_RANG_ERR;
    12e0:	19 82       	std	Y+1, r1	; 0x01
		{
			Local_enState = OUT_OF_RANG_ERR;
		}
		*/
	}
	return Local_enState;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e4:	26 96       	adiw	r28, 0x06	; 6
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <MTIMER0_enSetTime>:

ErrorState_t MTIMER0_enSetTime(u32 copy_u32DelayMS)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	a5 97       	sbiw	r28, 0x25	; 37
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	6d 8f       	std	Y+29, r22	; 0x1d
    130c:	7e 8f       	std	Y+30, r23	; 0x1e
    130e:	8f 8f       	std	Y+31, r24	; 0x1f
    1310:	98 a3       	std	Y+32, r25	; 0x20
	u32 Local_u32Arr[5] = {1, 8, 64, 256, 1024};
    1312:	ce 01       	movw	r24, r28
    1314:	09 96       	adiw	r24, 0x09	; 9
    1316:	9a a3       	std	Y+34, r25	; 0x22
    1318:	89 a3       	std	Y+33, r24	; 0x21
    131a:	e4 e8       	ldi	r30, 0x84	; 132
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	fc a3       	std	Y+36, r31	; 0x24
    1320:	eb a3       	std	Y+35, r30	; 0x23
    1322:	f4 e1       	ldi	r31, 0x14	; 20
    1324:	fd a3       	std	Y+37, r31	; 0x25
    1326:	eb a1       	ldd	r30, Y+35	; 0x23
    1328:	fc a1       	ldd	r31, Y+36	; 0x24
    132a:	00 80       	ld	r0, Z
    132c:	8b a1       	ldd	r24, Y+35	; 0x23
    132e:	9c a1       	ldd	r25, Y+36	; 0x24
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	9c a3       	std	Y+36, r25	; 0x24
    1334:	8b a3       	std	Y+35, r24	; 0x23
    1336:	e9 a1       	ldd	r30, Y+33	; 0x21
    1338:	fa a1       	ldd	r31, Y+34	; 0x22
    133a:	00 82       	st	Z, r0
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	9d a1       	ldd	r25, Y+37	; 0x25
    1348:	91 50       	subi	r25, 0x01	; 1
    134a:	9d a3       	std	Y+37, r25	; 0x25
    134c:	ed a1       	ldd	r30, Y+37	; 0x25
    134e:	ee 23       	and	r30, r30
    1350:	51 f7       	brne	.-44     	; 0x1326 <MTIMER0_enSetTime+0x30>
	f32 Local_f32TickTime = (f32) Local_u32Arr[MTIMER0_CLK - 1] / FCPU;
    1352:	8d 89       	ldd	r24, Y+21	; 0x15
    1354:	9e 89       	ldd	r25, Y+22	; 0x16
    1356:	af 89       	ldd	r26, Y+23	; 0x17
    1358:	b8 8d       	ldd	r27, Y+24	; 0x18
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	af 83       	std	Y+7, r26	; 0x07
    1380:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32TotalNumberOfCounts = (copy_u32DelayMS * 1000) / Local_f32TickTime;
    1382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1384:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1386:	af 8d       	ldd	r26, Y+31	; 0x1f
    1388:	b8 a1       	ldd	r27, Y+32	; 0x20
    138a:	28 ee       	ldi	r18, 0xE8	; 232
    138c:	33 e0       	ldi	r19, 0x03	; 3
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__mulsi3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	4f 81       	ldd	r20, Y+7	; 0x07
    13b4:	58 85       	ldd	r21, Y+8	; 0x08
    13b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	ab 83       	std	Y+3, r26	; 0x03
    13d0:	bc 83       	std	Y+4, r27	; 0x04
	}
	OCR0_REG = Local_u8OCRValue;
	g_u32NumOfCompMatches = Local_u32TotalNumberOfCounts / Local_u8OCRValue;
#endif

	return SUCCESS;
    13d2:	82 e0       	ldi	r24, 0x02	; 2
}
    13d4:	a5 96       	adiw	r28, 0x25	; 37
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <MTIMER0_enEnableInt>:

ErrorState_t MTIMER0_enEnableInt(u8 copy_u8IntID)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <MTIMER0_enEnableInt+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <MTIMER0_enEnableInt+0x8>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_u8IntID)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3c 83       	std	Y+4, r19	; 0x04
    1400:	2b 83       	std	Y+3, r18	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	31 f0       	breq	.+12     	; 0x1416 <MTIMER0_enEnableInt+0x30>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	21 30       	cpi	r18, 0x01	; 1
    1410:	31 05       	cpc	r19, r1
    1412:	49 f0       	breq	.+18     	; 0x1426 <MTIMER0_enEnableInt+0x40>
    1414:	10 c0       	rjmp	.+32     	; 0x1436 <MTIMER0_enEnableInt+0x50>
	{
	case MTIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG, TOIE0_BIT);
    1416:	a9 e5       	ldi	r26, 0x59	; 89
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 e5       	ldi	r30, 0x59	; 89
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <MTIMER0_enEnableInt+0x52>
		break;
	case MTIMER0_COM_INT_ID:
		SET_BIT(TIMSK_REG, OCIE0_BIT);
    1426:	a9 e5       	ldi	r26, 0x59	; 89
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 e5       	ldi	r30, 0x59	; 89
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	8c 93       	st	X, r24
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <MTIMER0_enEnableInt+0x52>
		break;
	default:
		Local_enState = OUT_OF_RANG_ERR;
    1436:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_enState;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <MTIMER0_enDisableInt>:

ErrorState_t MTIMER0_enDisableInt(u8 copy_u8IntID)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <MTIMER0_enDisableInt+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <MTIMER0_enDisableInt+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_u8IntID)
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3c 83       	std	Y+4, r19	; 0x04
    1462:	2b 83       	std	Y+3, r18	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	31 f0       	breq	.+12     	; 0x1478 <MTIMER0_enDisableInt+0x30>
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	21 30       	cpi	r18, 0x01	; 1
    1472:	31 05       	cpc	r19, r1
    1474:	49 f0       	breq	.+18     	; 0x1488 <MTIMER0_enDisableInt+0x40>
    1476:	10 c0       	rjmp	.+32     	; 0x1498 <MTIMER0_enDisableInt+0x50>
	{
	case MTIMER0_OVF_INT_ID:
		CLR_BIT(TIMSK_REG, TOIE0_BIT);
    1478:	a9 e5       	ldi	r26, 0x59	; 89
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e9 e5       	ldi	r30, 0x59	; 89
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8e 7f       	andi	r24, 0xFE	; 254
    1484:	8c 93       	st	X, r24
    1486:	09 c0       	rjmp	.+18     	; 0x149a <MTIMER0_enDisableInt+0x52>
		break;
	case MTIMER0_COM_INT_ID:
		CLR_BIT(TIMSK_REG, OCIE0_BIT);
    1488:	a9 e5       	ldi	r26, 0x59	; 89
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e9 e5       	ldi	r30, 0x59	; 89
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8d 7f       	andi	r24, 0xFD	; 253
    1494:	8c 93       	st	X, r24
    1496:	01 c0       	rjmp	.+2      	; 0x149a <MTIMER0_enDisableInt+0x52>
		break;
	default:
		Local_enState = OUT_OF_RANG_ERR;
    1498:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_enState;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <MTIMER0_enSetCompareValue>:

ErrorState_t MTIMER0_enSetCompareValue(u8 copy_u8Value)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = copy_u8Value;
    14b6:	ec e5       	ldi	r30, 0x5C	; 92
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24

	return SUCCESS;
    14be:	82 e0       	ldi	r24, 0x02	; 2
}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <MTIMER0_enPhaseCorrectPWM>:
	return SUCCESS;
}

#elif(MTIMER0_MODE == MTIMER0_MODE_PHASE_CORRECT_PWM)
ErrorState_t MTIMER0_enPhaseCorrectPWM(u8 copy_u8Duty)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <MTIMER0_enPhaseCorrectPWM+0x6>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8Duty >= 0 && copy_u8Duty <= 100)
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	85 36       	cpi	r24, 0x65	; 101
    14dc:	d8 f4       	brcc	.+54     	; 0x1514 <MTIMER0_enPhaseCorrectPWM+0x4c>
	{
#if(MTIMER0_OC0_MODE == MTIMER0_OC0_NONINVERTED)
		OCR0_REG = ((copy_u8Duty * 255) / 100);
    14de:	ec e5       	ldi	r30, 0x5C	; 92
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	48 2f       	mov	r20, r24
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	ca 01       	movw	r24, r20
    14ea:	9c 01       	movw	r18, r24
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	c9 01       	movw	r24, r18
    14f2:	96 95       	lsr	r25
    14f4:	98 2f       	mov	r25, r24
    14f6:	88 27       	eor	r24, r24
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	82 1b       	sub	r24, r18
    14fe:	93 0b       	sbc	r25, r19
    1500:	84 0f       	add	r24, r20
    1502:	95 1f       	adc	r25, r21
    1504:	24 e6       	ldi	r18, 0x64	; 100
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	b9 01       	movw	r22, r18
    150a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divmodhi4>
    150e:	cb 01       	movw	r24, r22
    1510:	80 83       	st	Z, r24
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <MTIMER0_enPhaseCorrectPWM+0x4e>
		#error("Wrong PHASE CORRECT PWM OC0 Mode")
	#endif
	}
	else
	{
		Local_enState = OUT_OF_RANG_ERR;
    1514:	19 82       	std	Y+1, r1	; 0x01
	}
	return SUCCESS;
    1516:	82 e0       	ldi	r24, 0x02	; 2
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <__vector_11>:
#endif

ISR(TIMER0_OVF_vect)
{
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumOfCounts = 0;
	Local_u32NumOfCounts++;	// Increment Number of Counts Every Time ISR Happens
    154c:	80 91 b9 01 	lds	r24, 0x01B9
    1550:	90 91 ba 01 	lds	r25, 0x01BA
    1554:	a0 91 bb 01 	lds	r26, 0x01BB
    1558:	b0 91 bc 01 	lds	r27, 0x01BC
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	a1 1d       	adc	r26, r1
    1560:	b1 1d       	adc	r27, r1
    1562:	80 93 b9 01 	sts	0x01B9, r24
    1566:	90 93 ba 01 	sts	0x01BA, r25
    156a:	a0 93 bb 01 	sts	0x01BB, r26
    156e:	b0 93 bc 01 	sts	0x01BC, r27

	// If Number of Counts Equals to global Required Number of Overflows
	if(Local_u32NumOfCounts == g_u32NumOfOverflows)
    1572:	20 91 b9 01 	lds	r18, 0x01B9
    1576:	30 91 ba 01 	lds	r19, 0x01BA
    157a:	40 91 bb 01 	lds	r20, 0x01BB
    157e:	50 91 bc 01 	lds	r21, 0x01BC
    1582:	80 91 b0 01 	lds	r24, 0x01B0
    1586:	90 91 b1 01 	lds	r25, 0x01B1
    158a:	a0 91 b2 01 	lds	r26, 0x01B2
    158e:	b0 91 b3 01 	lds	r27, 0x01B3
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	4a 07       	cpc	r20, r26
    1598:	5b 07       	cpc	r21, r27
    159a:	c9 f4       	brne	.+50     	; 0x15ce <__vector_11+0xac>
	{
		// Preload TCNT with the Fraction Part
		TCNT0_REG = 256 - g_u8NumOfRemaningCount;
    159c:	e2 e5       	ldi	r30, 0x52	; 82
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 91 b4 01 	lds	r24, 0x01B4
    15a4:	81 95       	neg	r24
    15a6:	80 83       	st	Z, r24

		// Take Action
		if (CallBackArr[MTIMER0_OVF_INT_ID] != NULL)
    15a8:	80 91 ac 01 	lds	r24, 0x01AC
    15ac:	90 91 ad 01 	lds	r25, 0x01AD
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f0       	breq	.+10     	; 0x15be <__vector_11+0x9c>
		{
			CallBackArr[MTIMER0_OVF_INT_ID]();
    15b4:	e0 91 ac 01 	lds	r30, 0x01AC
    15b8:	f0 91 ad 01 	lds	r31, 0x01AD
    15bc:	09 95       	icall
		}

		// Reset the Local Counter for the New Period
		Local_u32NumOfCounts = 0;
    15be:	10 92 b9 01 	sts	0x01B9, r1
    15c2:	10 92 ba 01 	sts	0x01BA, r1
    15c6:	10 92 bb 01 	sts	0x01BB, r1
    15ca:	10 92 bc 01 	sts	0x01BC, r1
	}
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	4f 93       	push	r20
    1604:	5f 93       	push	r21
    1606:	6f 93       	push	r22
    1608:	7f 93       	push	r23
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32NumOfCounts = 0;
	Local_u32NumOfCounts++;
    161e:	80 91 bd 01 	lds	r24, 0x01BD
    1622:	90 91 be 01 	lds	r25, 0x01BE
    1626:	a0 91 bf 01 	lds	r26, 0x01BF
    162a:	b0 91 c0 01 	lds	r27, 0x01C0
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	a1 1d       	adc	r26, r1
    1632:	b1 1d       	adc	r27, r1
    1634:	80 93 bd 01 	sts	0x01BD, r24
    1638:	90 93 be 01 	sts	0x01BE, r25
    163c:	a0 93 bf 01 	sts	0x01BF, r26
    1640:	b0 93 c0 01 	sts	0x01C0, r27
	if(Local_u32NumOfCounts == g_u32NumOfCompMatches)
    1644:	20 91 bd 01 	lds	r18, 0x01BD
    1648:	30 91 be 01 	lds	r19, 0x01BE
    164c:	40 91 bf 01 	lds	r20, 0x01BF
    1650:	50 91 c0 01 	lds	r21, 0x01C0
    1654:	80 91 b5 01 	lds	r24, 0x01B5
    1658:	90 91 b6 01 	lds	r25, 0x01B6
    165c:	a0 91 b7 01 	lds	r26, 0x01B7
    1660:	b0 91 b8 01 	lds	r27, 0x01B8
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	4a 07       	cpc	r20, r26
    166a:	5b 07       	cpc	r21, r27
    166c:	99 f4       	brne	.+38     	; 0x1694 <__vector_10+0xa0>
	{
		Local_u32NumOfCounts = 0;
    166e:	10 92 bd 01 	sts	0x01BD, r1
    1672:	10 92 be 01 	sts	0x01BE, r1
    1676:	10 92 bf 01 	sts	0x01BF, r1
    167a:	10 92 c0 01 	sts	0x01C0, r1
		if (CallBackArr[MTIMER0_COM_INT_ID] != NULL)
    167e:	80 91 ae 01 	lds	r24, 0x01AE
    1682:	90 91 af 01 	lds	r25, 0x01AF
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	29 f0       	breq	.+10     	; 0x1694 <__vector_10+0xa0>
		{
			CallBackArr[MTIMER0_COM_INT_ID]();
    168a:	e0 91 ae 01 	lds	r30, 0x01AE
    168e:	f0 91 af 01 	lds	r31, 0x01AF
    1692:	09 95       	icall
		}
	}
}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <MIIC_enInit>:
#include "MIIC_priv.h"
#include "MIIC_config.h"
#include "MIIC_int.h"

ErrorState_t MIIC_enInit(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	// Speed = 400 KHZ at FCPU = 8 MHZ, Prescaler = 1
	// Config Speed -> 400 KHZ	(TWBR Register, Prescaler Bits)
	CLR_BIT(TWSR_REG, TWPS0_BIT);
    16c4:	a1 e2       	ldi	r26, 0x21	; 33
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e1 e2       	ldi	r30, 0x21	; 33
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8e 7f       	andi	r24, 0xFE	; 254
    16d0:	8c 93       	st	X, r24
	CLR_BIT(TWSR_REG, TWPS1_BIT);
    16d2:	a1 e2       	ldi	r26, 0x21	; 33
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e1 e2       	ldi	r30, 0x21	; 33
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	8c 93       	st	X, r24

	TWBR_REG = 0x02;
    16e0:	e0 e2       	ldi	r30, 0x20	; 32
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	80 83       	st	Z, r24

	// Enable TWI (Turn ON)
	SET_BIT(TWCR_REG, TWEN_BIT);
    16e8:	a6 e5       	ldi	r26, 0x56	; 86
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e6 e5       	ldi	r30, 0x56	; 86
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	84 60       	ori	r24, 0x04	; 4
    16f4:	8c 93       	st	X, r24
}
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <MIIC_enSendStart>:

ErrorState_t MIIC_enSendStart(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	// Clear Flag + Set Start Bit + Enable TWI
	TWCR_REG = (1 << TWINT_BIT) | (1 << TWSTA_BIT) | (1 << TWEN_BIT);
    1706:	e6 e5       	ldi	r30, 0x56	; 86
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	84 ea       	ldi	r24, 0xA4	; 164
    170c:	80 83       	st	Z, r24

	// Wait Until Operation is Done
	while(!(TWCR_REG & (1 << TWINT_BIT)));
    170e:	e6 e5       	ldi	r30, 0x56	; 86
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 23       	and	r24, r24
    1716:	dc f7       	brge	.-10     	; 0x170e <MIIC_enSendStart+0x10>

	return SUCCESS;
    1718:	82 e0       	ldi	r24, 0x02	; 2
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <MIIC_enSendStop>:

ErrorState_t MIIC_enSendStop(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1 << TWINT_BIT) | (1 << TWEN_BIT) | (1 << TWSTO_BIT);
    1728:	e6 e5       	ldi	r30, 0x56	; 86
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	84 e9       	ldi	r24, 0x94	; 148
    172e:	80 83       	st	Z, r24

	return SUCCESS;
    1730:	82 e0       	ldi	r24, 0x02	; 2
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <MIIC_enSendByte>:

ErrorState_t MIIC_enSendByte(u8 copy_u8data)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
	// Load Data Into Data Register
	TWDR_REG = copy_u8data;
    1744:	e3 e2       	ldi	r30, 0x23	; 35
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	80 83       	st	Z, r24

	// Clear Flag + Set Enable
	TWCR_REG = (1 << TWINT_BIT) | (1 << TWEN_BIT);
    174c:	e6 e5       	ldi	r30, 0x56	; 86
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	84 e8       	ldi	r24, 0x84	; 132
    1752:	80 83       	st	Z, r24

	// Wait Until Operation is Done
	while (!(TWCR_REG & (1 << TWINT_BIT)));
    1754:	e6 e5       	ldi	r30, 0x56	; 86
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 23       	and	r24, r24
    175c:	dc f7       	brge	.-10     	; 0x1754 <MIIC_enSendByte+0x1c>

	return SUCCESS;
    175e:	82 e0       	ldi	r24, 0x02	; 2
}
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <MIIC_enReceiverByteACK>:

ErrorState_t MIIC_enReceiverByteACK(u8 *ptrReceiveData)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <MIIC_enReceiverByteACK+0x6>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	// Clear Flag + Set Enable + Set ACK Bit
	TWCR_REG = (1 << TWINT_BIT) | (1 << TWEN_BIT) | (1 << TWEA_BIT);
    1776:	e6 e5       	ldi	r30, 0x56	; 86
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	84 ec       	ldi	r24, 0xC4	; 196
    177c:	80 83       	st	Z, r24

	// Wait Until Operation is Done
	while (!(TWCR_REG & (1 << TWINT_BIT)));
    177e:	e6 e5       	ldi	r30, 0x56	; 86
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 23       	and	r24, r24
    1786:	dc f7       	brge	.-10     	; 0x177e <MIIC_enReceiverByteACK+0x16>

	// Load Received Byte Into Pointer
	*ptrReceiveData = TWDR_REG;
    1788:	e3 e2       	ldi	r30, 0x23	; 35
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	e9 81       	ldd	r30, Y+1	; 0x01
    1790:	fa 81       	ldd	r31, Y+2	; 0x02
    1792:	80 83       	st	Z, r24

	return SUCCESS;
    1794:	82 e0       	ldi	r24, 0x02	; 2
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <MIIC_enReceiverByteNoACK>:

ErrorState_t MIIC_enReceiverByteNoACK(u8 *ptrReceiveData)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <MIIC_enReceiverByteNoACK+0x6>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
	// Clear Flag + Set Enable + Set ACK Bit
	TWCR_REG = (1 << TWINT_BIT) | (1 << TWEN_BIT);
    17ae:	e6 e5       	ldi	r30, 0x56	; 86
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	84 e8       	ldi	r24, 0x84	; 132
    17b4:	80 83       	st	Z, r24

	// Wait Until Operation is Done
	while (!(TWCR_REG & (1 << TWINT_BIT)));
    17b6:	e6 e5       	ldi	r30, 0x56	; 86
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 23       	and	r24, r24
    17be:	dc f7       	brge	.-10     	; 0x17b6 <MIIC_enReceiverByteNoACK+0x16>

	// Load Received Byte Into Pointer
	*ptrReceiveData = TWDR_REG;
    17c0:	e3 e2       	ldi	r30, 0x23	; 35
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	e9 81       	ldd	r30, Y+1	; 0x01
    17c8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24

	return SUCCESS;
    17cc:	82 e0       	ldi	r24, 0x02	; 2
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <MIIC_enReadStatus>:

ErrorState_t MIIC_enReadStatus(u8 *ptrStatusValue)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <MIIC_enReadStatus+0x6>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
	// Apply Mask on Status Register and Return Status Code
	*ptrStatusValue = TWSR_REG & MTWI_STATUS_MASK;
    17e6:	e1 e2       	ldi	r30, 0x21	; 33
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24

	return SUCCESS;
    17f4:	82 e0       	ldi	r24, 0x02	; 2
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <MGIE_enEnable>:
#include "MGIE_priv.h"
#include "MGIE_config.h"
#include "MGIE_int.h"

ErrorState_t MGIE_enEnable(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	// SET_BIT(SREG_REG, I_BIT)
	asm("SEI");
    1808:	78 94       	sei
	return SUCCESS;
    180a:	82 e0       	ldi	r24, 0x02	; 2
}
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <MGIE_enDiable>:

ErrorState_t MGIE_enDiable(void)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	// CLR_BIT(SREG_REG, I_BIT)
	asm("CLI");
    181a:	f8 94       	cli
	return SUCCESS;
    181c:	82 e0       	ldi	r24, 0x02	; 2
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <MEXTI_enEnable>:
#include <avr/interrupt.h>

static void (*CallBackArr[3]) (void) = {NULL, NULL, NULL};

ErrorState_t MEXTI_enEnable(InterruptID_t copy_enID, IntTrigger_t copy_enTrig)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <MEXTI_enEnable+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <MEXTI_enEnable+0x8>
    182c:	00 d0       	rcall	.+0      	; 0x182e <MEXTI_enEnable+0xa>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	6b 83       	std	Y+3, r22	; 0x03
	// Config Trigger
	ErrorState_t Local_enState = SUCCESS;
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	89 83       	std	Y+1, r24	; 0x01
	if(copy_enTrig > RAIS_EDGE_TRIG || copy_enTrig < LOW_LEVEL_TRIG)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	10 f0       	brcs	.+4      	; 0x1844 <MEXTI_enEnable+0x20>
	{
		Local_enState = OUT_OF_RANG_ERR;
    1840:	19 82       	std	Y+1, r1	; 0x01
    1842:	62 c0       	rjmp	.+196    	; 0x1908 <MEXTI_enEnable+0xe4>
	}
	else
	{
		switch (copy_enID)
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3d 83       	std	Y+5, r19	; 0x05
    184c:	2c 83       	std	Y+4, r18	; 0x04
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	86 30       	cpi	r24, 0x06	; 6
    1854:	91 05       	cpc	r25, r1
    1856:	59 f0       	breq	.+22     	; 0x186e <MEXTI_enEnable+0x4a>
    1858:	2c 81       	ldd	r18, Y+4	; 0x04
    185a:	3d 81       	ldd	r19, Y+5	; 0x05
    185c:	27 30       	cpi	r18, 0x07	; 7
    185e:	31 05       	cpc	r19, r1
    1860:	b1 f0       	breq	.+44     	; 0x188e <MEXTI_enEnable+0x6a>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	85 30       	cpi	r24, 0x05	; 5
    1868:	91 05       	cpc	r25, r1
    186a:	41 f1       	breq	.+80     	; 0x18bc <MEXTI_enEnable+0x98>
    186c:	39 c0       	rjmp	.+114    	; 0x18e0 <MEXTI_enEnable+0xbc>
		{
		case INT0_ID:
			// Apply Mask
			MCUCR_REG &= INT0_SC_MASK;
    186e:	a5 e5       	ldi	r26, 0x55	; 85
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e5       	ldi	r30, 0x55	; 85
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8c 7f       	andi	r24, 0xFC	; 252
    187a:	8c 93       	st	X, r24

			// Insert Value
			MCUCR_REG |= copy_enTrig;
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	90 81       	ld	r25, Z
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	89 2b       	or	r24, r25
    188a:	8c 93       	st	X, r24
    188c:	2a c0       	rjmp	.+84     	; 0x18e2 <MEXTI_enEnable+0xbe>
			break;

		case INT1_ID:
			// Apply Mask
			MCUCR_REG &= INT1_SC_MASK;
    188e:	a5 e5       	ldi	r26, 0x55	; 85
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e5 e5       	ldi	r30, 0x55	; 85
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	83 7f       	andi	r24, 0xF3	; 243
    189a:	8c 93       	st	X, r24

			// Insert Value
			MCUCR_REG |= copy_enTrig << INT1_SC_SH;
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	82 2b       	or	r24, r18
    18b8:	8c 93       	st	X, r24
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <MEXTI_enEnable+0xbe>
			break;

		case INT2_ID:
			CLR_BIT(MCUCSR_REG, ISC2_BIT);
    18bc:	a4 e5       	ldi	r26, 0x54	; 84
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e5       	ldi	r30, 0x54	; 84
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8f 7b       	andi	r24, 0xBF	; 191
    18c8:	8c 93       	st	X, r24
			MCUCSR_REG |= GET_BIT(copy_enTrig, 0) << ISC2_BIT;
    18ca:	a4 e5       	ldi	r26, 0x54	; 84
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e4 e5       	ldi	r30, 0x54	; 84
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	98 2f       	mov	r25, r24
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	80 74       	andi	r24, 0x40	; 64
    18da:	89 2b       	or	r24, r25
    18dc:	8c 93       	st	X, r24
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <MEXTI_enEnable+0xbe>
			break;

		default:
			Local_enState = OUT_OF_RANG_ERR;
    18e0:	19 82       	std	Y+1, r1	; 0x01
		}
		// Enable Special Key
		SET_BIT(GICR_REG, copy_enID);
    18e2:	ab e5       	ldi	r26, 0x5B	; 91
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e5       	ldi	r30, 0x5B	; 91
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <MEXTI_enEnable+0xdc>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <MEXTI_enEnable+0xd8>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
	}

}
    1908:	26 96       	adiw	r28, 0x06	; 6
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <MEXTI_enDisable>:

ErrorState_t MEXTI_enDisable(InterruptID_t copy_enID)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <MEXTI_enDisable+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	89 83       	std	Y+1, r24	; 0x01
	if(copy_enID >= INT2_ID && copy_enID <= INT1_ID)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	85 30       	cpi	r24, 0x05	; 5
    192e:	c0 f0       	brcs	.+48     	; 0x1960 <MEXTI_enDisable+0x46>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	a8 f4       	brcc	.+42     	; 0x1960 <MEXTI_enDisable+0x46>
	{
		CLR_BIT(GICR_REG, copy_enID);
    1936:	ab e5       	ldi	r26, 0x5B	; 91
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	eb e5       	ldi	r30, 0x5B	; 91
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <MEXTI_enDisable+0x3a>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <MEXTI_enDisable+0x36>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <MEXTI_enDisable+0x48>
	}
	else
	{
		Local_enState = OUT_OF_RANG_ERR;
    1960:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enState;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <MEXTI_ensetCallBack>:

ErrorState_t MEXTI_ensetCallBack(InterruptID_t copy_enID, void (*ptrfn)(void))
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <MEXTI_ensetCallBack+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <MEXTI_ensetCallBack+0x8>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <MEXTI_ensetCallBack+0xa>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	7c 83       	std	Y+4, r23	; 0x04
    1980:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn == NULL)
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	19 f4       	brne	.+6      	; 0x1994 <MEXTI_ensetCallBack+0x26>
	{
		Local_enState = NULL_PTR_ERR;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	2b c0       	rjmp	.+86     	; 0x19ea <MEXTI_ensetCallBack+0x7c>
	}
	else
	{
		switch (copy_enID)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3e 83       	std	Y+6, r19	; 0x06
    199c:	2d 83       	std	Y+5, r18	; 0x05
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	86 30       	cpi	r24, 0x06	; 6
    19a4:	91 05       	cpc	r25, r1
    19a6:	59 f0       	breq	.+22     	; 0x19be <MEXTI_ensetCallBack+0x50>
    19a8:	2d 81       	ldd	r18, Y+5	; 0x05
    19aa:	3e 81       	ldd	r19, Y+6	; 0x06
    19ac:	27 30       	cpi	r18, 0x07	; 7
    19ae:	31 05       	cpc	r19, r1
    19b0:	69 f0       	breq	.+26     	; 0x19cc <MEXTI_ensetCallBack+0x5e>
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	85 30       	cpi	r24, 0x05	; 5
    19b8:	91 05       	cpc	r25, r1
    19ba:	79 f0       	breq	.+30     	; 0x19da <MEXTI_ensetCallBack+0x6c>
    19bc:	15 c0       	rjmp	.+42     	; 0x19e8 <MEXTI_ensetCallBack+0x7a>
		{
		case INT0_ID:
			CallBackArr[0] = ptrfn;
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	90 93 c2 01 	sts	0x01C2, r25
    19c6:	80 93 c1 01 	sts	0x01C1, r24
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <MEXTI_ensetCallBack+0x7c>
			break;
		case INT1_ID:
			CallBackArr[1] = ptrfn;
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	90 93 c4 01 	sts	0x01C4, r25
    19d4:	80 93 c3 01 	sts	0x01C3, r24
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <MEXTI_ensetCallBack+0x7c>
			break;
		case INT2_ID:
			CallBackArr[2] = ptrfn;
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	90 93 c6 01 	sts	0x01C6, r25
    19e2:	80 93 c5 01 	sts	0x01C5, r24
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <MEXTI_ensetCallBack+0x7c>
			break;
		default:
			Local_enState = OUT_OF_RANG_ERR;
    19e8:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_enState;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	26 96       	adiw	r28, 0x06	; 6
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <__vector_1>:

ISR(INT0_vect)
{
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	if(CallBackArr[0] != NULL)
    1a28:	80 91 c1 01 	lds	r24, 0x01C1
    1a2c:	90 91 c2 01 	lds	r25, 0x01C2
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	29 f0       	breq	.+10     	; 0x1a3e <__vector_1+0x40>
	{
		CallBackArr[0]();
    1a34:	e0 91 c1 01 	lds	r30, 0x01C1
    1a38:	f0 91 c2 01 	lds	r31, 0x01C2
    1a3c:	09 95       	icall
	}
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_2>:

ISR(INT1_vect)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	if (CallBackArr[1] != NULL)
    1a8e:	80 91 c3 01 	lds	r24, 0x01C3
    1a92:	90 91 c4 01 	lds	r25, 0x01C4
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <__vector_2+0x40>
	{
		CallBackArr[1]();
    1a9a:	e0 91 c3 01 	lds	r30, 0x01C3
    1a9e:	f0 91 c4 01 	lds	r31, 0x01C4
    1aa2:	09 95       	icall
	}
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	ff 91       	pop	r31
    1aaa:	ef 91       	pop	r30
    1aac:	bf 91       	pop	r27
    1aae:	af 91       	pop	r26
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	7f 91       	pop	r23
    1ab6:	6f 91       	pop	r22
    1ab8:	5f 91       	pop	r21
    1aba:	4f 91       	pop	r20
    1abc:	3f 91       	pop	r19
    1abe:	2f 91       	pop	r18
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <__vector_3>:

ISR(INT2_vect)
{
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	2f 93       	push	r18
    1ad6:	3f 93       	push	r19
    1ad8:	4f 93       	push	r20
    1ada:	5f 93       	push	r21
    1adc:	6f 93       	push	r22
    1ade:	7f 93       	push	r23
    1ae0:	8f 93       	push	r24
    1ae2:	9f 93       	push	r25
    1ae4:	af 93       	push	r26
    1ae6:	bf 93       	push	r27
    1ae8:	ef 93       	push	r30
    1aea:	ff 93       	push	r31
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
	if (CallBackArr[2] != NULL)
    1af4:	80 91 c5 01 	lds	r24, 0x01C5
    1af8:	90 91 c6 01 	lds	r25, 0x01C6
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	29 f0       	breq	.+10     	; 0x1b0a <__vector_3+0x40>
	{
		CallBackArr[2]();
    1b00:	e0 91 c5 01 	lds	r30, 0x01C5
    1b04:	f0 91 c6 01 	lds	r31, 0x01C6
    1b08:	09 95       	icall
	}
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <MDIO_setPinDirection>:
#include "BIT_MATH.h"
#include "MDIO_priv.h"
#include "MDIO_config.h"
#include "MDIO_int.h"

void MDIO_setPinDirection(Pin_t copy_enpin, Direction_t copy_enDirection){
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	66 97       	sbiw	r28, 0x16	; 22
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	89 87       	std	Y+9, r24	; 0x09
    1b46:	6a 87       	std	Y+10, r22	; 0x0a
	u32 Local_u8port = copy_enpin / 10;
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a e0       	ldi	r25, 0x0A	; 10
    1b4c:	69 2f       	mov	r22, r25
    1b4e:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	af 83       	std	Y+7, r26	; 0x07
    1b60:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u8pin = copy_enpin % 10;
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a e0       	ldi	r25, 0x0A	; 10
    1b66:	69 2f       	mov	r22, r25
    1b68:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    1b6c:	89 2f       	mov	r24, r25
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	ab 83       	std	Y+3, r26	; 0x03
    1b7c:	bc 83       	std	Y+4, r27	; 0x04

	switch(Local_u8port)
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	af 81       	ldd	r26, Y+7	; 0x07
    1b84:	b8 85       	ldd	r27, Y+8	; 0x08
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	9c 8b       	std	Y+20, r25	; 0x14
    1b8a:	ad 8b       	std	Y+21, r26	; 0x15
    1b8c:	be 8b       	std	Y+22, r27	; 0x16
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	9c 89       	ldd	r25, Y+20	; 0x14
    1b92:	ad 89       	ldd	r26, Y+21	; 0x15
    1b94:	be 89       	ldd	r27, Y+22	; 0x16
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	91 05       	cpc	r25, r1
    1b9a:	a1 05       	cpc	r26, r1
    1b9c:	b1 05       	cpc	r27, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <MDIO_setPinDirection+0x72>
    1ba0:	5f c0       	rjmp	.+190    	; 0x1c60 <MDIO_setPinDirection+0x130>
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	ad 89       	ldd	r26, Y+21	; 0x15
    1ba8:	be 89       	ldd	r27, Y+22	; 0x16
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	a1 05       	cpc	r26, r1
    1bb0:	b1 05       	cpc	r27, r1
    1bb2:	50 f4       	brcc	.+20     	; 0x1bc8 <MDIO_setPinDirection+0x98>
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	ad 89       	ldd	r26, Y+21	; 0x15
    1bba:	be 89       	ldd	r27, Y+22	; 0x16
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	a1 05       	cpc	r26, r1
    1bc2:	b1 05       	cpc	r27, r1
    1bc4:	b1 f0       	breq	.+44     	; 0x1bf2 <MDIO_setPinDirection+0xc2>
    1bc6:	f0 c0       	rjmp	.+480    	; 0x1da8 <MDIO_setPinDirection+0x278>
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	ad 89       	ldd	r26, Y+21	; 0x15
    1bce:	be 89       	ldd	r27, Y+22	; 0x16
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	a1 05       	cpc	r26, r1
    1bd6:	b1 05       	cpc	r27, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <MDIO_setPinDirection+0xac>
    1bda:	79 c0       	rjmp	.+242    	; 0x1cce <MDIO_setPinDirection+0x19e>
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	9c 89       	ldd	r25, Y+20	; 0x14
    1be0:	ad 89       	ldd	r26, Y+21	; 0x15
    1be2:	be 89       	ldd	r27, Y+22	; 0x16
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	91 05       	cpc	r25, r1
    1be8:	a1 05       	cpc	r26, r1
    1bea:	b1 05       	cpc	r27, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <MDIO_setPinDirection+0xc0>
    1bee:	a6 c0       	rjmp	.+332    	; 0x1d3c <MDIO_setPinDirection+0x20c>
    1bf0:	db c0       	rjmp	.+438    	; 0x1da8 <MDIO_setPinDirection+0x278>
	{
	case PORTA:
		switch(copy_enDirection)
    1bf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf4:	a8 2f       	mov	r26, r24
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ba 8b       	std	Y+18, r27	; 0x12
    1bfa:	a9 8b       	std	Y+17, r26	; 0x11
    1bfc:	29 89       	ldd	r18, Y+17	; 0x11
    1bfe:	3a 89       	ldd	r19, Y+18	; 0x12
    1c00:	21 15       	cp	r18, r1
    1c02:	31 05       	cpc	r19, r1
    1c04:	31 f0       	breq	.+12     	; 0x1c12 <MDIO_setPinDirection+0xe2>
    1c06:	89 89       	ldd	r24, Y+17	; 0x11
    1c08:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	a9 f0       	breq	.+42     	; 0x1c3a <MDIO_setPinDirection+0x10a>
    1c10:	cb c0       	rjmp	.+406    	; 0x1da8 <MDIO_setPinDirection+0x278>
		{
		case INPUT:
			CLR_BIT(DDRA_REG, Local_u8pin);
    1c12:	aa e3       	ldi	r26, 0x3A	; 58
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ea e3       	ldi	r30, 0x3A	; 58
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	29 81       	ldd	r18, Y+1	; 0x01
    1c20:	3a 81       	ldd	r19, Y+2	; 0x02
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <MDIO_setPinDirection+0xfe>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <MDIO_setPinDirection+0xfa>
    1c32:	80 95       	com	r24
    1c34:	84 23       	and	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	b7 c0       	rjmp	.+366    	; 0x1da8 <MDIO_setPinDirection+0x278>
			break;
		case OUTPUT:
			SET_BIT(DDRA_REG, Local_u8pin);
    1c3a:	aa e3       	ldi	r26, 0x3A	; 58
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ea e3       	ldi	r30, 0x3A	; 58
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	29 81       	ldd	r18, Y+1	; 0x01
    1c48:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <MDIO_setPinDirection+0x126>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <MDIO_setPinDirection+0x122>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	a4 c0       	rjmp	.+328    	; 0x1da8 <MDIO_setPinDirection+0x278>
			break;
		}

		break;
	case PORTB:
		switch(copy_enDirection)
    1c60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c62:	a8 2f       	mov	r26, r24
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	b8 8b       	std	Y+16, r27	; 0x10
    1c68:	af 87       	std	Y+15, r26	; 0x0f
    1c6a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c6c:	38 89       	ldd	r19, Y+16	; 0x10
    1c6e:	21 15       	cp	r18, r1
    1c70:	31 05       	cpc	r19, r1
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <MDIO_setPinDirection+0x150>
    1c74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c76:	98 89       	ldd	r25, Y+16	; 0x10
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	a9 f0       	breq	.+42     	; 0x1ca8 <MDIO_setPinDirection+0x178>
    1c7e:	94 c0       	rjmp	.+296    	; 0x1da8 <MDIO_setPinDirection+0x278>
		{
		case INPUT:
			CLR_BIT(DDRB_REG, Local_u8pin);
    1c80:	a7 e3       	ldi	r26, 0x37	; 55
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e7 e3       	ldi	r30, 0x37	; 55
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	29 81       	ldd	r18, Y+1	; 0x01
    1c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <MDIO_setPinDirection+0x16c>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <MDIO_setPinDirection+0x168>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	80 c0       	rjmp	.+256    	; 0x1da8 <MDIO_setPinDirection+0x278>
			break;
		case OUTPUT:
			SET_BIT(DDRB_REG, Local_u8pin);
    1ca8:	a7 e3       	ldi	r26, 0x37	; 55
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e7 e3       	ldi	r30, 0x37	; 55
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	29 81       	ldd	r18, Y+1	; 0x01
    1cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <MDIO_setPinDirection+0x194>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <MDIO_setPinDirection+0x190>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	6d c0       	rjmp	.+218    	; 0x1da8 <MDIO_setPinDirection+0x278>
		default:
			break;
		}
		break;
	case PORTC:
		switch(copy_enDirection)
    1cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd0:	a8 2f       	mov	r26, r24
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cda:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cdc:	21 15       	cp	r18, r1
    1cde:	31 05       	cpc	r19, r1
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <MDIO_setPinDirection+0x1be>
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	a9 f0       	breq	.+42     	; 0x1d16 <MDIO_setPinDirection+0x1e6>
    1cec:	5d c0       	rjmp	.+186    	; 0x1da8 <MDIO_setPinDirection+0x278>
		{
		case INPUT:
			CLR_BIT(DDRC_REG, Local_u8pin);
    1cee:	a4 e3       	ldi	r26, 0x34	; 52
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e4 e3       	ldi	r30, 0x34	; 52
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	29 81       	ldd	r18, Y+1	; 0x01
    1cfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <MDIO_setPinDirection+0x1da>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <MDIO_setPinDirection+0x1d6>
    1d0e:	80 95       	com	r24
    1d10:	84 23       	and	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	49 c0       	rjmp	.+146    	; 0x1da8 <MDIO_setPinDirection+0x278>
			break;
		case OUTPUT:
			SET_BIT(DDRC_REG, Local_u8pin);
    1d16:	a4 e3       	ldi	r26, 0x34	; 52
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e4 e3       	ldi	r30, 0x34	; 52
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	29 81       	ldd	r18, Y+1	; 0x01
    1d24:	3a 81       	ldd	r19, Y+2	; 0x02
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <MDIO_setPinDirection+0x202>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <MDIO_setPinDirection+0x1fe>
    1d36:	84 2b       	or	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	36 c0       	rjmp	.+108    	; 0x1da8 <MDIO_setPinDirection+0x278>
		default:
			break;
		}
		break;
	case PORTD:
		switch(copy_enDirection)
    1d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3e:	a8 2f       	mov	r26, r24
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	bc 87       	std	Y+12, r27	; 0x0c
    1d44:	ab 87       	std	Y+11, r26	; 0x0b
    1d46:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d48:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d4a:	21 15       	cp	r18, r1
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	31 f0       	breq	.+12     	; 0x1d5c <MDIO_setPinDirection+0x22c>
    1d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 05       	cpc	r25, r1
    1d58:	a9 f0       	breq	.+42     	; 0x1d84 <MDIO_setPinDirection+0x254>
    1d5a:	26 c0       	rjmp	.+76     	; 0x1da8 <MDIO_setPinDirection+0x278>
		{
		case INPUT:
			CLR_BIT(DDRD_REG, Local_u8pin);
    1d5c:	a1 e3       	ldi	r26, 0x31	; 49
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e1 e3       	ldi	r30, 0x31	; 49
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	29 81       	ldd	r18, Y+1	; 0x01
    1d6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <MDIO_setPinDirection+0x248>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <MDIO_setPinDirection+0x244>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	12 c0       	rjmp	.+36     	; 0x1da8 <MDIO_setPinDirection+0x278>
			break;
		case OUTPUT:
			SET_BIT(DDRD_REG, Local_u8pin);
    1d84:	a1 e3       	ldi	r26, 0x31	; 49
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e1 e3       	ldi	r30, 0x31	; 49
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	29 81       	ldd	r18, Y+1	; 0x01
    1d92:	3a 81       	ldd	r19, Y+2	; 0x02
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <MDIO_setPinDirection+0x270>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <MDIO_setPinDirection+0x26c>
    1da4:	84 2b       	or	r24, r20
    1da6:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    1da8:	66 96       	adiw	r28, 0x16	; 22
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(Pin_t copy_enpin, Value_t copy_enValue){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	66 97       	sbiw	r28, 0x16	; 22
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	89 87       	std	Y+9, r24	; 0x09
    1dd0:	6a 87       	std	Y+10, r22	; 0x0a
	u32 Local_u8port = copy_enpin / 10;
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a e0       	ldi	r25, 0x0A	; 10
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	af 83       	std	Y+7, r26	; 0x07
    1dea:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u8pin = copy_enpin % 10;
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a e0       	ldi	r25, 0x0A	; 10
    1df0:	69 2f       	mov	r22, r25
    1df2:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    1df6:	89 2f       	mov	r24, r25
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e0       	ldi	r26, 0x00	; 0
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	ab 83       	std	Y+3, r26	; 0x03
    1e06:	bc 83       	std	Y+4, r27	; 0x04
	switch(Local_u8port)
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	af 81       	ldd	r26, Y+7	; 0x07
    1e0e:	b8 85       	ldd	r27, Y+8	; 0x08
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	ad 8b       	std	Y+21, r26	; 0x15
    1e16:	be 8b       	std	Y+22, r27	; 0x16
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	ad 89       	ldd	r26, Y+21	; 0x15
    1e1e:	be 89       	ldd	r27, Y+22	; 0x16
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	a1 05       	cpc	r26, r1
    1e26:	b1 05       	cpc	r27, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <MDIO_voidSetPinValue+0x72>
    1e2a:	5f c0       	rjmp	.+190    	; 0x1eea <MDIO_voidSetPinValue+0x130>
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	ad 89       	ldd	r26, Y+21	; 0x15
    1e32:	be 89       	ldd	r27, Y+22	; 0x16
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	a1 05       	cpc	r26, r1
    1e3a:	b1 05       	cpc	r27, r1
    1e3c:	50 f4       	brcc	.+20     	; 0x1e52 <MDIO_voidSetPinValue+0x98>
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	ad 89       	ldd	r26, Y+21	; 0x15
    1e44:	be 89       	ldd	r27, Y+22	; 0x16
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	a1 05       	cpc	r26, r1
    1e4c:	b1 05       	cpc	r27, r1
    1e4e:	b1 f0       	breq	.+44     	; 0x1e7c <MDIO_voidSetPinValue+0xc2>
    1e50:	f0 c0       	rjmp	.+480    	; 0x2032 <MDIO_voidSetPinValue+0x278>
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	ad 89       	ldd	r26, Y+21	; 0x15
    1e58:	be 89       	ldd	r27, Y+22	; 0x16
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	a1 05       	cpc	r26, r1
    1e60:	b1 05       	cpc	r27, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <MDIO_voidSetPinValue+0xac>
    1e64:	79 c0       	rjmp	.+242    	; 0x1f58 <MDIO_voidSetPinValue+0x19e>
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	ad 89       	ldd	r26, Y+21	; 0x15
    1e6c:	be 89       	ldd	r27, Y+22	; 0x16
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	91 05       	cpc	r25, r1
    1e72:	a1 05       	cpc	r26, r1
    1e74:	b1 05       	cpc	r27, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <MDIO_voidSetPinValue+0xc0>
    1e78:	a6 c0       	rjmp	.+332    	; 0x1fc6 <MDIO_voidSetPinValue+0x20c>
    1e7a:	db c0       	rjmp	.+438    	; 0x2032 <MDIO_voidSetPinValue+0x278>
	{
	case PORTA:
		switch(copy_enValue)
    1e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e7e:	a8 2f       	mov	r26, r24
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ba 8b       	std	Y+18, r27	; 0x12
    1e84:	a9 8b       	std	Y+17, r26	; 0x11
    1e86:	29 89       	ldd	r18, Y+17	; 0x11
    1e88:	3a 89       	ldd	r19, Y+18	; 0x12
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <MDIO_voidSetPinValue+0xe2>
    1e90:	89 89       	ldd	r24, Y+17	; 0x11
    1e92:	9a 89       	ldd	r25, Y+18	; 0x12
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	91 05       	cpc	r25, r1
    1e98:	a9 f0       	breq	.+42     	; 0x1ec4 <MDIO_voidSetPinValue+0x10a>
    1e9a:	cb c0       	rjmp	.+406    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		{
		case LOW:
			CLR_BIT(PORTA_REG, Local_u8pin);
    1e9c:	ab e3       	ldi	r26, 0x3B	; 59
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	eb e3       	ldi	r30, 0x3B	; 59
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	29 81       	ldd	r18, Y+1	; 0x01
    1eaa:	3a 81       	ldd	r19, Y+2	; 0x02
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <MDIO_voidSetPinValue+0xfe>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <MDIO_voidSetPinValue+0xfa>
    1ebc:	80 95       	com	r24
    1ebe:	84 23       	and	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	b7 c0       	rjmp	.+366    	; 0x2032 <MDIO_voidSetPinValue+0x278>
			break;
		case HIGH:
			SET_BIT(PORTA_REG, Local_u8pin);
    1ec4:	ab e3       	ldi	r26, 0x3B	; 59
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	eb e3       	ldi	r30, 0x3B	; 59
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	29 81       	ldd	r18, Y+1	; 0x01
    1ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <MDIO_voidSetPinValue+0x126>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <MDIO_voidSetPinValue+0x122>
    1ee4:	84 2b       	or	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	a4 c0       	rjmp	.+328    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		default:
			break;
		}
		break;
	case PORTB:
		switch(copy_enValue)
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eec:	a8 2f       	mov	r26, r24
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	b8 8b       	std	Y+16, r27	; 0x10
    1ef2:	af 87       	std	Y+15, r26	; 0x0f
    1ef4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ef6:	38 89       	ldd	r19, Y+16	; 0x10
    1ef8:	21 15       	cp	r18, r1
    1efa:	31 05       	cpc	r19, r1
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <MDIO_voidSetPinValue+0x150>
    1efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f00:	98 89       	ldd	r25, Y+16	; 0x10
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	a9 f0       	breq	.+42     	; 0x1f32 <MDIO_voidSetPinValue+0x178>
    1f08:	94 c0       	rjmp	.+296    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		{
		case LOW:
			CLR_BIT(PORTB_REG, Local_u8pin);
    1f0a:	a8 e3       	ldi	r26, 0x38	; 56
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	29 81       	ldd	r18, Y+1	; 0x01
    1f18:	3a 81       	ldd	r19, Y+2	; 0x02
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <MDIO_voidSetPinValue+0x16c>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <MDIO_voidSetPinValue+0x168>
    1f2a:	80 95       	com	r24
    1f2c:	84 23       	and	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	80 c0       	rjmp	.+256    	; 0x2032 <MDIO_voidSetPinValue+0x278>
			break;
		case HIGH:
			SET_BIT(PORTB_REG, Local_u8pin);
    1f32:	a8 e3       	ldi	r26, 0x38	; 56
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e8 e3       	ldi	r30, 0x38	; 56
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	48 2f       	mov	r20, r24
    1f3e:	29 81       	ldd	r18, Y+1	; 0x01
    1f40:	3a 81       	ldd	r19, Y+2	; 0x02
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <MDIO_voidSetPinValue+0x194>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <MDIO_voidSetPinValue+0x190>
    1f52:	84 2b       	or	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	6d c0       	rjmp	.+218    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		default:
			break;
		}
		break;
	case PORTC:
		switch(copy_enValue)
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	a8 2f       	mov	r26, r24
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	be 87       	std	Y+14, r27	; 0x0e
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f64:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f66:	21 15       	cp	r18, r1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <MDIO_voidSetPinValue+0x1be>
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	a9 f0       	breq	.+42     	; 0x1fa0 <MDIO_voidSetPinValue+0x1e6>
    1f76:	5d c0       	rjmp	.+186    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		{
		case LOW:
			CLR_BIT(PORTC_REG, Local_u8pin);
    1f78:	a5 e3       	ldi	r26, 0x35	; 53
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e5 e3       	ldi	r30, 0x35	; 53
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	29 81       	ldd	r18, Y+1	; 0x01
    1f86:	3a 81       	ldd	r19, Y+2	; 0x02
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <MDIO_voidSetPinValue+0x1da>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <MDIO_voidSetPinValue+0x1d6>
    1f98:	80 95       	com	r24
    1f9a:	84 23       	and	r24, r20
    1f9c:	8c 93       	st	X, r24
    1f9e:	49 c0       	rjmp	.+146    	; 0x2032 <MDIO_voidSetPinValue+0x278>
			break;
		case HIGH:
			SET_BIT(PORTC_REG, Local_u8pin);
    1fa0:	a5 e3       	ldi	r26, 0x35	; 53
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e3       	ldi	r30, 0x35	; 53
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	29 81       	ldd	r18, Y+1	; 0x01
    1fae:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <MDIO_voidSetPinValue+0x202>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <MDIO_voidSetPinValue+0x1fe>
    1fc0:	84 2b       	or	r24, r20
    1fc2:	8c 93       	st	X, r24
    1fc4:	36 c0       	rjmp	.+108    	; 0x2032 <MDIO_voidSetPinValue+0x278>
		default:
			break;
		}
		break;
	case PORTD:
		switch(copy_enValue)
    1fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc8:	a8 2f       	mov	r26, r24
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	bc 87       	std	Y+12, r27	; 0x0c
    1fce:	ab 87       	std	Y+11, r26	; 0x0b
    1fd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fd4:	21 15       	cp	r18, r1
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	31 f0       	breq	.+12     	; 0x1fe6 <MDIO_voidSetPinValue+0x22c>
    1fda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	a9 f0       	breq	.+42     	; 0x200e <MDIO_voidSetPinValue+0x254>
    1fe4:	26 c0       	rjmp	.+76     	; 0x2032 <MDIO_voidSetPinValue+0x278>
		{
		case LOW:
			CLR_BIT(PORTD_REG, Local_u8pin);
    1fe6:	a2 e3       	ldi	r26, 0x32	; 50
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e2 e3       	ldi	r30, 0x32	; 50
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	29 81       	ldd	r18, Y+1	; 0x01
    1ff4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <MDIO_voidSetPinValue+0x248>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <MDIO_voidSetPinValue+0x244>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	12 c0       	rjmp	.+36     	; 0x2032 <MDIO_voidSetPinValue+0x278>
			break;
		case HIGH:
			SET_BIT(PORTD_REG, Local_u8pin);
    200e:	a2 e3       	ldi	r26, 0x32	; 50
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e2 e3       	ldi	r30, 0x32	; 50
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	48 2f       	mov	r20, r24
    201a:	29 81       	ldd	r18, Y+1	; 0x01
    201c:	3a 81       	ldd	r19, Y+2	; 0x02
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <MDIO_voidSetPinValue+0x270>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <MDIO_voidSetPinValue+0x26c>
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    2032:	66 96       	adiw	r28, 0x16	; 22
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(Port_t copy_enPort, u8 copy_u8Value){
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <MDIO_voidSetPortValue+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <MDIO_voidSetPortValue+0x8>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_enPort)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	3c 83       	std	Y+4, r19	; 0x04
    205c:	2b 83       	std	Y+3, r18	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	82 30       	cpi	r24, 0x02	; 2
    2064:	91 05       	cpc	r25, r1
    2066:	d9 f0       	breq	.+54     	; 0x209e <MDIO_voidSetPortValue+0x5a>
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	3c 81       	ldd	r19, Y+4	; 0x04
    206c:	23 30       	cpi	r18, 0x03	; 3
    206e:	31 05       	cpc	r19, r1
    2070:	34 f4       	brge	.+12     	; 0x207e <MDIO_voidSetPortValue+0x3a>
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	91 05       	cpc	r25, r1
    207a:	61 f0       	breq	.+24     	; 0x2094 <MDIO_voidSetPortValue+0x50>
    207c:	1e c0       	rjmp	.+60     	; 0x20ba <MDIO_voidSetPortValue+0x76>
    207e:	2b 81       	ldd	r18, Y+3	; 0x03
    2080:	3c 81       	ldd	r19, Y+4	; 0x04
    2082:	23 30       	cpi	r18, 0x03	; 3
    2084:	31 05       	cpc	r19, r1
    2086:	81 f0       	breq	.+32     	; 0x20a8 <MDIO_voidSetPortValue+0x64>
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	84 30       	cpi	r24, 0x04	; 4
    208e:	91 05       	cpc	r25, r1
    2090:	81 f0       	breq	.+32     	; 0x20b2 <MDIO_voidSetPortValue+0x6e>
    2092:	13 c0       	rjmp	.+38     	; 0x20ba <MDIO_voidSetPortValue+0x76>
	{
	case PORTA:
		PORTA_REG = copy_u8Value;
    2094:	eb e3       	ldi	r30, 0x3B	; 59
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
    209c:	0e c0       	rjmp	.+28     	; 0x20ba <MDIO_voidSetPortValue+0x76>
		break;
	case PORTB:
		PORTB_REG = copy_u8Value;
    209e:	e8 e3       	ldi	r30, 0x38	; 56
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	80 83       	st	Z, r24
    20a6:	09 c0       	rjmp	.+18     	; 0x20ba <MDIO_voidSetPortValue+0x76>
		break;
	case PORTC:
		PORTC_REG = copy_u8Value;
    20a8:	e5 e3       	ldi	r30, 0x35	; 53
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	80 83       	st	Z, r24
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <MDIO_voidSetPortValue+0x76>
		break;
	case PORTD:
		PORTD_REG = copy_u8Value;
    20b2:	e2 e3       	ldi	r30, 0x32	; 50
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <MDIO_voidgetPinValue>:

void MDIO_voidgetPinValue(Pin_t copy_enpin, Value_t * ptrValue){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	2f 97       	sbiw	r28, 0x0f	; 15
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	89 87       	std	Y+9, r24	; 0x09
    20de:	7b 87       	std	Y+11, r23	; 0x0b
    20e0:	6a 87       	std	Y+10, r22	; 0x0a
	u32 Local_u8port = copy_enpin / 10;
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a e0       	ldi	r25, 0x0A	; 10
    20e6:	69 2f       	mov	r22, r25
    20e8:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e0       	ldi	r26, 0x00	; 0
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	af 83       	std	Y+7, r26	; 0x07
    20fa:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u8pin = copy_enpin % 10;
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a e0       	ldi	r25, 0x0A	; 10
    2100:	69 2f       	mov	r22, r25
    2102:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    2106:	89 2f       	mov	r24, r25
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a0 e0       	ldi	r26, 0x00	; 0
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	ab 83       	std	Y+3, r26	; 0x03
    2116:	bc 83       	std	Y+4, r27	; 0x04

	switch(Local_u8port)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	af 81       	ldd	r26, Y+7	; 0x07
    211e:	b8 85       	ldd	r27, Y+8	; 0x08
    2120:	8c 87       	std	Y+12, r24	; 0x0c
    2122:	9d 87       	std	Y+13, r25	; 0x0d
    2124:	ae 87       	std	Y+14, r26	; 0x0e
    2126:	bf 87       	std	Y+15, r27	; 0x0f
    2128:	8c 85       	ldd	r24, Y+12	; 0x0c
    212a:	9d 85       	ldd	r25, Y+13	; 0x0d
    212c:	ae 85       	ldd	r26, Y+14	; 0x0e
    212e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	91 05       	cpc	r25, r1
    2134:	a1 05       	cpc	r26, r1
    2136:	b1 05       	cpc	r27, r1
    2138:	c9 f1       	breq	.+114    	; 0x21ac <MDIO_voidgetPinValue+0xe4>
    213a:	8c 85       	ldd	r24, Y+12	; 0x0c
    213c:	9d 85       	ldd	r25, Y+13	; 0x0d
    213e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2140:	bf 85       	ldd	r27, Y+15	; 0x0f
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	91 05       	cpc	r25, r1
    2146:	a1 05       	cpc	r26, r1
    2148:	b1 05       	cpc	r27, r1
    214a:	50 f4       	brcc	.+20     	; 0x2160 <MDIO_voidgetPinValue+0x98>
    214c:	8c 85       	ldd	r24, Y+12	; 0x0c
    214e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2150:	ae 85       	ldd	r26, Y+14	; 0x0e
    2152:	bf 85       	ldd	r27, Y+15	; 0x0f
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	a1 05       	cpc	r26, r1
    215a:	b1 05       	cpc	r27, r1
    215c:	a1 f0       	breq	.+40     	; 0x2186 <MDIO_voidgetPinValue+0xbe>
    215e:	5e c0       	rjmp	.+188    	; 0x221c <MDIO_voidgetPinValue+0x154>
    2160:	8c 85       	ldd	r24, Y+12	; 0x0c
    2162:	9d 85       	ldd	r25, Y+13	; 0x0d
    2164:	ae 85       	ldd	r26, Y+14	; 0x0e
    2166:	bf 85       	ldd	r27, Y+15	; 0x0f
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	a1 05       	cpc	r26, r1
    216e:	b1 05       	cpc	r27, r1
    2170:	81 f1       	breq	.+96     	; 0x21d2 <MDIO_voidgetPinValue+0x10a>
    2172:	8c 85       	ldd	r24, Y+12	; 0x0c
    2174:	9d 85       	ldd	r25, Y+13	; 0x0d
    2176:	ae 85       	ldd	r26, Y+14	; 0x0e
    2178:	bf 85       	ldd	r27, Y+15	; 0x0f
    217a:	84 30       	cpi	r24, 0x04	; 4
    217c:	91 05       	cpc	r25, r1
    217e:	a1 05       	cpc	r26, r1
    2180:	b1 05       	cpc	r27, r1
    2182:	d1 f1       	breq	.+116    	; 0x21f8 <MDIO_voidgetPinValue+0x130>
    2184:	4b c0       	rjmp	.+150    	; 0x221c <MDIO_voidgetPinValue+0x154>
	{
	case PORTA:
		*ptrValue = GET_BIT(PINA_REG, Local_u8pin);
    2186:	e9 e3       	ldi	r30, 0x39	; 57
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	d9 01       	movw	r26, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <MDIO_voidgetPinValue+0xd4>
    2198:	b5 95       	asr	r27
    219a:	a7 95       	ror	r26
    219c:	8a 95       	dec	r24
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <MDIO_voidgetPinValue+0xd0>
    21a0:	cd 01       	movw	r24, r26
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	ea 85       	ldd	r30, Y+10	; 0x0a
    21a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    21a8:	80 83       	st	Z, r24
    21aa:	38 c0       	rjmp	.+112    	; 0x221c <MDIO_voidgetPinValue+0x154>
		break;
	case PORTB:
		*ptrValue = GET_BIT(PINB_REG, Local_u8pin);
    21ac:	e6 e3       	ldi	r30, 0x36	; 54
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	a9 01       	movw	r20, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <MDIO_voidgetPinValue+0xfa>
    21be:	55 95       	asr	r21
    21c0:	47 95       	ror	r20
    21c2:	8a 95       	dec	r24
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <MDIO_voidgetPinValue+0xf6>
    21c6:	ca 01       	movw	r24, r20
    21c8:	81 70       	andi	r24, 0x01	; 1
    21ca:	ea 85       	ldd	r30, Y+10	; 0x0a
    21cc:	fb 85       	ldd	r31, Y+11	; 0x0b
    21ce:	80 83       	st	Z, r24
    21d0:	25 c0       	rjmp	.+74     	; 0x221c <MDIO_voidgetPinValue+0x154>
		break;
	case PORTC:
		*ptrValue = GET_BIT(PINC_REG, Local_u8pin);
    21d2:	e3 e3       	ldi	r30, 0x33	; 51
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	d9 01       	movw	r26, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <MDIO_voidgetPinValue+0x120>
    21e4:	b5 95       	asr	r27
    21e6:	a7 95       	ror	r26
    21e8:	8a 95       	dec	r24
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <MDIO_voidgetPinValue+0x11c>
    21ec:	cd 01       	movw	r24, r26
    21ee:	81 70       	andi	r24, 0x01	; 1
    21f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    21f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    21f4:	80 83       	st	Z, r24
    21f6:	12 c0       	rjmp	.+36     	; 0x221c <MDIO_voidgetPinValue+0x154>
		break;
	case PORTD:
		*ptrValue = GET_BIT(PIND_REG, Local_u8pin);
    21f8:	e0 e3       	ldi	r30, 0x30	; 48
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	a9 01       	movw	r20, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <MDIO_voidgetPinValue+0x146>
    220a:	55 95       	asr	r21
    220c:	47 95       	ror	r20
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <MDIO_voidgetPinValue+0x142>
    2212:	ca 01       	movw	r24, r20
    2214:	81 70       	andi	r24, 0x01	; 1
    2216:	ea 85       	ldd	r30, Y+10	; 0x0a
    2218:	fb 85       	ldd	r31, Y+11	; 0x0b
    221a:	80 83       	st	Z, r24
		break;
	default:
		// Report Error
		break;
	}
}
    221c:	2f 96       	adiw	r28, 0x0f	; 15
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(Pin_t copy_enpin)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	2d 97       	sbiw	r28, 0x0d	; 13
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_u8port = copy_enpin / 10;
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a e0       	ldi	r25, 0x0A	; 10
    2248:	69 2f       	mov	r22, r25
    224a:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	af 83       	std	Y+7, r26	; 0x07
    225c:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u8pin = copy_enpin % 10;
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a e0       	ldi	r25, 0x0A	; 10
    2262:	69 2f       	mov	r22, r25
    2264:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__udivmodqi4>
    2268:	89 2f       	mov	r24, r25
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	ab 83       	std	Y+3, r26	; 0x03
    2278:	bc 83       	std	Y+4, r27	; 0x04

	switch(Local_u8port)
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	af 81       	ldd	r26, Y+7	; 0x07
    2280:	b8 85       	ldd	r27, Y+8	; 0x08
    2282:	8a 87       	std	Y+10, r24	; 0x0a
    2284:	9b 87       	std	Y+11, r25	; 0x0b
    2286:	ac 87       	std	Y+12, r26	; 0x0c
    2288:	bd 87       	std	Y+13, r27	; 0x0d
    228a:	8a 85       	ldd	r24, Y+10	; 0x0a
    228c:	9b 85       	ldd	r25, Y+11	; 0x0b
    228e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2290:	bd 85       	ldd	r27, Y+13	; 0x0d
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	91 05       	cpc	r25, r1
    2296:	a1 05       	cpc	r26, r1
    2298:	b1 05       	cpc	r27, r1
    229a:	c9 f1       	breq	.+114    	; 0x230e <MDIO_voidTogglePinValue+0xe0>
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    22a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	91 05       	cpc	r25, r1
    22a8:	a1 05       	cpc	r26, r1
    22aa:	b1 05       	cpc	r27, r1
    22ac:	50 f4       	brcc	.+20     	; 0x22c2 <MDIO_voidTogglePinValue+0x94>
    22ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b2:	ac 85       	ldd	r26, Y+12	; 0x0c
    22b4:	bd 85       	ldd	r27, Y+13	; 0x0d
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	91 05       	cpc	r25, r1
    22ba:	a1 05       	cpc	r26, r1
    22bc:	b1 05       	cpc	r27, r1
    22be:	a1 f0       	breq	.+40     	; 0x22e8 <MDIO_voidTogglePinValue+0xba>
    22c0:	5e c0       	rjmp	.+188    	; 0x237e <MDIO_voidTogglePinValue+0x150>
    22c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    22c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	a1 05       	cpc	r26, r1
    22d0:	b1 05       	cpc	r27, r1
    22d2:	81 f1       	breq	.+96     	; 0x2334 <MDIO_voidTogglePinValue+0x106>
    22d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    22da:	bd 85       	ldd	r27, Y+13	; 0x0d
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	91 05       	cpc	r25, r1
    22e0:	a1 05       	cpc	r26, r1
    22e2:	b1 05       	cpc	r27, r1
    22e4:	d1 f1       	breq	.+116    	; 0x235a <MDIO_voidTogglePinValue+0x12c>
    22e6:	4b c0       	rjmp	.+150    	; 0x237e <MDIO_voidTogglePinValue+0x150>
	{
	case PORTA:
		 TOG_BIT(PORTA_REG, Local_u8pin);
    22e8:	ab e3       	ldi	r26, 0x3B	; 59
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	eb e3       	ldi	r30, 0x3B	; 59
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	48 2f       	mov	r20, r24
    22f4:	29 81       	ldd	r18, Y+1	; 0x01
    22f6:	3a 81       	ldd	r19, Y+2	; 0x02
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	02 2e       	mov	r0, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <MDIO_voidTogglePinValue+0xd6>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	0a 94       	dec	r0
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <MDIO_voidTogglePinValue+0xd2>
    2308:	84 27       	eor	r24, r20
    230a:	8c 93       	st	X, r24
    230c:	38 c0       	rjmp	.+112    	; 0x237e <MDIO_voidTogglePinValue+0x150>
		break;
	case PORTB:
		TOG_BIT(PORTB_REG, Local_u8pin);
    230e:	a8 e3       	ldi	r26, 0x38	; 56
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e8 e3       	ldi	r30, 0x38	; 56
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	48 2f       	mov	r20, r24
    231a:	29 81       	ldd	r18, Y+1	; 0x01
    231c:	3a 81       	ldd	r19, Y+2	; 0x02
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <MDIO_voidTogglePinValue+0xfc>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <MDIO_voidTogglePinValue+0xf8>
    232e:	84 27       	eor	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	25 c0       	rjmp	.+74     	; 0x237e <MDIO_voidTogglePinValue+0x150>
		break;
	case PORTC:
		TOG_BIT(PORTC_REG, Local_u8pin);
    2334:	a5 e3       	ldi	r26, 0x35	; 53
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e5 e3       	ldi	r30, 0x35	; 53
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	29 81       	ldd	r18, Y+1	; 0x01
    2342:	3a 81       	ldd	r19, Y+2	; 0x02
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	02 2e       	mov	r0, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <MDIO_voidTogglePinValue+0x122>
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	0a 94       	dec	r0
    2352:	e2 f7       	brpl	.-8      	; 0x234c <MDIO_voidTogglePinValue+0x11e>
    2354:	84 27       	eor	r24, r20
    2356:	8c 93       	st	X, r24
    2358:	12 c0       	rjmp	.+36     	; 0x237e <MDIO_voidTogglePinValue+0x150>
		break;
	case PORTD:
		TOG_BIT(PORTD_REG, Local_u8pin);
    235a:	a2 e3       	ldi	r26, 0x32	; 50
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e2 e3       	ldi	r30, 0x32	; 50
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	48 2f       	mov	r20, r24
    2366:	29 81       	ldd	r18, Y+1	; 0x01
    2368:	3a 81       	ldd	r19, Y+2	; 0x02
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <MDIO_voidTogglePinValue+0x148>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <MDIO_voidTogglePinValue+0x144>
    237a:	84 27       	eor	r24, r20
    237c:	8c 93       	st	X, r24
		break;
	default:
		// Report Error
		break;
	}
}
    237e:	2d 96       	adiw	r28, 0x0d	; 13
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <MDIO_voidGetPortValue>:
void MDIO_voidGetPortValue(Port_t copy_enPort, u8 *ptrPortValue)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <MDIO_voidGetPortValue+0x6>
    2396:	00 d0       	rcall	.+0      	; 0x2398 <MDIO_voidGetPortValue+0x8>
    2398:	0f 92       	push	r0
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	7b 83       	std	Y+3, r23	; 0x03
    23a2:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_enPort)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	3d 83       	std	Y+5, r19	; 0x05
    23ac:	2c 83       	std	Y+4, r18	; 0x04
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	91 05       	cpc	r25, r1
    23b6:	e9 f0       	breq	.+58     	; 0x23f2 <MDIO_voidGetPortValue+0x62>
    23b8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	23 30       	cpi	r18, 0x03	; 3
    23be:	31 05       	cpc	r19, r1
    23c0:	34 f4       	brge	.+12     	; 0x23ce <MDIO_voidGetPortValue+0x3e>
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	61 f0       	breq	.+24     	; 0x23e4 <MDIO_voidGetPortValue+0x54>
    23cc:	26 c0       	rjmp	.+76     	; 0x241a <MDIO_voidGetPortValue+0x8a>
    23ce:	2c 81       	ldd	r18, Y+4	; 0x04
    23d0:	3d 81       	ldd	r19, Y+5	; 0x05
    23d2:	23 30       	cpi	r18, 0x03	; 3
    23d4:	31 05       	cpc	r19, r1
    23d6:	a1 f0       	breq	.+40     	; 0x2400 <MDIO_voidGetPortValue+0x70>
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	84 30       	cpi	r24, 0x04	; 4
    23de:	91 05       	cpc	r25, r1
    23e0:	b1 f0       	breq	.+44     	; 0x240e <MDIO_voidGetPortValue+0x7e>
    23e2:	1b c0       	rjmp	.+54     	; 0x241a <MDIO_voidGetPortValue+0x8a>
		{
		case PORTA:
			*ptrPortValue = PINA_REG;
    23e4:	e9 e3       	ldi	r30, 0x39	; 57
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	ea 81       	ldd	r30, Y+2	; 0x02
    23ec:	fb 81       	ldd	r31, Y+3	; 0x03
    23ee:	80 83       	st	Z, r24
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <MDIO_voidGetPortValue+0x8a>
			break;
		case PORTB:
			*ptrPortValue = PINB_REG;
    23f2:	e6 e3       	ldi	r30, 0x36	; 54
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	ea 81       	ldd	r30, Y+2	; 0x02
    23fa:	fb 81       	ldd	r31, Y+3	; 0x03
    23fc:	80 83       	st	Z, r24
    23fe:	0d c0       	rjmp	.+26     	; 0x241a <MDIO_voidGetPortValue+0x8a>
			break;
		case PORTC:
			*ptrPortValue = PINC_REG;
    2400:	e3 e3       	ldi	r30, 0x33	; 51
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	ea 81       	ldd	r30, Y+2	; 0x02
    2408:	fb 81       	ldd	r31, Y+3	; 0x03
    240a:	80 83       	st	Z, r24
    240c:	06 c0       	rjmp	.+12     	; 0x241a <MDIO_voidGetPortValue+0x8a>
			break;
		case PORTD:
			*ptrPortValue = PIND_REG;
    240e:	e0 e3       	ldi	r30, 0x30	; 48
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	ea 81       	ldd	r30, Y+2	; 0x02
    2416:	fb 81       	ldd	r31, Y+3	; 0x03
    2418:	80 83       	st	Z, r24
			break;
		default:
			// Report Error
			break;
		}
}
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <MADC_enInit>:
#include <avr/interrupt.h>

u16 gADC_Value = 0;

ErrorState_t MADC_enInit(void)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	0f 92       	push	r0
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
#if ADC_VREF == AVCC
	SET_BIT(ADMUX_REG, REFS0_BIT);
    2434:	a7 e2       	ldi	r26, 0x27	; 39
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e7 e2       	ldi	r30, 0x27	; 39
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 64       	ori	r24, 0x40	; 64
    2440:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, REFS1_BIT);
    2442:	a7 e2       	ldi	r26, 0x27	; 39
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e7 e2       	ldi	r30, 0x27	; 39
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	8f 77       	andi	r24, 0x7F	; 127
    244e:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG, REFS0_BIT);
	SET_BIT(ADMUX_REG, REFS1_BIT);
#endif

	// To Select Right Adjust
	CLR_BIT(ADMUX_REG, ADLAR_BIT);
    2450:	a7 e2       	ldi	r26, 0x27	; 39
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e7 e2       	ldi	r30, 0x27	; 39
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7d       	andi	r24, 0xDF	; 223
    245c:	8c 93       	st	X, r24
#if ADC_PRESCALER_DV == 128
	SET_BIT(ADCSRA_REG, ADPS0_BIT);
    245e:	a6 e2       	ldi	r26, 0x26	; 38
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e6 e2       	ldi	r30, 0x26	; 38
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	81 60       	ori	r24, 0x01	; 1
    246a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS1_BIT);
    246c:	a6 e2       	ldi	r26, 0x26	; 38
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e6 e2       	ldi	r30, 0x26	; 38
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	82 60       	ori	r24, 0x02	; 2
    2478:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS2_BIT);
    247a:	a6 e2       	ldi	r26, 0x26	; 38
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e6 e2       	ldi	r30, 0x26	; 38
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	84 60       	ori	r24, 0x04	; 4
    2486:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS1_BIT);
	SET_BIT(ADCSRA_REG, ADPS2_BIT);
#endif

	// Enable Auto Trigger Mode
	SET_BIT(ADCSRA_REG, ADATE_BIT);
    2488:	a6 e2       	ldi	r26, 0x26	; 38
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e6 e2       	ldi	r30, 0x26	; 38
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 62       	ori	r24, 0x20	; 32
    2494:	8c 93       	st	X, r24

	// Enable ADC Circuit
	SET_BIT(ADCSRA_REG, ADEN_BIT);
    2496:	a6 e2       	ldi	r26, 0x26	; 38
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e6 e2       	ldi	r30, 0x26	; 38
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 68       	ori	r24, 0x80	; 128
    24a2:	8c 93       	st	X, r24

	// To Start Conversion
	SET_BIT(ADCSRA_REG, ADSC_BIT);
    24a4:	a6 e2       	ldi	r26, 0x26	; 38
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e6 e2       	ldi	r30, 0x26	; 38
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	80 64       	ori	r24, 0x40	; 64
    24b0:	8c 93       	st	X, r24

	// New For ISR
	SET_BIT(ADCSRA_REG, 3); // Enable Interrupt
    24b2:	a6 e2       	ldi	r26, 0x26	; 38
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e6 e2       	ldi	r30, 0x26	; 38
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	88 60       	ori	r24, 0x08	; 8
    24be:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG & 0xE0;
    24c0:	a7 e2       	ldi	r26, 0x27	; 39
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e2       	ldi	r30, 0x27	; 39
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 7e       	andi	r24, 0xE0	; 224
    24cc:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | 0;
    24ce:	a7 e2       	ldi	r26, 0x27	; 39
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e7 e2       	ldi	r30, 0x27	; 39
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	8c 93       	st	X, r24
}
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <MADC_enRead>:

ErrorState_t MADC_enRead(u8 copy_u8Channel)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <MADC_enRead+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <MADC_enRead+0x8>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Counter = 0;
    24f2:	19 82       	std	Y+1, r1	; 0x01
    24f4:	1a 82       	std	Y+2, r1	; 0x02
    24f6:	1b 82       	std	Y+3, r1	; 0x03
    24f8:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX_REG = ADMUX_REG & 0xE0;
    24fa:	a7 e2       	ldi	r26, 0x27	; 39
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e7 e2       	ldi	r30, 0x27	; 39
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 7e       	andi	r24, 0xE0	; 224
    2506:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | copy_u8Channel;
    2508:	a7 e2       	ldi	r26, 0x27	; 39
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e7 e2       	ldi	r30, 0x27	; 39
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	90 81       	ld	r25, Z
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	89 2b       	or	r24, r25
    2516:	8c 93       	st	X, r24
    2518:	16 c0       	rjmp	.+44     	; 0x2546 <MADC_enRead+0x64>

	while(Local_u32Counter < 2000000)
	{
		Local_u32Counter++;
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	ab 81       	ldd	r26, Y+3	; 0x03
    2520:	bc 81       	ldd	r27, Y+4	; 0x04
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	a1 1d       	adc	r26, r1
    2526:	b1 1d       	adc	r27, r1
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	ab 83       	std	Y+3, r26	; 0x03
    252e:	bc 83       	std	Y+4, r27	; 0x04

		if(GET_BIT(ADCSRA_REG, ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    2530:	e6 e2       	ldi	r30, 0x26	; 38
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	82 95       	swap	r24
    2538:	8f 70       	andi	r24, 0x0F	; 15
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	81 70       	andi	r24, 0x01	; 1
    2540:	90 70       	andi	r25, 0x00	; 0
    2542:	88 23       	and	r24, r24
    2544:	61 f4       	brne	.+24     	; 0x255e <MADC_enRead+0x7c>
{
	u32 Local_u32Counter = 0;
	ADMUX_REG = ADMUX_REG & 0xE0;
	ADMUX_REG = ADMUX_REG | copy_u8Channel;

	while(Local_u32Counter < 2000000)
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	ab 81       	ldd	r26, Y+3	; 0x03
    254c:	bc 81       	ldd	r27, Y+4	; 0x04
    254e:	80 38       	cpi	r24, 0x80	; 128
    2550:	24 e8       	ldi	r18, 0x84	; 132
    2552:	92 07       	cpc	r25, r18
    2554:	2e e1       	ldi	r18, 0x1E	; 30
    2556:	a2 07       	cpc	r26, r18
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	b2 07       	cpc	r27, r18
    255c:	f0 f2       	brcs	.-68     	; 0x251a <MADC_enRead+0x38>
		if(GET_BIT(ADCSRA_REG, ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
    255e:	e4 e2       	ldi	r30, 0x24	; 36
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <__vector_16>:

ISR(ADC_vect)
{
    2576:	1f 92       	push	r1
    2578:	0f 92       	push	r0
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	0f 92       	push	r0
    257e:	11 24       	eor	r1, r1
    2580:	8f 93       	push	r24
    2582:	9f 93       	push	r25
    2584:	af 93       	push	r26
    2586:	bf 93       	push	r27
    2588:	ef 93       	push	r30
    258a:	ff 93       	push	r31
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_REG, ADSC_BIT);
    2594:	a6 e2       	ldi	r26, 0x26	; 38
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e6 e2       	ldi	r30, 0x26	; 38
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	80 64       	ori	r24, 0x40	; 64
    25a0:	8c 93       	st	X, r24

	// Put ADC Reading in a Global Variable
	gADC_Value = ADCVALUE;
    25a2:	e4 e2       	ldi	r30, 0x24	; 36
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	90 93 c8 01 	sts	0x01C8, r25
    25ae:	80 93 c7 01 	sts	0x01C7, r24
}
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	ff 91       	pop	r31
    25b8:	ef 91       	pop	r30
    25ba:	bf 91       	pop	r27
    25bc:	af 91       	pop	r26
    25be:	9f 91       	pop	r25
    25c0:	8f 91       	pop	r24
    25c2:	0f 90       	pop	r0
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	0f 90       	pop	r0
    25c8:	1f 90       	pop	r1
    25ca:	18 95       	reti

000025cc <HTEMPREATURE_enInit>:
#include "HTEMPREATURE_init.h"

extern u16 gADC_Value;

ErrorState_t HTEMPREATURE_enInit(void)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
	MADC_enInit();
    25d6:	0e 94 15 12 	call	0x242a	; 0x242a <MADC_enInit>
}
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <HTEMPREATURE_enRead>:

ErrorState_t HTEMPREATURE_enRead(u16 *copy_u16Ptr)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <HTEMPREATURE_enRead+0x6>
    25e8:	0f 92       	push	r0
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
	// for Interrupt
	static u16 prev = 0;

	if(prev !=  gADC_Value)
    25f2:	20 91 c9 01 	lds	r18, 0x01C9
    25f6:	30 91 ca 01 	lds	r19, 0x01CA
    25fa:	80 91 c7 01 	lds	r24, 0x01C7
    25fe:	90 91 c8 01 	lds	r25, 0x01C8
    2602:	28 17       	cp	r18, r24
    2604:	39 07       	cpc	r19, r25
    2606:	39 f1       	breq	.+78     	; 0x2656 <HTEMPREATURE_enRead+0x74>
	{
		prev = gADC_Value;
    2608:	80 91 c7 01 	lds	r24, 0x01C7
    260c:	90 91 c8 01 	lds	r25, 0x01C8
    2610:	90 93 ca 01 	sts	0x01CA, r25
    2614:	80 93 c9 01 	sts	0x01C9, r24
		*copy_u16Ptr = ((u32)gADC_Value * 500 ) / 1023;
    2618:	80 91 c7 01 	lds	r24, 0x01C7
    261c:	90 91 c8 01 	lds	r25, 0x01C8
    2620:	cc 01       	movw	r24, r24
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	24 ef       	ldi	r18, 0xF4	; 244
    2628:	31 e0       	ldi	r19, 0x01	; 1
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__mulsi3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	2f ef       	ldi	r18, 0xFF	; 255
    263c:	33 e0       	ldi	r19, 0x03	; 3
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__udivmodsi4>
    264a:	da 01       	movw	r26, r20
    264c:	c9 01       	movw	r24, r18
    264e:	e9 81       	ldd	r30, Y+1	; 0x01
    2650:	fa 81       	ldd	r31, Y+2	; 0x02
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
	}
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <HRELAY_enInit>:
#include "HRELAY_config.h"
#include "HRELAY_init.h"
#include <avr/delay.h>

ErrorState_t HRELAY_enInit(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
	MDIO_setPinDirection(HRELAY_1_PIN, OUTPUT);
    266c:	82 e2       	ldi	r24, 0x22	; 34
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HRELAY_2_PIN, OUTPUT);
    2674:	81 e2       	ldi	r24, 0x21	; 33
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
}
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <HRELAY_enON>:

ErrorState_t HRELAY_enON(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HRELAY_1_PIN, HIGH);
    268e:	82 e2       	ldi	r24, 0x22	; 34
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HRELAY_2_PIN, HIGH);
    2696:	81 e2       	ldi	r24, 0x21	; 33
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
}
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <HRELAY_enOFF>:

ErrorState_t HRELAY_enOFF(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	0f 92       	push	r0
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HRELAY_1_PIN, LOW);
    26b0:	82 e2       	ldi	r24, 0x22	; 34
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HRELAY_2_PIN, LOW);
    26b8:	81 e2       	ldi	r24, 0x21	; 33
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
}
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <HRELAY_enOnce>:

ErrorState_t HRELAY_enOnce(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	2f 97       	sbiw	r28, 0x0f	; 15
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidTogglePinValue(HRELAY_1_PIN);
    26dc:	82 e2       	ldi	r24, 0x22	; 34
    26de:	0e 94 17 11 	call	0x222e	; 0x222e <MDIO_voidTogglePinValue>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a8 ec       	ldi	r26, 0xC8	; 200
    26e8:	b2 e4       	ldi	r27, 0x42	; 66
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	ad 87       	std	Y+13, r26	; 0x0d
    26f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	55 e4       	ldi	r21, 0x45	; 69
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8f 83       	std	Y+7, r24	; 0x07
    270c:	98 87       	std	Y+8, r25	; 0x08
    270e:	a9 87       	std	Y+9, r26	; 0x09
    2710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <HRELAY_enOnce+0x6c>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <HRELAY_enOnce+0xea>
	else if (__tmp > 65535)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <HRELAY_enOnce+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6b 85       	ldd	r22, Y+11	; 0x0b
    274e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <HRELAY_enOnce+0xcc>
    2776:	80 e9       	ldi	r24, 0x90	; 144
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <HRELAY_enOnce+0xba>
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <HRELAY_enOnce+0xae>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <HRELAY_enOnce+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <HRELAY_enOnce+0xf6>
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01

	/*
	MDIO_voidTogglePinValue(HRELAY_2_PIN);
	_delay_ms(100);
	*/
}
    27c6:	2f 96       	adiw	r28, 0x0f	; 15
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <HLED_enInit>:
#include "HLED_priv.h"
#include "HLED_config.h"
#include "HLED_int.h"

ErrorState_t HLED_enInit(u8 copy_u8LedId)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <HLED_enInit+0x6>
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <HLED_enInit+0x8>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	3c 83       	std	Y+4, r19	; 0x04
    27f2:	2b 83       	std	Y+3, r18	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	82 30       	cpi	r24, 0x02	; 2
    27fa:	91 05       	cpc	r25, r1
    27fc:	79 f0       	breq	.+30     	; 0x281c <HLED_enInit+0x44>
    27fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2800:	3c 81       	ldd	r19, Y+4	; 0x04
    2802:	23 30       	cpi	r18, 0x03	; 3
    2804:	31 05       	cpc	r19, r1
    2806:	79 f0       	breq	.+30     	; 0x2826 <HLED_enInit+0x4e>
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	91 05       	cpc	r25, r1
    2810:	79 f4       	brne	.+30     	; 0x2830 <HLED_enInit+0x58>
	{
	case HLED_RED_ID:
		MDIO_setPinDirection(HLED_RED_LED_PIN, OUTPUT);
    2812:	8e e1       	ldi	r24, 0x1E	; 30
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
    281a:	0b c0       	rjmp	.+22     	; 0x2832 <HLED_enInit+0x5a>
		break;
	case HLED_BLUE_ID:
		MDIO_setPinDirection(HLED_BLUE_LED_PIN, OUTPUT);
    281c:	80 e2       	ldi	r24, 0x20	; 32
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
    2824:	06 c0       	rjmp	.+12     	; 0x2832 <HLED_enInit+0x5a>
		break;
	case HLED_GRN_ID:
		MDIO_setPinDirection(HLED_GRN_LED_PIN, OUTPUT);
    2826:	8f e1       	ldi	r24, 0x1F	; 31
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <HLED_enInit+0x5a>
		break;
	default:
		Local_State = OUT_OF_RANG_ERR;
    2830:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_State;
    2832:	89 81       	ldd	r24, Y+1	; 0x01
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <HLED_enSetON>:

ErrorState_t HLED_enSetON(u8 copy_u8LedId)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <HLED_enSetON+0x6>
    2848:	00 d0       	rcall	.+0      	; 0x284a <HLED_enSetON+0x8>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	3c 83       	std	Y+4, r19	; 0x04
    285c:	2b 83       	std	Y+3, r18	; 0x03
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	82 30       	cpi	r24, 0x02	; 2
    2864:	91 05       	cpc	r25, r1
    2866:	79 f0       	breq	.+30     	; 0x2886 <HLED_enSetON+0x44>
    2868:	2b 81       	ldd	r18, Y+3	; 0x03
    286a:	3c 81       	ldd	r19, Y+4	; 0x04
    286c:	23 30       	cpi	r18, 0x03	; 3
    286e:	31 05       	cpc	r19, r1
    2870:	79 f0       	breq	.+30     	; 0x2890 <HLED_enSetON+0x4e>
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	9c 81       	ldd	r25, Y+4	; 0x04
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	91 05       	cpc	r25, r1
    287a:	79 f4       	brne	.+30     	; 0x289a <HLED_enSetON+0x58>
	{
	case HLED_RED_ID:
#if(HLED_RED_LED_DIR == HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_RED_LED_PIN, HIGH);
    287c:	8e e1       	ldi	r24, 0x1E	; 30
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2884:	0b c0       	rjmp	.+22     	; 0x289c <HLED_enSetON+0x5a>
	#error ("Wrong Led Red Direction")
#endif
		break;
	case HLED_BLUE_ID:
#if(HLED_BLUE_LED_DIR == HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_BLUE_LED_PIN, HIGH);
    2886:	80 e2       	ldi	r24, 0x20	; 32
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    288e:	06 c0       	rjmp	.+12     	; 0x289c <HLED_enSetON+0x5a>
	#error ("Wrong Led BLUE Direction")
#endif
		break;
	case HLED_GRN_ID:
#if(HLED_GRN_LED_DIR == HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_GRN_LED_PIN, HIGH);
    2890:	8f e1       	ldi	r24, 0x1F	; 31
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2898:	01 c0       	rjmp	.+2      	; 0x289c <HLED_enSetON+0x5a>
#else
	#error ("Wrong Led GRN Direction")
#endif
		break;
	default:
		Local_State = OUT_OF_RANG_ERR;
    289a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_State;
    289c:	89 81       	ldd	r24, Y+1	; 0x01
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <HLED_enSetOFF>:

ErrorState_t HLED_enSetOFF(u8 copy_u8LedId)
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <HLED_enSetOFF+0x6>
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <HLED_enSetOFF+0x8>
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	3c 83       	std	Y+4, r19	; 0x04
    28c6:	2b 83       	std	Y+3, r18	; 0x03
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	91 05       	cpc	r25, r1
    28d0:	79 f0       	breq	.+30     	; 0x28f0 <HLED_enSetOFF+0x44>
    28d2:	2b 81       	ldd	r18, Y+3	; 0x03
    28d4:	3c 81       	ldd	r19, Y+4	; 0x04
    28d6:	23 30       	cpi	r18, 0x03	; 3
    28d8:	31 05       	cpc	r19, r1
    28da:	79 f0       	breq	.+30     	; 0x28fa <HLED_enSetOFF+0x4e>
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	79 f4       	brne	.+30     	; 0x2904 <HLED_enSetOFF+0x58>
	{
	case HLED_RED_ID:
#if(HLED_RED_LED_DIR == HLED_LED_FORWARD)
		MDIO_voidSetPinValue(HLED_RED_LED_PIN, LOW);
    28e6:	8e e1       	ldi	r24, 0x1E	; 30
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    28ee:	0b c0       	rjmp	.+22     	; 0x2906 <HLED_enSetOFF+0x5a>
	#error ("Wrong Led Red Direction")
#endif
			break;
		case HLED_BLUE_ID:
	#if(HLED_BLUE_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_BLUE_LED_PIN, LOW);
    28f0:	80 e2       	ldi	r24, 0x20	; 32
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    28f8:	06 c0       	rjmp	.+12     	; 0x2906 <HLED_enSetOFF+0x5a>
		#error ("Wrong Led BLUE Direction")
	#endif
			break;
		case HLED_GRN_ID:
	#if(HLED_GRN_LED_DIR == HLED_LED_FORWARD)
			MDIO_voidSetPinValue(HLED_GRN_LED_PIN, LOW);
    28fa:	8f e1       	ldi	r24, 0x1F	; 31
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <HLED_enSetOFF+0x5a>
	#else
		#error ("Wrong Led GRN Direction")
	#endif
			break;
		default:
			Local_State = OUT_OF_RANG_ERR;
    2904:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_State;
    2906:	89 81       	ldd	r24, Y+1	; 0x01
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <HLED_enToggle>:

ErrorState_t HLED_enToggle(u8 copy_u8LedId)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <HLED_enToggle+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <HLED_enToggle+0x8>
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_State = SUCCESS;
    2924:	82 e0       	ldi	r24, 0x02	; 2
    2926:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8LedId)
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	3c 83       	std	Y+4, r19	; 0x04
    2930:	2b 83       	std	Y+3, r18	; 0x03
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	82 30       	cpi	r24, 0x02	; 2
    2938:	91 05       	cpc	r25, r1
    293a:	71 f0       	breq	.+28     	; 0x2958 <HLED_enToggle+0x42>
    293c:	2b 81       	ldd	r18, Y+3	; 0x03
    293e:	3c 81       	ldd	r19, Y+4	; 0x04
    2940:	23 30       	cpi	r18, 0x03	; 3
    2942:	31 05       	cpc	r19, r1
    2944:	69 f0       	breq	.+26     	; 0x2960 <HLED_enToggle+0x4a>
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	91 05       	cpc	r25, r1
    294e:	61 f4       	brne	.+24     	; 0x2968 <HLED_enToggle+0x52>
	{
	case HLED_RED_ID:
		MDIO_voidTogglePinValue(HLED_RED_LED_PIN);
    2950:	8e e1       	ldi	r24, 0x1E	; 30
    2952:	0e 94 17 11 	call	0x222e	; 0x222e <MDIO_voidTogglePinValue>
    2956:	09 c0       	rjmp	.+18     	; 0x296a <HLED_enToggle+0x54>
		break;
	case HLED_BLUE_ID:
		MDIO_voidTogglePinValue(HLED_BLUE_LED_PIN);
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	0e 94 17 11 	call	0x222e	; 0x222e <MDIO_voidTogglePinValue>
    295e:	05 c0       	rjmp	.+10     	; 0x296a <HLED_enToggle+0x54>
		break;
	case HLED_GRN_ID:
		MDIO_voidTogglePinValue(HLED_GRN_LED_PIN);
    2960:	8f e1       	ldi	r24, 0x1F	; 31
    2962:	0e 94 17 11 	call	0x222e	; 0x222e <MDIO_voidTogglePinValue>
    2966:	01 c0       	rjmp	.+2      	; 0x296a <HLED_enToggle+0x54>
		break;
	default:
		Local_State = OUT_OF_RANG_ERR;
    2968:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_State;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
}
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <HLCD_enInit>:
#include "HLCD_config.h"
#include "HLCD_int.h"
#include <avr/delay.h>

ErrorState_t HLCD_enInit(void)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	ab 97       	sbiw	r28, 0x2b	; 43
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
	// Set Direction for pins as Output

	MDIO_setPinDirection(HLCD_RS_PIN, OUTPUT);
    298e:	8b e0       	ldi	r24, 0x0B	; 11
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HLCD_EN_PIN, OUTPUT);
    2996:	8c e0       	ldi	r24, 0x0C	; 12
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>

	MDIO_setPinDirection(HLCD_D7_PIN, OUTPUT);
    299e:	80 e1       	ldi	r24, 0x10	; 16
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HLCD_D6_PIN, OUTPUT);
    29a6:	8f e0       	ldi	r24, 0x0F	; 15
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HLCD_D5_PIN, OUTPUT);
    29ae:	8e e0       	ldi	r24, 0x0E	; 14
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HLCD_D4_PIN, OUTPUT);
    29b6:	8d e0       	ldi	r24, 0x0D	; 13
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	ac e0       	ldi	r26, 0x0C	; 12
    29c4:	b2 e4       	ldi	r27, 0x42	; 66
    29c6:	8f a3       	std	Y+39, r24	; 0x27
    29c8:	98 a7       	std	Y+40, r25	; 0x28
    29ca:	a9 a7       	std	Y+41, r26	; 0x29
    29cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	6f a1       	ldd	r22, Y+39	; 0x27
    29d0:	78 a5       	ldd	r23, Y+40	; 0x28
    29d2:	89 a5       	ldd	r24, Y+41	; 0x29
    29d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a e7       	ldi	r20, 0x7A	; 122
    29dc:	55 e4       	ldi	r21, 0x45	; 69
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8b a3       	std	Y+35, r24	; 0x23
    29e8:	9c a3       	std	Y+36, r25	; 0x24
    29ea:	ad a3       	std	Y+37, r26	; 0x25
    29ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ee:	6b a1       	ldd	r22, Y+35	; 0x23
    29f0:	7c a1       	ldd	r23, Y+36	; 0x24
    29f2:	8d a1       	ldd	r24, Y+37	; 0x25
    29f4:	9e a1       	ldd	r25, Y+38	; 0x26
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <HLCD_enInit+0x96>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9a a3       	std	Y+34, r25	; 0x22
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <HLCD_enInit+0x114>
	else if (__tmp > 65535)
    2a10:	6b a1       	ldd	r22, Y+35	; 0x23
    2a12:	7c a1       	ldd	r23, Y+36	; 0x24
    2a14:	8d a1       	ldd	r24, Y+37	; 0x25
    2a16:	9e a1       	ldd	r25, Y+38	; 0x26
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <HLCD_enInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	6f a1       	ldd	r22, Y+39	; 0x27
    2a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <HLCD_enInit+0xf6>
    2a52:	80 e9       	ldi	r24, 0x90	; 144
    2a54:	91 e0       	ldi	r25, 0x01	; 1
    2a56:	98 a3       	std	Y+32, r25	; 0x20
    2a58:	8f 8f       	std	Y+31, r24	; 0x1f
    2a5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <HLCD_enInit+0xe4>
    2a62:	98 a3       	std	Y+32, r25	; 0x20
    2a64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	89 a1       	ldd	r24, Y+33	; 0x21
    2a68:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9a a3       	std	Y+34, r25	; 0x22
    2a6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	89 a1       	ldd	r24, Y+33	; 0x21
    2a72:	9a a1       	ldd	r25, Y+34	; 0x22
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <HLCD_enInit+0xd8>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <HLCD_enInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a80:	9e a1       	ldd	r25, Y+38	; 0x26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9a a3       	std	Y+34, r25	; 0x22
    2a8c:	89 a3       	std	Y+33, r24	; 0x21
    2a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a90:	9a a1       	ldd	r25, Y+34	; 0x22
    2a92:	9e 8f       	std	Y+30, r25	; 0x1e
    2a94:	8d 8f       	std	Y+29, r24	; 0x1d
    2a96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <HLCD_enInit+0x120>
    2a9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa0:	8d 8f       	std	Y+29, r24	; 0x1d
	HLCD_enSendCommand(HLCD_FUNCTION_SET_8BIT_2LINES_5X7);

#elif(HLCD_MODE == _4BIT_)
	_delay_ms(35);
	//Send 0010
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    2aa2:	8c e0       	ldi	r24, 0x0C	; 12
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_D7_PIN, 0);
    2aaa:	80 e1       	ldi	r24, 0x10	; 16
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_D6_PIN, 0);
    2ab2:	8f e0       	ldi	r24, 0x0F	; 15
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_D5_PIN, 1);
    2aba:	8e e0       	ldi	r24, 0x0E	; 14
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_D4_PIN, 0);
    2ac2:	8d e0       	ldi	r24, 0x0D	; 13
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    2aca:	8c e0       	ldi	r24, 0x0C	; 12
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	89 8f       	std	Y+25, r24	; 0x19
    2adc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ade:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	55 e4       	ldi	r21, 0x45	; 69
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8d 8b       	std	Y+21, r24	; 0x15
    2afc:	9e 8b       	std	Y+22, r25	; 0x16
    2afe:	af 8b       	std	Y+23, r26	; 0x17
    2b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b02:	6d 89       	ldd	r22, Y+21	; 0x15
    2b04:	7e 89       	ldd	r23, Y+22	; 0x16
    2b06:	8f 89       	ldd	r24, Y+23	; 0x17
    2b08:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <HLCD_enInit+0x1aa>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 8b       	std	Y+20, r25	; 0x14
    2b20:	8b 8b       	std	Y+19, r24	; 0x13
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <HLCD_enInit+0x228>
	else if (__tmp > 65535)
    2b24:	6d 89       	ldd	r22, Y+21	; 0x15
    2b26:	7e 89       	ldd	r23, Y+22	; 0x16
    2b28:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <HLCD_enInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <HLCD_enInit+0x20a>
    2b66:	80 e9       	ldi	r24, 0x90	; 144
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
    2b6e:	89 89       	ldd	r24, Y+17	; 0x11
    2b70:	9a 89       	ldd	r25, Y+18	; 0x12
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <HLCD_enInit+0x1f8>
    2b76:	9a 8b       	std	Y+18, r25	; 0x12
    2b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <HLCD_enInit+0x1ec>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <HLCD_enInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b90:	7e 89       	ldd	r23, Y+22	; 0x16
    2b92:	8f 89       	ldd	r24, Y+23	; 0x17
    2b94:	98 8d       	ldd	r25, Y+24	; 0x18
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ba0:	8b 8b       	std	Y+19, r24	; 0x13
    2ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	8f 87       	std	Y+15, r24	; 0x0f
    2baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bac:	98 89       	ldd	r25, Y+16	; 0x10
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <HLCD_enInit+0x234>
    2bb2:	98 8b       	std	Y+16, r25	; 0x10
    2bb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    2bb6:	8c e0       	ldi	r24, 0x0C	; 12
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	a0 ef       	ldi	r26, 0xF0	; 240
    2bc4:	b1 e4       	ldi	r27, 0x41	; 65
    2bc6:	8b 87       	std	Y+11, r24	; 0x0b
    2bc8:	9c 87       	std	Y+12, r25	; 0x0c
    2bca:	ad 87       	std	Y+13, r26	; 0x0d
    2bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a e7       	ldi	r20, 0x7A	; 122
    2bdc:	55 e4       	ldi	r21, 0x45	; 69
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	8f 83       	std	Y+7, r24	; 0x07
    2be8:	98 87       	std	Y+8, r25	; 0x08
    2bea:	a9 87       	std	Y+9, r26	; 0x09
    2bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bee:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf0:	78 85       	ldd	r23, Y+8	; 0x08
    2bf2:	89 85       	ldd	r24, Y+9	; 0x09
    2bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <HLCD_enInit+0x296>
		__ticks = 1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
    2c0e:	3f c0       	rjmp	.+126    	; 0x2c8e <HLCD_enInit+0x314>
	else if (__tmp > 65535)
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	3f ef       	ldi	r19, 0xFF	; 255
    2c1c:	4f e7       	ldi	r20, 0x7F	; 127
    2c1e:	57 e4       	ldi	r21, 0x47	; 71
    2c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c24:	18 16       	cp	r1, r24
    2c26:	4c f5       	brge	.+82     	; 0x2c7a <HLCD_enInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	51 e4       	ldi	r21, 0x41	; 65
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	8d 83       	std	Y+5, r24	; 0x05
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <HLCD_enInit+0x2f6>
    2c52:	80 e9       	ldi	r24, 0x90	; 144
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <HLCD_enInit+0x2e4>
    2c62:	9c 83       	std	Y+4, r25	; 0x04
    2c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	69 f7       	brne	.-38     	; 0x2c52 <HLCD_enInit+0x2d8>
    2c78:	14 c0       	rjmp	.+40     	; 0x2ca2 <HLCD_enInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <HLCD_enInit+0x320>
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	HLCD_enSendCommand(HLCD_FUNCTION_SET_4BIT_2LINES_5X7);
    2ca2:	88 e2       	ldi	r24, 0x28	; 40
    2ca4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
#endif

	// Perform Rest Initialization Sequence
	HLCD_enSendCommand(HLCD_DISPLAY_ON_CURSOR_ON_BLINK_OFF);
    2ca8:	8e e0       	ldi	r24, 0x0E	; 14
    2caa:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
	HLCD_enSendCommand(HLCD_CLEAR);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
	HLCD_enSendCommand(HLCD_ENTRY_MODE_SET_INC_NO_SHIFT);
    2cb4:	86 e0       	ldi	r24, 0x06	; 6
    2cb6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
}
    2cba:	ab 96       	adiw	r28, 0x2b	; 43
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <HLCD_enSendData>:

ErrorState_t HLCD_enSendData(u8 copy_u8Data)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(HLCD_RS_PIN, HIGH);
    2cd8:	8b e0       	ldi	r24, 0x0B	; 11
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	// Send Data as a Byte to NLatch
	HLCD_voidNLatch(copy_u8Data);
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <HLCD_voidNLatch>

	return SUCCESS;
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
}
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <HLCD_enSendCommand>:

ErrorState_t HLCD_enSendCommand(u8 copy_u8Command)
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinValue(HLCD_RS_PIN, LOW);
    2cfc:	8b e0       	ldi	r24, 0x0B	; 11
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	// Send Command as a Byte to NLatch
	HLCD_voidNLatch(copy_u8Command);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <HLCD_voidNLatch>

	return SUCCESS;
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
}
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <HLCD_enSendString>:

ErrorState_t HLCD_enSendString(const u8 *str)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <HLCD_enSendString+0x6>
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	0a c0       	rjmp	.+20     	; 0x2d38 <HLCD_enSendString+0x24>
	while(*str != '\0')
	{
		HLCD_enSendData(*str);
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	80 81       	ld	r24, Z
    2d2a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
		str++;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
	return SUCCESS;
}

ErrorState_t HLCD_enSendString(const u8 *str)
{
	while(*str != '\0')
    2d38:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 23       	and	r24, r24
    2d40:	89 f7       	brne	.-30     	; 0x2d24 <HLCD_enSendString+0x10>
	{
		HLCD_enSendData(*str);
		str++;
	}
	return SUCCESS;
    2d42:	82 e0       	ldi	r24, 0x02	; 2
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <HLCD_enClear>:

ErrorState_t HLCD_enClear(void)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	0f 92       	push	r0
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
	HLCD_enSendCommand(HLCD_CLEAR);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
}
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <HLCD_enSendIntNum>:

ErrorState_t HLCD_enSendIntNum(s32 copy_u32Num)
{
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	2f 97       	sbiw	r28, 0x0f	; 15
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	6c 87       	std	Y+12, r22	; 0x0c
    2d80:	7d 87       	std	Y+13, r23	; 0x0d
    2d82:	8e 87       	std	Y+14, r24	; 0x0e
    2d84:	9f 87       	std	Y+15, r25	; 0x0f
	u8 IntArr[10] = {0};
    2d86:	8a e0       	ldi	r24, 0x0A	; 10
    2d88:	fe 01       	movw	r30, r28
    2d8a:	32 96       	adiw	r30, 0x02	; 2
    2d8c:	df 01       	movw	r26, r30
    2d8e:	98 2f       	mov	r25, r24
    2d90:	1d 92       	st	X+, r1
    2d92:	9a 95       	dec	r25
    2d94:	e9 f7       	brne	.-6      	; 0x2d90 <HLCD_enSendIntNum+0x2a>
	s8 i = 0;
    2d96:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u32Num == 0)
    2d98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d9c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d9e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	a1 05       	cpc	r26, r1
    2da4:	b1 05       	cpc	r27, r1
    2da6:	21 f4       	brne	.+8      	; 0x2db0 <HLCD_enSendIntNum+0x4a>
	{
		HLCD_enSendData('0');
    2da8:	80 e3       	ldi	r24, 0x30	; 48
    2daa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
    2dae:	49 c0       	rjmp	.+146    	; 0x2e42 <HLCD_enSendIntNum+0xdc>
	}
	else if(copy_u32Num < 0)
    2db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2db4:	ae 85       	ldd	r26, Y+14	; 0x0e
    2db6:	bf 85       	ldd	r27, Y+15	; 0x0f
    2db8:	bb 23       	and	r27, r27
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <HLCD_enSendIntNum+0x58>
    2dbc:	42 c0       	rjmp	.+132    	; 0x2e42 <HLCD_enSendIntNum+0xdc>
	{
		HLCD_enSendData('-');
    2dbe:	8d e2       	ldi	r24, 0x2D	; 45
    2dc0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
		copy_u32Num *= -1;
    2dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dc8:	ae 85       	ldd	r26, Y+14	; 0x0e
    2dca:	bf 85       	ldd	r27, Y+15	; 0x0f
    2dcc:	b0 95       	com	r27
    2dce:	a0 95       	com	r26
    2dd0:	90 95       	com	r25
    2dd2:	81 95       	neg	r24
    2dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd6:	af 4f       	sbci	r26, 0xFF	; 255
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	8c 87       	std	Y+12, r24	; 0x0c
    2ddc:	9d 87       	std	Y+13, r25	; 0x0d
    2dde:	ae 87       	std	Y+14, r26	; 0x0e
    2de0:	bf 87       	std	Y+15, r27	; 0x0f
    2de2:	2f c0       	rjmp	.+94     	; 0x2e42 <HLCD_enSendIntNum+0xdc>
	}
	while(copy_u32Num > 0)
	{
		IntArr[i] = copy_u32Num % 10;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	08 2f       	mov	r16, r24
    2de8:	11 27       	eor	r17, r17
    2dea:	07 fd       	sbrc	r16, 7
    2dec:	10 95       	com	r17
    2dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2df2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2df4:	bf 85       	ldd	r27, Y+15	; 0x0f
    2df6:	2a e0       	ldi	r18, 0x0A	; 10
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__divmodsi4>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	02 96       	adiw	r24, 0x02	; 2
    2e10:	fc 01       	movw	r30, r24
    2e12:	e0 0f       	add	r30, r16
    2e14:	f1 1f       	adc	r31, r17
    2e16:	20 83       	st	Z, r18
		copy_u32Num = copy_u32Num / 10;
    2e18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e1c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e1e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e20:	2a e0       	ldi	r18, 0x0A	; 10
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__divmodsi4>
    2e30:	da 01       	movw	r26, r20
    2e32:	c9 01       	movw	r24, r18
    2e34:	8c 87       	std	Y+12, r24	; 0x0c
    2e36:	9d 87       	std	Y+13, r25	; 0x0d
    2e38:	ae 87       	std	Y+14, r26	; 0x0e
    2e3a:	bf 87       	std	Y+15, r27	; 0x0f
		i++;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	89 83       	std	Y+1, r24	; 0x01
	else if(copy_u32Num < 0)
	{
		HLCD_enSendData('-');
		copy_u32Num *= -1;
	}
	while(copy_u32Num > 0)
    2e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e46:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e48:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e4a:	18 16       	cp	r1, r24
    2e4c:	19 06       	cpc	r1, r25
    2e4e:	1a 06       	cpc	r1, r26
    2e50:	1b 06       	cpc	r1, r27
    2e52:	44 f2       	brlt	.-112    	; 0x2de4 <HLCD_enSendIntNum+0x7e>
	{
		IntArr[i] = copy_u32Num % 10;
		copy_u32Num = copy_u32Num / 10;
		i++;
	}
	i--;
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	81 50       	subi	r24, 0x01	; 1
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	11 c0       	rjmp	.+34     	; 0x2e7e <HLCD_enSendIntNum+0x118>
	while(i >= 0)
	{
		HLCD_enSendData(IntArr[i] + '0');
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	33 27       	eor	r19, r19
    2e62:	27 fd       	sbrc	r18, 7
    2e64:	30 95       	com	r19
    2e66:	ce 01       	movw	r24, r28
    2e68:	02 96       	adiw	r24, 0x02	; 2
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	e2 0f       	add	r30, r18
    2e6e:	f3 1f       	adc	r31, r19
    2e70:	80 81       	ld	r24, Z
    2e72:	80 5d       	subi	r24, 0xD0	; 208
    2e74:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
		i--;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	81 50       	subi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
		IntArr[i] = copy_u32Num % 10;
		copy_u32Num = copy_u32Num / 10;
		i++;
	}
	i--;
	while(i >= 0)
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	88 23       	and	r24, r24
    2e82:	64 f7       	brge	.-40     	; 0x2e5c <HLCD_enSendIntNum+0xf6>
	{
		HLCD_enSendData(IntArr[i] + '0');
		i--;
	}

	return SUCCESS;
    2e84:	82 e0       	ldi	r24, 0x02	; 2
}
    2e86:	2f 96       	adiw	r28, 0x0f	; 15
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	08 95       	ret

00002e9c <HLCD_enGoToXY>:

ErrorState_t HLCD_enGoToXY(u8 copy_u8X, u8 copy_u8Y)
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <HLCD_enGoToXY+0x6>
    2ea2:	0f 92       	push	r0
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8X == 0)
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	88 23       	and	r24, r24
    2eb0:	29 f4       	brne	.+10     	; 0x2ebc <HLCD_enGoToXY+0x20>
	{
		HLCD_enSendCommand(HLCD_FIRST_COL | copy_u8Y);
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	80 68       	ori	r24, 0x80	; 128
    2eb6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
    2eba:	07 c0       	rjmp	.+14     	; 0x2eca <HLCD_enGoToXY+0x2e>
	}
	else if(copy_u8X == 1)
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	21 f4       	brne	.+8      	; 0x2eca <HLCD_enGoToXY+0x2e>
	{
		HLCD_enSendCommand(HLCD_SECOND_COL | copy_u8Y);
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	80 6c       	ori	r24, 0xC0	; 192
    2ec6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
	}
}
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <HLCD_enSendCustomChar>:

ErrorState_t HLCD_enSendCustomChar(u8 copy_u8CharCode, u8 *ptrPattern)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <HLCD_enSendCustomChar+0x6>
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <HLCD_enSendCustomChar+0x8>
    2ede:	0f 92       	push	r0
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
    2ee6:	7c 83       	std	Y+4, r23	; 0x04
    2ee8:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_enSendCommand(copy_u8CharCode + HLCD_SET_CGRAM_ADDRESS);
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	80 5c       	subi	r24, 0xC0	; 192
    2eee:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <HLCD_enSendCommand>
	u8 i;

	for(i = 0; i <= 8; i++)
    2ef2:	19 82       	std	Y+1, r1	; 0x01
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <HLCD_enSendCustomChar+0x3c>
	{
		HLCD_enSendData(ptrPattern[i]);
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	fc 01       	movw	r30, r24
    2f02:	e2 0f       	add	r30, r18
    2f04:	f3 1f       	adc	r31, r19
    2f06:	80 81       	ld	r24, Z
    2f08:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
ErrorState_t HLCD_enSendCustomChar(u8 copy_u8CharCode, u8 *ptrPattern)
{
	HLCD_enSendCommand(copy_u8CharCode + HLCD_SET_CGRAM_ADDRESS);
	u8 i;

	for(i = 0; i <= 8; i++)
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	89 30       	cpi	r24, 0x09	; 9
    2f16:	78 f3       	brcs	.-34     	; 0x2ef6 <HLCD_enSendCustomChar+0x20>
	{
		HLCD_enSendData(ptrPattern[i]);
	}

}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <HLCD_enDisplayCustomChar>:

ErrorState_t HLCD_enDisplayCustomChar(u8 copy_u8CharCode)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <HLCD_enDisplayCustomChar+0x6>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	89 83       	std	Y+1, r24	; 0x01
	HLCD_enSendData(copy_u8CharCode);
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <HLCD_enSendData>
}
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <HLCD_voidNLatch>:

static void HLCD_voidNLatch (u8 copy_u8Byte)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	ee 97       	sbiw	r28, 0x3e	; 62
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	8e af       	std	Y+62, r24	; 0x3e
		_delay_ms(1);
		MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
		_delay_ms(30);

#elif(HLCD_MODE == _4BIT_)
	u8 LCdPinsArr[] = { HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN, HLCD_D7_PIN };
    2f5a:	8d e0       	ldi	r24, 0x0D	; 13
    2f5c:	8a af       	std	Y+58, r24	; 0x3a
    2f5e:	8e e0       	ldi	r24, 0x0E	; 14
    2f60:	8b af       	std	Y+59, r24	; 0x3b
    2f62:	8f e0       	ldi	r24, 0x0F	; 15
    2f64:	8c af       	std	Y+60, r24	; 0x3c
    2f66:	80 e1       	ldi	r24, 0x10	; 16
    2f68:	8d af       	std	Y+61, r24	; 0x3d
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    2f6a:	8c e0       	ldi	r24, 0x0C	; 12
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>

	for (i = 0; i <= 3; i++)
    2f72:	19 ae       	std	Y+57, r1	; 0x39
    2f74:	20 c0       	rjmp	.+64     	; 0x2fb6 <HLCD_voidNLatch+0x72>
	{
		MDIO_voidSetPinValue(LCdPinsArr[i], GET_BIT(copy_u8Byte, i + 4));
    2f76:	89 ad       	ldd	r24, Y+57	; 0x39
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	ca 96       	adiw	r24, 0x3a	; 58
    2f80:	fc 01       	movw	r30, r24
    2f82:	e2 0f       	add	r30, r18
    2f84:	f3 1f       	adc	r31, r19
    2f86:	40 81       	ld	r20, Z
    2f88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	04 96       	adiw	r24, 0x04	; 4
    2f96:	b9 01       	movw	r22, r18
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <HLCD_voidNLatch+0x5a>
    2f9a:	75 95       	asr	r23
    2f9c:	67 95       	ror	r22
    2f9e:	8a 95       	dec	r24
    2fa0:	e2 f7       	brpl	.-8      	; 0x2f9a <HLCD_voidNLatch+0x56>
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	98 2f       	mov	r25, r24
    2fa6:	91 70       	andi	r25, 0x01	; 1
    2fa8:	84 2f       	mov	r24, r20
    2faa:	69 2f       	mov	r22, r25
    2fac:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>

#elif(HLCD_MODE == _4BIT_)
	u8 LCdPinsArr[] = { HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN, HLCD_D7_PIN };
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);

	for (i = 0; i <= 3; i++)
    2fb0:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb2:	8f 5f       	subi	r24, 0xFF	; 255
    2fb4:	89 af       	std	Y+57, r24	; 0x39
    2fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb8:	84 30       	cpi	r24, 0x04	; 4
    2fba:	e8 f2       	brcs	.-70     	; 0x2f76 <HLCD_voidNLatch+0x32>
	{
		MDIO_voidSetPinValue(LCdPinsArr[i], GET_BIT(copy_u8Byte, i + 4));
	}

	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    2fbc:	8c e0       	ldi	r24, 0x0C	; 12
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a0 e8       	ldi	r26, 0x80	; 128
    2fca:	bf e3       	ldi	r27, 0x3F	; 63
    2fcc:	8d ab       	std	Y+53, r24	; 0x35
    2fce:	9e ab       	std	Y+54, r25	; 0x36
    2fd0:	af ab       	std	Y+55, r26	; 0x37
    2fd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd4:	6d a9       	ldd	r22, Y+53	; 0x35
    2fd6:	7e a9       	ldd	r23, Y+54	; 0x36
    2fd8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fda:	98 ad       	ldd	r25, Y+56	; 0x38
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	55 e4       	ldi	r21, 0x45	; 69
    2fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	89 ab       	std	Y+49, r24	; 0x31
    2fee:	9a ab       	std	Y+50, r25	; 0x32
    2ff0:	ab ab       	std	Y+51, r26	; 0x33
    2ff2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ff4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ff6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ffa:	9c a9       	ldd	r25, Y+52	; 0x34
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	2c f4       	brge	.+10     	; 0x3016 <HLCD_voidNLatch+0xd2>
		__ticks = 1;
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	98 ab       	std	Y+48, r25	; 0x30
    3012:	8f a7       	std	Y+47, r24	; 0x2f
    3014:	3f c0       	rjmp	.+126    	; 0x3094 <HLCD_voidNLatch+0x150>
	else if (__tmp > 65535)
    3016:	69 a9       	ldd	r22, Y+49	; 0x31
    3018:	7a a9       	ldd	r23, Y+50	; 0x32
    301a:	8b a9       	ldd	r24, Y+51	; 0x33
    301c:	9c a9       	ldd	r25, Y+52	; 0x34
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	57 e4       	ldi	r21, 0x47	; 71
    3026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	4c f5       	brge	.+82     	; 0x3080 <HLCD_voidNLatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302e:	6d a9       	ldd	r22, Y+53	; 0x35
    3030:	7e a9       	ldd	r23, Y+54	; 0x36
    3032:	8f a9       	ldd	r24, Y+55	; 0x37
    3034:	98 ad       	ldd	r25, Y+56	; 0x38
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e2       	ldi	r20, 0x20	; 32
    303c:	51 e4       	ldi	r21, 0x41	; 65
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	bc 01       	movw	r22, r24
    3048:	cd 01       	movw	r24, r26
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	98 ab       	std	Y+48, r25	; 0x30
    3054:	8f a7       	std	Y+47, r24	; 0x2f
    3056:	0f c0       	rjmp	.+30     	; 0x3076 <HLCD_voidNLatch+0x132>
    3058:	80 e9       	ldi	r24, 0x90	; 144
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	9e a7       	std	Y+46, r25	; 0x2e
    305e:	8d a7       	std	Y+45, r24	; 0x2d
    3060:	8d a5       	ldd	r24, Y+45	; 0x2d
    3062:	9e a5       	ldd	r25, Y+46	; 0x2e
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <HLCD_voidNLatch+0x120>
    3068:	9e a7       	std	Y+46, r25	; 0x2e
    306a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306c:	8f a5       	ldd	r24, Y+47	; 0x2f
    306e:	98 a9       	ldd	r25, Y+48	; 0x30
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	98 ab       	std	Y+48, r25	; 0x30
    3074:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3076:	8f a5       	ldd	r24, Y+47	; 0x2f
    3078:	98 a9       	ldd	r25, Y+48	; 0x30
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	69 f7       	brne	.-38     	; 0x3058 <HLCD_voidNLatch+0x114>
    307e:	14 c0       	rjmp	.+40     	; 0x30a8 <HLCD_voidNLatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3080:	69 a9       	ldd	r22, Y+49	; 0x31
    3082:	7a a9       	ldd	r23, Y+50	; 0x32
    3084:	8b a9       	ldd	r24, Y+51	; 0x33
    3086:	9c a9       	ldd	r25, Y+52	; 0x34
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	98 ab       	std	Y+48, r25	; 0x30
    3092:	8f a7       	std	Y+47, r24	; 0x2f
    3094:	8f a5       	ldd	r24, Y+47	; 0x2f
    3096:	98 a9       	ldd	r25, Y+48	; 0x30
    3098:	9c a7       	std	Y+44, r25	; 0x2c
    309a:	8b a7       	std	Y+43, r24	; 0x2b
    309c:	8b a5       	ldd	r24, Y+43	; 0x2b
    309e:	9c a5       	ldd	r25, Y+44	; 0x2c
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <HLCD_voidNLatch+0x15c>
    30a4:	9c a7       	std	Y+44, r25	; 0x2c
    30a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    30a8:	8c e0       	ldi	r24, 0x0C	; 12
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 ef       	ldi	r26, 0xF0	; 240
    30b6:	b1 e4       	ldi	r27, 0x41	; 65
    30b8:	8f a3       	std	Y+39, r24	; 0x27
    30ba:	98 a7       	std	Y+40, r25	; 0x28
    30bc:	a9 a7       	std	Y+41, r26	; 0x29
    30be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c0:	6f a1       	ldd	r22, Y+39	; 0x27
    30c2:	78 a5       	ldd	r23, Y+40	; 0x28
    30c4:	89 a5       	ldd	r24, Y+41	; 0x29
    30c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a e7       	ldi	r20, 0x7A	; 122
    30ce:	55 e4       	ldi	r21, 0x45	; 69
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8b a3       	std	Y+35, r24	; 0x23
    30da:	9c a3       	std	Y+36, r25	; 0x24
    30dc:	ad a3       	std	Y+37, r26	; 0x25
    30de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30e0:	6b a1       	ldd	r22, Y+35	; 0x23
    30e2:	7c a1       	ldd	r23, Y+36	; 0x24
    30e4:	8d a1       	ldd	r24, Y+37	; 0x25
    30e6:	9e a1       	ldd	r25, Y+38	; 0x26
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	5f e3       	ldi	r21, 0x3F	; 63
    30f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	2c f4       	brge	.+10     	; 0x3102 <HLCD_voidNLatch+0x1be>
		__ticks = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9a a3       	std	Y+34, r25	; 0x22
    30fe:	89 a3       	std	Y+33, r24	; 0x21
    3100:	3f c0       	rjmp	.+126    	; 0x3180 <HLCD_voidNLatch+0x23c>
	else if (__tmp > 65535)
    3102:	6b a1       	ldd	r22, Y+35	; 0x23
    3104:	7c a1       	ldd	r23, Y+36	; 0x24
    3106:	8d a1       	ldd	r24, Y+37	; 0x25
    3108:	9e a1       	ldd	r25, Y+38	; 0x26
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	3f ef       	ldi	r19, 0xFF	; 255
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	57 e4       	ldi	r21, 0x47	; 71
    3112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	4c f5       	brge	.+82     	; 0x316c <HLCD_voidNLatch+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	6f a1       	ldd	r22, Y+39	; 0x27
    311c:	78 a5       	ldd	r23, Y+40	; 0x28
    311e:	89 a5       	ldd	r24, Y+41	; 0x29
    3120:	9a a5       	ldd	r25, Y+42	; 0x2a
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	bc 01       	movw	r22, r24
    3134:	cd 01       	movw	r24, r26
    3136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9a a3       	std	Y+34, r25	; 0x22
    3140:	89 a3       	std	Y+33, r24	; 0x21
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <HLCD_voidNLatch+0x21e>
    3144:	80 e9       	ldi	r24, 0x90	; 144
    3146:	91 e0       	ldi	r25, 0x01	; 1
    3148:	98 a3       	std	Y+32, r25	; 0x20
    314a:	8f 8f       	std	Y+31, r24	; 0x1f
    314c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    314e:	98 a1       	ldd	r25, Y+32	; 0x20
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <HLCD_voidNLatch+0x20c>
    3154:	98 a3       	std	Y+32, r25	; 0x20
    3156:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	89 a1       	ldd	r24, Y+33	; 0x21
    315a:	9a a1       	ldd	r25, Y+34	; 0x22
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	9a a3       	std	Y+34, r25	; 0x22
    3160:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	89 a1       	ldd	r24, Y+33	; 0x21
    3164:	9a a1       	ldd	r25, Y+34	; 0x22
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	69 f7       	brne	.-38     	; 0x3144 <HLCD_voidNLatch+0x200>
    316a:	14 c0       	rjmp	.+40     	; 0x3194 <HLCD_voidNLatch+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	6b a1       	ldd	r22, Y+35	; 0x23
    316e:	7c a1       	ldd	r23, Y+36	; 0x24
    3170:	8d a1       	ldd	r24, Y+37	; 0x25
    3172:	9e a1       	ldd	r25, Y+38	; 0x26
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	9a a3       	std	Y+34, r25	; 0x22
    317e:	89 a3       	std	Y+33, r24	; 0x21
    3180:	89 a1       	ldd	r24, Y+33	; 0x21
    3182:	9a a1       	ldd	r25, Y+34	; 0x22
    3184:	9e 8f       	std	Y+30, r25	; 0x1e
    3186:	8d 8f       	std	Y+29, r24	; 0x1d
    3188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    318a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <HLCD_voidNLatch+0x248>
    3190:	9e 8f       	std	Y+30, r25	; 0x1e
    3192:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	// Send Lower 4 bits
	//MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);

	for (i = 0; i <= 3; i++)
    3194:	19 ae       	std	Y+57, r1	; 0x39
    3196:	1f c0       	rjmp	.+62     	; 0x31d6 <HLCD_voidNLatch+0x292>
	{
		MDIO_voidSetPinValue(LCdPinsArr[i], GET_BIT(copy_u8Byte, i));
    3198:	89 ad       	ldd	r24, Y+57	; 0x39
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	ce 01       	movw	r24, r28
    31a0:	ca 96       	adiw	r24, 0x3a	; 58
    31a2:	fc 01       	movw	r30, r24
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	40 81       	ld	r20, Z
    31aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	89 ad       	ldd	r24, Y+57	; 0x39
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	b9 01       	movw	r22, r18
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <HLCD_voidNLatch+0x27a>
    31ba:	75 95       	asr	r23
    31bc:	67 95       	ror	r22
    31be:	8a 95       	dec	r24
    31c0:	e2 f7       	brpl	.-8      	; 0x31ba <HLCD_voidNLatch+0x276>
    31c2:	cb 01       	movw	r24, r22
    31c4:	98 2f       	mov	r25, r24
    31c6:	91 70       	andi	r25, 0x01	; 1
    31c8:	84 2f       	mov	r24, r20
    31ca:	69 2f       	mov	r22, r25
    31cc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	_delay_ms(30);

	// Send Lower 4 bits
	//MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);

	for (i = 0; i <= 3; i++)
    31d0:	89 ad       	ldd	r24, Y+57	; 0x39
    31d2:	8f 5f       	subi	r24, 0xFF	; 255
    31d4:	89 af       	std	Y+57, r24	; 0x39
    31d6:	89 ad       	ldd	r24, Y+57	; 0x39
    31d8:	84 30       	cpi	r24, 0x04	; 4
    31da:	f0 f2       	brcs	.-68     	; 0x3198 <HLCD_voidNLatch+0x254>
	{
		MDIO_voidSetPinValue(LCdPinsArr[i], GET_BIT(copy_u8Byte, i));
	}

	MDIO_voidSetPinValue(HLCD_EN_PIN, HIGH);
    31dc:	8c e0       	ldi	r24, 0x0C	; 12
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a0 e8       	ldi	r26, 0x80	; 128
    31ea:	bf e3       	ldi	r27, 0x3F	; 63
    31ec:	89 8f       	std	Y+25, r24	; 0x19
    31ee:	9a 8f       	std	Y+26, r25	; 0x1a
    31f0:	ab 8f       	std	Y+27, r26	; 0x1b
    31f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f4:	69 8d       	ldd	r22, Y+25	; 0x19
    31f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a e7       	ldi	r20, 0x7A	; 122
    3202:	55 e4       	ldi	r21, 0x45	; 69
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8d 8b       	std	Y+21, r24	; 0x15
    320e:	9e 8b       	std	Y+22, r25	; 0x16
    3210:	af 8b       	std	Y+23, r26	; 0x17
    3212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	2c f4       	brge	.+10     	; 0x3236 <HLCD_voidNLatch+0x2f2>
		__ticks = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9c 8b       	std	Y+20, r25	; 0x14
    3232:	8b 8b       	std	Y+19, r24	; 0x13
    3234:	3f c0       	rjmp	.+126    	; 0x32b4 <HLCD_voidNLatch+0x370>
	else if (__tmp > 65535)
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	3f ef       	ldi	r19, 0xFF	; 255
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	57 e4       	ldi	r21, 0x47	; 71
    3246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	4c f5       	brge	.+82     	; 0x32a0 <HLCD_voidNLatch+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	69 8d       	ldd	r22, Y+25	; 0x19
    3250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <HLCD_voidNLatch+0x352>
    3278:	80 e9       	ldi	r24, 0x90	; 144
    327a:	91 e0       	ldi	r25, 0x01	; 1
    327c:	9a 8b       	std	Y+18, r25	; 0x12
    327e:	89 8b       	std	Y+17, r24	; 0x11
    3280:	89 89       	ldd	r24, Y+17	; 0x11
    3282:	9a 89       	ldd	r25, Y+18	; 0x12
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <HLCD_voidNLatch+0x340>
    3288:	9a 8b       	std	Y+18, r25	; 0x12
    328a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9c 8b       	std	Y+20, r25	; 0x14
    3294:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	8b 89       	ldd	r24, Y+19	; 0x13
    3298:	9c 89       	ldd	r25, Y+20	; 0x14
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f7       	brne	.-38     	; 0x3278 <HLCD_voidNLatch+0x334>
    329e:	14 c0       	rjmp	.+40     	; 0x32c8 <HLCD_voidNLatch+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	6d 89       	ldd	r22, Y+21	; 0x15
    32a2:	7e 89       	ldd	r23, Y+22	; 0x16
    32a4:	8f 89       	ldd	r24, Y+23	; 0x17
    32a6:	98 8d       	ldd	r25, Y+24	; 0x18
    32a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	9c 8b       	std	Y+20, r25	; 0x14
    32b2:	8b 8b       	std	Y+19, r24	; 0x13
    32b4:	8b 89       	ldd	r24, Y+19	; 0x13
    32b6:	9c 89       	ldd	r25, Y+20	; 0x14
    32b8:	98 8b       	std	Y+16, r25	; 0x10
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
    32bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32be:	98 89       	ldd	r25, Y+16	; 0x10
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <HLCD_voidNLatch+0x37c>
    32c4:	98 8b       	std	Y+16, r25	; 0x10
    32c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(HLCD_EN_PIN, LOW);
    32c8:	8c e0       	ldi	r24, 0x0C	; 12
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	a0 ef       	ldi	r26, 0xF0	; 240
    32d6:	b1 e4       	ldi	r27, 0x41	; 65
    32d8:	8b 87       	std	Y+11, r24	; 0x0b
    32da:	9c 87       	std	Y+12, r25	; 0x0c
    32dc:	ad 87       	std	Y+13, r26	; 0x0d
    32de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a e7       	ldi	r20, 0x7A	; 122
    32ee:	55 e4       	ldi	r21, 0x45	; 69
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	8f 83       	std	Y+7, r24	; 0x07
    32fa:	98 87       	std	Y+8, r25	; 0x08
    32fc:	a9 87       	std	Y+9, r26	; 0x09
    32fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3300:	6f 81       	ldd	r22, Y+7	; 0x07
    3302:	78 85       	ldd	r23, Y+8	; 0x08
    3304:	89 85       	ldd	r24, Y+9	; 0x09
    3306:	9a 85       	ldd	r25, Y+10	; 0x0a
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e8       	ldi	r20, 0x80	; 128
    330e:	5f e3       	ldi	r21, 0x3F	; 63
    3310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3314:	88 23       	and	r24, r24
    3316:	2c f4       	brge	.+10     	; 0x3322 <HLCD_voidNLatch+0x3de>
		__ticks = 1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	3f c0       	rjmp	.+126    	; 0x33a0 <HLCD_voidNLatch+0x45c>
	else if (__tmp > 65535)
    3322:	6f 81       	ldd	r22, Y+7	; 0x07
    3324:	78 85       	ldd	r23, Y+8	; 0x08
    3326:	89 85       	ldd	r24, Y+9	; 0x09
    3328:	9a 85       	ldd	r25, Y+10	; 0x0a
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	3f ef       	ldi	r19, 0xFF	; 255
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	57 e4       	ldi	r21, 0x47	; 71
    3332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3336:	18 16       	cp	r1, r24
    3338:	4c f5       	brge	.+82     	; 0x338c <HLCD_voidNLatch+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333a:	6b 85       	ldd	r22, Y+11	; 0x0b
    333c:	7c 85       	ldd	r23, Y+12	; 0x0c
    333e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3340:	9e 85       	ldd	r25, Y+14	; 0x0e
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e2       	ldi	r20, 0x20	; 32
    3348:	51 e4       	ldi	r21, 0x41	; 65
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <HLCD_voidNLatch+0x43e>
    3364:	80 e9       	ldi	r24, 0x90	; 144
    3366:	91 e0       	ldi	r25, 0x01	; 1
    3368:	9c 83       	std	Y+4, r25	; 0x04
    336a:	8b 83       	std	Y+3, r24	; 0x03
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <HLCD_voidNLatch+0x42c>
    3374:	9c 83       	std	Y+4, r25	; 0x04
    3376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	69 f7       	brne	.-38     	; 0x3364 <HLCD_voidNLatch+0x420>
    338a:	14 c0       	rjmp	.+40     	; 0x33b4 <HLCD_voidNLatch+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338c:	6f 81       	ldd	r22, Y+7	; 0x07
    338e:	78 85       	ldd	r23, Y+8	; 0x08
    3390:	89 85       	ldd	r24, Y+9	; 0x09
    3392:	9a 85       	ldd	r25, Y+10	; 0x0a
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	9e 81       	ldd	r25, Y+6	; 0x06
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <HLCD_voidNLatch+0x468>
    33b0:	9a 83       	std	Y+2, r25	; 0x02
    33b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
#else
	#error ("Wrong LCD Mode");
#endif
}
    33b4:	ee 96       	adiw	r28, 0x3e	; 62
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <HKPAD_enInit>:
#include "HKPAD_priv.h"
#include "HKPAD_config.h"
#include "HKPAD_int.h"

ErrorState_t HKPAD_enInit(void)
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
	// Config Rows to be Output
	MDIO_setPinDirection(HKPAD_R0_PIN, OUTPUT);
    33ce:	88 e1       	ldi	r24, 0x18	; 24
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_R1_PIN, OUTPUT);
    33d6:	89 e1       	ldi	r24, 0x19	; 25
    33d8:	61 e0       	ldi	r22, 0x01	; 1
    33da:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_R2_PIN, OUTPUT);
    33de:	8a e1       	ldi	r24, 0x1A	; 26
    33e0:	61 e0       	ldi	r22, 0x01	; 1
    33e2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_R3_PIN, OUTPUT);
    33e6:	8b e1       	ldi	r24, 0x1B	; 27
    33e8:	61 e0       	ldi	r22, 0x01	; 1
    33ea:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>

	// Config Cols to be Input
	MDIO_setPinDirection(HKPAD_C0_PIN, INPUT);
    33ee:	8a e2       	ldi	r24, 0x2A	; 42
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_C1_PIN, INPUT);
    33f6:	8b e2       	ldi	r24, 0x2B	; 43
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_C2_PIN, INPUT);
    33fe:	8c e2       	ldi	r24, 0x2C	; 44
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HKPAD_C3_PIN, INPUT);
    3406:	8d e2       	ldi	r24, 0x2D	; 45
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>

	// Initialize Output (Rows) High
	MDIO_voidSetPinValue(HKPAD_R0_PIN, HIGH);
    340e:	88 e1       	ldi	r24, 0x18	; 24
    3410:	61 e0       	ldi	r22, 0x01	; 1
    3412:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HKPAD_R1_PIN, HIGH);
    3416:	89 e1       	ldi	r24, 0x19	; 25
    3418:	61 e0       	ldi	r22, 0x01	; 1
    341a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HKPAD_R2_PIN, HIGH);
    341e:	8a e1       	ldi	r24, 0x1A	; 26
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HKPAD_R3_PIN, HIGH);
    3426:	8b e1       	ldi	r24, 0x1B	; 27
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HKPAD_C1_PIN, HIGH);
	MDIO_voidSetPinValue(HKPAD_C2_PIN, HIGH);
	MDIO_voidSetPinValue(HKPAD_C3_PIN, HIGH);
#endif

	return SUCCESS;
    342e:	82 e0       	ldi	r24, 0x02	; 2
}
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <HKPAD_enGetPressKey>:

ErrorState_t HKPAD_enGetPressKey(u8 *ptrKey)
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	e2 97       	sbiw	r28, 0x32	; 50
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	9d a7       	std	Y+45, r25	; 0x2d
    344c:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Local_u8PressedKey = HKPAD_NO_PRESSED_KEY;
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8PinRead;
	u8 row_indx;
	u8 col_indx;
	u8 flag = 0;
    3452:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Local_u8ArrKeys[4][4] = HKYPAD_KEYS;
    3454:	ce 01       	movw	r24, r28
    3456:	44 96       	adiw	r24, 0x14	; 20
    3458:	9f a7       	std	Y+47, r25	; 0x2f
    345a:	8e a7       	std	Y+46, r24	; 0x2e
    345c:	e8 e9       	ldi	r30, 0x98	; 152
    345e:	f1 e0       	ldi	r31, 0x01	; 1
    3460:	f9 ab       	std	Y+49, r31	; 0x31
    3462:	e8 ab       	std	Y+48, r30	; 0x30
    3464:	f0 e1       	ldi	r31, 0x10	; 16
    3466:	fa ab       	std	Y+50, r31	; 0x32
    3468:	e8 a9       	ldd	r30, Y+48	; 0x30
    346a:	f9 a9       	ldd	r31, Y+49	; 0x31
    346c:	00 80       	ld	r0, Z
    346e:	88 a9       	ldd	r24, Y+48	; 0x30
    3470:	99 a9       	ldd	r25, Y+49	; 0x31
    3472:	01 96       	adiw	r24, 0x01	; 1
    3474:	99 ab       	std	Y+49, r25	; 0x31
    3476:	88 ab       	std	Y+48, r24	; 0x30
    3478:	ee a5       	ldd	r30, Y+46	; 0x2e
    347a:	ff a5       	ldd	r31, Y+47	; 0x2f
    347c:	00 82       	st	Z, r0
    347e:	8e a5       	ldd	r24, Y+46	; 0x2e
    3480:	9f a5       	ldd	r25, Y+47	; 0x2f
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	9f a7       	std	Y+47, r25	; 0x2f
    3486:	8e a7       	std	Y+46, r24	; 0x2e
    3488:	9a a9       	ldd	r25, Y+50	; 0x32
    348a:	91 50       	subi	r25, 0x01	; 1
    348c:	9a ab       	std	Y+50, r25	; 0x32
    348e:	ea a9       	ldd	r30, Y+50	; 0x32
    3490:	ee 23       	and	r30, r30
    3492:	51 f7       	brne	.-44     	; 0x3468 <HKPAD_enGetPressKey+0x32>
	u8 rowArr[] = {HKPAD_R0_PIN, HKPAD_R1_PIN, HKPAD_R2_PIN, HKPAD_R3_PIN};
    3494:	88 e1       	ldi	r24, 0x18	; 24
    3496:	8c a3       	std	Y+36, r24	; 0x24
    3498:	89 e1       	ldi	r24, 0x19	; 25
    349a:	8d a3       	std	Y+37, r24	; 0x25
    349c:	8a e1       	ldi	r24, 0x1A	; 26
    349e:	8e a3       	std	Y+38, r24	; 0x26
    34a0:	8b e1       	ldi	r24, 0x1B	; 27
    34a2:	8f a3       	std	Y+39, r24	; 0x27
	u8 colArr[] = {HKPAD_C0_PIN, HKPAD_C1_PIN, HKPAD_C2_PIN, HKPAD_C3_PIN};
    34a4:	8a e2       	ldi	r24, 0x2A	; 42
    34a6:	88 a7       	std	Y+40, r24	; 0x28
    34a8:	8b e2       	ldi	r24, 0x2B	; 43
    34aa:	89 a7       	std	Y+41, r24	; 0x29
    34ac:	8c e2       	ldi	r24, 0x2C	; 44
    34ae:	8a a7       	std	Y+42, r24	; 0x2a
    34b0:	8d e2       	ldi	r24, 0x2D	; 45
    34b2:	8b a7       	std	Y+43, r24	; 0x2b

	for(row_indx = 0 ; row_indx <= 3 && flag == 0; row_indx++)
    34b4:	19 8a       	std	Y+17, r1	; 0x11
    34b6:	e6 c0       	rjmp	.+460    	; 0x3684 <HKPAD_enGetPressKey+0x24e>
	{
		// Output 0 (Ground) on Row
		MDIO_voidSetPinValue(rowArr[row_indx], LOW);
    34b8:	89 89       	ldd	r24, Y+17	; 0x11
    34ba:	28 2f       	mov	r18, r24
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	ce 01       	movw	r24, r28
    34c0:	84 96       	adiw	r24, 0x24	; 36
    34c2:	fc 01       	movw	r30, r24
    34c4:	e2 0f       	add	r30, r18
    34c6:	f3 1f       	adc	r31, r19
    34c8:	80 81       	ld	r24, Z
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
		for(col_indx = 0; col_indx <= 3 && flag == 0; col_indx++)
    34d0:	18 8a       	std	Y+16, r1	; 0x10
    34d2:	c2 c0       	rjmp	.+388    	; 0x3658 <HKPAD_enGetPressKey+0x222>
		{
			MDIO_voidgetPinValue(colArr[col_indx], &Local_u8PinRead);
    34d4:	88 89       	ldd	r24, Y+16	; 0x10
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	ce 01       	movw	r24, r28
    34dc:	88 96       	adiw	r24, 0x28	; 40
    34de:	fc 01       	movw	r30, r24
    34e0:	e2 0f       	add	r30, r18
    34e2:	f3 1f       	adc	r31, r19
    34e4:	80 81       	ld	r24, Z
    34e6:	9e 01       	movw	r18, r28
    34e8:	2d 5e       	subi	r18, 0xED	; 237
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 64 10 	call	0x20c8	; 0x20c8 <MDIO_voidgetPinValue>
			if (Local_u8PinRead == HKPAD_KEY_PRESSED)
    34f2:	8b 89       	ldd	r24, Y+19	; 0x13
    34f4:	88 23       	and	r24, r24
    34f6:	09 f0       	breq	.+2      	; 0x34fa <HKPAD_enGetPressKey+0xc4>
    34f8:	ac c0       	rjmp	.+344    	; 0x3652 <HKPAD_enGetPressKey+0x21c>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a8 e4       	ldi	r26, 0x48	; 72
    3500:	b2 e4       	ldi	r27, 0x42	; 66
    3502:	8b 87       	std	Y+11, r24	; 0x0b
    3504:	9c 87       	std	Y+12, r25	; 0x0c
    3506:	ad 87       	std	Y+13, r26	; 0x0d
    3508:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350a:	6b 85       	ldd	r22, Y+11	; 0x0b
    350c:	7c 85       	ldd	r23, Y+12	; 0x0c
    350e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3510:	9e 85       	ldd	r25, Y+14	; 0x0e
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a e7       	ldi	r20, 0x7A	; 122
    3518:	55 e4       	ldi	r21, 0x45	; 69
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8f 83       	std	Y+7, r24	; 0x07
    3524:	98 87       	std	Y+8, r25	; 0x08
    3526:	a9 87       	std	Y+9, r26	; 0x09
    3528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    352a:	6f 81       	ldd	r22, Y+7	; 0x07
    352c:	78 85       	ldd	r23, Y+8	; 0x08
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	2c f4       	brge	.+10     	; 0x354c <HKPAD_enGetPressKey+0x116>
		__ticks = 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	3f c0       	rjmp	.+126    	; 0x35ca <HKPAD_enGetPressKey+0x194>
	else if (__tmp > 65535)
    354c:	6f 81       	ldd	r22, Y+7	; 0x07
    354e:	78 85       	ldd	r23, Y+8	; 0x08
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	3f ef       	ldi	r19, 0xFF	; 255
    3558:	4f e7       	ldi	r20, 0x7F	; 127
    355a:	57 e4       	ldi	r21, 0x47	; 71
    355c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3560:	18 16       	cp	r1, r24
    3562:	4c f5       	brge	.+82     	; 0x35b6 <HKPAD_enGetPressKey+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3564:	6b 85       	ldd	r22, Y+11	; 0x0b
    3566:	7c 85       	ldd	r23, Y+12	; 0x0c
    3568:	8d 85       	ldd	r24, Y+13	; 0x0d
    356a:	9e 85       	ldd	r25, Y+14	; 0x0e
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e2       	ldi	r20, 0x20	; 32
    3572:	51 e4       	ldi	r21, 0x41	; 65
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9e 83       	std	Y+6, r25	; 0x06
    358a:	8d 83       	std	Y+5, r24	; 0x05
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <HKPAD_enGetPressKey+0x176>
    358e:	80 e9       	ldi	r24, 0x90	; 144
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	9c 83       	std	Y+4, r25	; 0x04
    3594:	8b 83       	std	Y+3, r24	; 0x03
    3596:	8b 81       	ldd	r24, Y+3	; 0x03
    3598:	9c 81       	ldd	r25, Y+4	; 0x04
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <HKPAD_enGetPressKey+0x164>
    359e:	9c 83       	std	Y+4, r25	; 0x04
    35a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	69 f7       	brne	.-38     	; 0x358e <HKPAD_enGetPressKey+0x158>
    35b4:	14 c0       	rjmp	.+40     	; 0x35de <HKPAD_enGetPressKey+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <HKPAD_enGetPressKey+0x1a0>
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				MDIO_voidgetPinValue(colArr[col_indx], &Local_u8PinRead);
    35de:	88 89       	ldd	r24, Y+16	; 0x10
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	ce 01       	movw	r24, r28
    35e6:	88 96       	adiw	r24, 0x28	; 40
    35e8:	fc 01       	movw	r30, r24
    35ea:	e2 0f       	add	r30, r18
    35ec:	f3 1f       	adc	r31, r19
    35ee:	80 81       	ld	r24, Z
    35f0:	9e 01       	movw	r18, r28
    35f2:	2d 5e       	subi	r18, 0xED	; 237
    35f4:	3f 4f       	sbci	r19, 0xFF	; 255
    35f6:	b9 01       	movw	r22, r18
    35f8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <MDIO_voidgetPinValue>
				if (Local_u8PinRead == HKPAD_KEY_PRESSED)
    35fc:	8b 89       	ldd	r24, Y+19	; 0x13
    35fe:	88 23       	and	r24, r24
    3600:	41 f5       	brne	.+80     	; 0x3652 <HKPAD_enGetPressKey+0x21c>
				{
					if (Local_u8PinRead == HKPAD_KEY_PRESSED)
    3602:	8b 89       	ldd	r24, Y+19	; 0x13
    3604:	88 23       	and	r24, r24
    3606:	79 f4       	brne	.+30     	; 0x3626 <HKPAD_enGetPressKey+0x1f0>
					{
						MDIO_voidgetPinValue(colArr[col_indx], &Local_u8PinRead);
    3608:	88 89       	ldd	r24, Y+16	; 0x10
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	ce 01       	movw	r24, r28
    3610:	88 96       	adiw	r24, 0x28	; 40
    3612:	fc 01       	movw	r30, r24
    3614:	e2 0f       	add	r30, r18
    3616:	f3 1f       	adc	r31, r19
    3618:	80 81       	ld	r24, Z
    361a:	9e 01       	movw	r18, r28
    361c:	2d 5e       	subi	r18, 0xED	; 237
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	b9 01       	movw	r22, r18
    3622:	0e 94 64 10 	call	0x20c8	; 0x20c8 <MDIO_voidgetPinValue>

					}
					Local_u8PressedKey = Local_u8ArrKeys[row_indx][col_indx];
    3626:	89 89       	ldd	r24, Y+17	; 0x11
    3628:	28 2f       	mov	r18, r24
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	88 89       	ldd	r24, Y+16	; 0x10
    362e:	48 2f       	mov	r20, r24
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	22 0f       	add	r18, r18
    3634:	33 1f       	adc	r19, r19
    3636:	22 0f       	add	r18, r18
    3638:	33 1f       	adc	r19, r19
    363a:	ce 01       	movw	r24, r28
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	82 0f       	add	r24, r18
    3640:	93 1f       	adc	r25, r19
    3642:	84 0f       	add	r24, r20
    3644:	95 1f       	adc	r25, r21
    3646:	fc 01       	movw	r30, r24
    3648:	73 96       	adiw	r30, 0x13	; 19
    364a:	80 81       	ld	r24, Z
    364c:	8a 8b       	std	Y+18, r24	; 0x12
					flag = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	8f 87       	std	Y+15, r24	; 0x0f

	for(row_indx = 0 ; row_indx <= 3 && flag == 0; row_indx++)
	{
		// Output 0 (Ground) on Row
		MDIO_voidSetPinValue(rowArr[row_indx], LOW);
		for(col_indx = 0; col_indx <= 3 && flag == 0; col_indx++)
    3652:	88 89       	ldd	r24, Y+16	; 0x10
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	88 8b       	std	Y+16, r24	; 0x10
    3658:	88 89       	ldd	r24, Y+16	; 0x10
    365a:	84 30       	cpi	r24, 0x04	; 4
    365c:	20 f4       	brcc	.+8      	; 0x3666 <HKPAD_enGetPressKey+0x230>
    365e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3660:	88 23       	and	r24, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <HKPAD_enGetPressKey+0x230>
    3664:	37 cf       	rjmp	.-402    	; 0x34d4 <HKPAD_enGetPressKey+0x9e>

			}
		}

		// Output 1 (High) on Row (Deactivate)
		MDIO_voidSetPinValue(rowArr[row_indx], HIGH);
    3666:	89 89       	ldd	r24, Y+17	; 0x11
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	ce 01       	movw	r24, r28
    366e:	84 96       	adiw	r24, 0x24	; 36
    3670:	fc 01       	movw	r30, r24
    3672:	e2 0f       	add	r30, r18
    3674:	f3 1f       	adc	r31, r19
    3676:	80 81       	ld	r24, Z
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>

	u8 Local_u8ArrKeys[4][4] = HKYPAD_KEYS;
	u8 rowArr[] = {HKPAD_R0_PIN, HKPAD_R1_PIN, HKPAD_R2_PIN, HKPAD_R3_PIN};
	u8 colArr[] = {HKPAD_C0_PIN, HKPAD_C1_PIN, HKPAD_C2_PIN, HKPAD_C3_PIN};

	for(row_indx = 0 ; row_indx <= 3 && flag == 0; row_indx++)
    367e:	89 89       	ldd	r24, Y+17	; 0x11
    3680:	8f 5f       	subi	r24, 0xFF	; 255
    3682:	89 8b       	std	Y+17, r24	; 0x11
    3684:	89 89       	ldd	r24, Y+17	; 0x11
    3686:	84 30       	cpi	r24, 0x04	; 4
    3688:	20 f4       	brcc	.+8      	; 0x3692 <HKPAD_enGetPressKey+0x25c>
    368a:	8f 85       	ldd	r24, Y+15	; 0x0f
    368c:	88 23       	and	r24, r24
    368e:	09 f4       	brne	.+2      	; 0x3692 <HKPAD_enGetPressKey+0x25c>
    3690:	13 cf       	rjmp	.-474    	; 0x34b8 <HKPAD_enGetPressKey+0x82>
		}

		// Output 1 (High) on Row (Deactivate)
		MDIO_voidSetPinValue(rowArr[row_indx], HIGH);
	}
	*ptrKey = Local_u8PressedKey;
    3692:	ec a5       	ldd	r30, Y+44	; 0x2c
    3694:	fd a5       	ldd	r31, Y+45	; 0x2d
    3696:	8a 89       	ldd	r24, Y+18	; 0x12
    3698:	80 83       	st	Z, r24
	return SUCCESS;
    369a:	82 e0       	ldi	r24, 0x02	; 2
}
    369c:	e2 96       	adiw	r28, 0x32	; 50
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <HEEPROM_enInit>:
#include "HEEPROM_priv.h"
#include "HEEPROM_config.h"
#include "HEEPROM_int.h"

ErrorState_t HEEPROM_enInit()
{
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
	MIIC_enInit();
    36b6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <MIIC_enInit>

	return SUCCESS;
    36ba:	82 e0       	ldi	r24, 0x02	; 2
}
    36bc:	cf 91       	pop	r28
    36be:	df 91       	pop	r29
    36c0:	08 95       	ret

000036c2 <HEEPROM_enWriteByte>:

ErrorState_t HEEPROM_enWriteByte(u16 copy_u16Address, u8 copy_u8Byte)
{
    36c2:	df 93       	push	r29
    36c4:	cf 93       	push	r28
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <HEEPROM_enWriteByte+0x6>
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <HEEPROM_enWriteByte+0x8>
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <HEEPROM_enWriteByte+0xa>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	8b 83       	std	Y+3, r24	; 0x03
    36d4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Status;

	// Send Start
	MIIC_enSendStart();
    36d6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <MIIC_enSendStart>

	// Check Status
	MIIC_enReadStatus(&Status);
    36da:	ce 01       	movw	r24, r28
    36dc:	02 96       	adiw	r24, 0x02	; 2
    36de:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if(Status != MTWI_MR_START_SUCCESS)
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	88 30       	cpi	r24, 0x08	; 8
    36e6:	19 f0       	breq	.+6      	; 0x36ee <HEEPROM_enWriteByte+0x2c>
	{
		return FALIUR;
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	8e 83       	std	Y+6, r24	; 0x06
    36ec:	2d c0       	rjmp	.+90     	; 0x3748 <HEEPROM_enWriteByte+0x86>
	}

	// Send Address 1010 + A10 A9 A8 + W
	u8 _3MSB = (u8) (copy_u16Address & 0x0700) >> 7;
    36ee:	19 82       	std	Y+1, r1	; 0x01
	MIIC_enSendByte(_3MSB | 0xA0);
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	80 6a       	ori	r24, 0xA0	; 160
    36f4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    36f8:	ce 01       	movw	r24, r28
    36fa:	02 96       	adiw	r24, 0x02	; 2
    36fc:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MT_SLA_W_ACK)
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	88 31       	cpi	r24, 0x18	; 24
    3704:	19 f0       	breq	.+6      	; 0x370c <HEEPROM_enWriteByte+0x4a>
	{
		return FALIUR;
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	8e 83       	std	Y+6, r24	; 0x06
    370a:	1e c0       	rjmp	.+60     	; 0x3748 <HEEPROM_enWriteByte+0x86>
	}

	// Send Rest of Byte Address as Data A7 .... A0
	MIIC_enSendByte((u8) copy_u16Address);
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    3712:	ce 01       	movw	r24, r28
    3714:	02 96       	adiw	r24, 0x02	; 2
    3716:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MT_DATA_ACK)
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	88 32       	cpi	r24, 0x28	; 40
    371e:	19 f0       	breq	.+6      	; 0x3726 <HEEPROM_enWriteByte+0x64>
	{
		return FALIUR;
    3720:	83 e0       	ldi	r24, 0x03	; 3
    3722:	8e 83       	std	Y+6, r24	; 0x06
    3724:	11 c0       	rjmp	.+34     	; 0x3748 <HEEPROM_enWriteByte+0x86>
	}

	// Send Byte to be Written
	MIIC_enSendByte(copy_u8Byte);
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    372c:	ce 01       	movw	r24, r28
    372e:	02 96       	adiw	r24, 0x02	; 2
    3730:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MT_DATA_ACK)
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	88 32       	cpi	r24, 0x28	; 40
    3738:	19 f0       	breq	.+6      	; 0x3740 <HEEPROM_enWriteByte+0x7e>
	{
		return FALIUR;
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	8e 83       	std	Y+6, r24	; 0x06
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <HEEPROM_enWriteByte+0x86>
	}

	// Send Stop
	MIIC_enSendStop();
    3740:	0e 94 90 0b 	call	0x1720	; 0x1720 <MIIC_enSendStop>

	return SUCCESS;
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	8e 83       	std	Y+6, r24	; 0x06
    3748:	8e 81       	ldd	r24, Y+6	; 0x06
}
    374a:	26 96       	adiw	r28, 0x06	; 6
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <HEEPROM_enReadByte>:

ErrorState_t HEEPROM_enReadByte(u16 copy_u16Address, u8 *ptrData)
{
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	27 97       	sbiw	r28, 0x07	; 7
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	9c 83       	std	Y+4, r25	; 0x04
    3772:	8b 83       	std	Y+3, r24	; 0x03
    3774:	7e 83       	std	Y+6, r23	; 0x06
    3776:	6d 83       	std	Y+5, r22	; 0x05
	u8 Status;

	// Send Start
	MIIC_enSendStart();
    3778:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <MIIC_enSendStart>

	// Check Status
	MIIC_enReadStatus(&Status);
    377c:	ce 01       	movw	r24, r28
    377e:	02 96       	adiw	r24, 0x02	; 2
    3780:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MR_START_SUCCESS)
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	88 30       	cpi	r24, 0x08	; 8
    3788:	19 f0       	breq	.+6      	; 0x3790 <HEEPROM_enReadByte+0x34>
	{
		return FALIUR;
    378a:	83 e0       	ldi	r24, 0x03	; 3
    378c:	8f 83       	std	Y+7, r24	; 0x07
    378e:	47 c0       	rjmp	.+142    	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Send Address 1010 + A10 A9 A8 + W
	u8 _3MSB = (u8) (copy_u16Address & 0x0700) >> 7;
    3790:	19 82       	std	Y+1, r1	; 0x01
	MIIC_enSendByte(_3MSB | 0xA0);
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	80 6a       	ori	r24, 0xA0	; 160
    3796:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    379a:	ce 01       	movw	r24, r28
    379c:	02 96       	adiw	r24, 0x02	; 2
    379e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MT_SLA_W_ACK)
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	88 31       	cpi	r24, 0x18	; 24
    37a6:	19 f0       	breq	.+6      	; 0x37ae <HEEPROM_enReadByte+0x52>
	{
		return FALIUR;
    37a8:	83 e0       	ldi	r24, 0x03	; 3
    37aa:	8f 83       	std	Y+7, r24	; 0x07
    37ac:	38 c0       	rjmp	.+112    	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Send Rest of Byte Address as Data A7 .... A0
	MIIC_enSendByte((u8) copy_u16Address);
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    37b4:	ce 01       	movw	r24, r28
    37b6:	02 96       	adiw	r24, 0x02	; 2
    37b8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MT_DATA_ACK)
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	88 32       	cpi	r24, 0x28	; 40
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <HEEPROM_enReadByte+0x6c>
	{
		return FALIUR;
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	8f 83       	std	Y+7, r24	; 0x07
    37c6:	2b c0       	rjmp	.+86     	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Send Repeated
	MIIC_enSendStart();
    37c8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <MIIC_enSendStart>

	// Check Status
	MIIC_enReadStatus(&Status);
    37cc:	ce 01       	movw	r24, r28
    37ce:	02 96       	adiw	r24, 0x02	; 2
    37d0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if(Status != MTWI_MR_REPEATED_START_SUCCESS)
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	80 31       	cpi	r24, 0x10	; 16
    37d8:	19 f0       	breq	.+6      	; 0x37e0 <HEEPROM_enReadByte+0x84>
	{
		return FALIUR;
    37da:	83 e0       	ldi	r24, 0x03	; 3
    37dc:	8f 83       	std	Y+7, r24	; 0x07
    37de:	1f c0       	rjmp	.+62     	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Send Address 1010 + 000 + R
	MIIC_enSendByte(0xA0 | 0x01);
    37e0:	81 ea       	ldi	r24, 0xA1	; 161
    37e2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <MIIC_enSendByte>

	// Check Status
	MIIC_enReadStatus(&Status);
    37e6:	ce 01       	movw	r24, r28
    37e8:	02 96       	adiw	r24, 0x02	; 2
    37ea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if(Status != MTWI_MR_SLA_R_ACK)
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	80 34       	cpi	r24, 0x40	; 64
    37f2:	19 f0       	breq	.+6      	; 0x37fa <HEEPROM_enReadByte+0x9e>
	{
		return FALIUR;
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	8f 83       	std	Y+7, r24	; 0x07
    37f8:	12 c0       	rjmp	.+36     	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Read
	MIIC_enReceiverByteACK(ptrData);
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	0e 94 b4 0b 	call	0x1768	; 0x1768 <MIIC_enReceiverByteACK>

	// Check Status
	MIIC_enReadStatus(&Status);
    3802:	ce 01       	movw	r24, r28
    3804:	02 96       	adiw	r24, 0x02	; 2
    3806:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <MIIC_enReadStatus>
	if (Status != MTWI_MR_DATA_ACK)
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	80 35       	cpi	r24, 0x50	; 80
    380e:	19 f0       	breq	.+6      	; 0x3816 <HEEPROM_enReadByte+0xba>
	{
		return FALIUR;
    3810:	83 e0       	ldi	r24, 0x03	; 3
    3812:	8f 83       	std	Y+7, r24	; 0x07
    3814:	04 c0       	rjmp	.+8      	; 0x381e <HEEPROM_enReadByte+0xc2>
	}

	// Send Stop
	MIIC_enSendStop();
    3816:	0e 94 90 0b 	call	0x1720	; 0x1720 <MIIC_enSendStop>

	return SUCCESS;
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	8f 83       	std	Y+7, r24	; 0x07
    381e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3820:	27 96       	adiw	r28, 0x07	; 7
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <HDCMOTOR_enInit>:
#include "HDCMOTOR_config.h"
#include "HDCMOTOR_init.h"


ErrorState_t HDCMOTOR_enInit(void)
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	0f 92       	push	r0
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
	MDIO_setPinDirection(HDCMOTOR_PIN0, OUTPUT);
    383c:	81 e2       	ldi	r24, 0x21	; 33
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(HDCMOTOR_PIN1, OUTPUT);
    3844:	82 e2       	ldi	r24, 0x22	; 34
    3846:	61 e0       	ldi	r22, 0x01	; 1
    3848:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
}
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <HDCMOTOR_enOFF>:

ErrorState_t HDCMOTOR_enOFF(void)
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HDCMOTOR_PIN0, LOW);
    385e:	81 e2       	ldi	r24, 0x21	; 33
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HDCMOTOR_PIN1, LOW);
    3866:	82 e2       	ldi	r24, 0x22	; 34
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
}
    386e:	0f 90       	pop	r0
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <HDCMOTOR_enCLK_Wise>:

ErrorState_t HDCMOTOR_enCLK_Wise(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	0f 92       	push	r0
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HDCMOTOR_PIN0, LOW);
    3880:	81 e2       	ldi	r24, 0x21	; 33
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HDCMOTOR_PIN1, HIGH);
    3888:	82 e2       	ldi	r24, 0x22	; 34
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
}
    3890:	0f 90       	pop	r0
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <HDCMOTOR_enCLK_Anti_Wise>:

ErrorState_t HDCMOTOR_enCLK_Anti_Wise(void)
{
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	0f 92       	push	r0
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HDCMOTOR_PIN0, HIGH);
    38a2:	81 e2       	ldi	r24, 0x21	; 33
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HDCMOTOR_PIN1, LOW);
    38aa:	82 e2       	ldi	r24, 0x22	; 34
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
}
    38b2:	0f 90       	pop	r0
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <main>:

void ICU_HW(void);
void OVF_INT(void);

void main(void)
{
    38ba:	af 92       	push	r10
    38bc:	bf 92       	push	r11
    38be:	cf 92       	push	r12
    38c0:	df 92       	push	r13
    38c2:	ef 92       	push	r14
    38c4:	ff 92       	push	r15
    38c6:	0f 93       	push	r16
    38c8:	1f 93       	push	r17
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	c8 5b       	subi	r28, 0xB8	; 184
    38d4:	d0 40       	sbci	r29, 0x00	; 0
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
	HLCD_enInit();
    38e0:	0e 94 bd 14 	call	0x297a	; 0x297a <HLCD_enInit>
	HKPAD_enInit();
    38e4:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <HKPAD_enInit>
	HEEPROM_enInit();
    38e8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <HEEPROM_enInit>
	HLED_enInit(HLED_GRN_ID);
    38ec:	83 e0       	ldi	r24, 0x03	; 3
    38ee:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <HLED_enInit>
	HRELAY_enInit();
    38f2:	0e 94 31 13 	call	0x2662	; 0x2662 <HRELAY_enInit>
	HTEMPREATURE_enInit();
    38f6:	0e 94 e6 12 	call	0x25cc	; 0x25cc <HTEMPREATURE_enInit>
	HDCMOTOR_enInit();
    38fa:	0e 94 19 1c 	call	0x3832	; 0x3832 <HDCMOTOR_enInit>

	// UltraSonic Sector

	MDIO_setPinDirection(PD6, INPUT);
    38fe:	8e e2       	ldi	r24, 0x2E	; 46
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>
	MDIO_setPinDirection(PC5, OUTPUT);
    3906:	83 e2       	ldi	r24, 0x23	; 35
    3908:	61 e0       	ldi	r22, 0x01	; 1
    390a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <MDIO_setPinDirection>

	MTIMER0_enInit();
    390e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MTIMER0_enInit>
	MTIMER0_enPhaseCorrectPWM(0);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <MTIMER0_enPhaseCorrectPWM>
	MTIMER0_enStart();
    3918:	0e 94 19 09 	call	0x1232	; 0x1232 <MTIMER0_enStart>

	MTIMER1_enInit();
    391c:	0e 94 63 07 	call	0xec6	; 0xec6 <MTIMER1_enInit>
	MTIMER1_ICU_enInit();
    3920:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <MTIMER1_ICU_enInit>
	MTIMER1_ICU_enEnableInt();
    3924:	0e 94 ff 07 	call	0xffe	; 0xffe <MTIMER1_ICU_enEnableInt>
	MTIMER1_ICU_enSetCallBack(ICU_HW);
    3928:	88 e2       	ldi	r24, 0x28	; 40
    392a:	95 e2       	ldi	r25, 0x25	; 37
    392c:	0e 94 1f 08 	call	0x103e	; 0x103e <MTIMER1_ICU_enSetCallBack>

	MTIMER1_enSetCallBack(OVF_INT);
    3930:	80 e6       	ldi	r24, 0x60	; 96
    3932:	95 e2       	ldi	r25, 0x25	; 37
    3934:	0e 94 af 07 	call	0xf5e	; 0xf5e <MTIMER1_enSetCallBack>

	MTIMER1_enStart();
    3938:	0e 94 88 07 	call	0xf10	; 0xf10 <MTIMER1_enStart>

	MGIE_enEnable();
    393c:	0e 94 00 0c 	call	0x1800	; 0x1800 <MGIE_enEnable>

	MDIO_voidSetPinValue(PC5, HIGH);
    3940:	83 e2       	ldi	r24, 0x23	; 35
    3942:	61 e0       	ldi	r22, 0x01	; 1
    3944:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>
    3948:	fe 01       	movw	r30, r28
    394a:	ed 56       	subi	r30, 0x6D	; 109
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a0 e2       	ldi	r26, 0x20	; 32
    3954:	b1 e4       	ldi	r27, 0x41	; 65
    3956:	80 83       	st	Z, r24
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	a2 83       	std	Z+2, r26	; 0x02
    395c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    395e:	8e 01       	movw	r16, r28
    3960:	01 57       	subi	r16, 0x71	; 113
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	fe 01       	movw	r30, r28
    3966:	ed 56       	subi	r30, 0x6D	; 109
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	60 81       	ld	r22, Z
    396c:	71 81       	ldd	r23, Z+1	; 0x01
    396e:	82 81       	ldd	r24, Z+2	; 0x02
    3970:	93 81       	ldd	r25, Z+3	; 0x03
    3972:	2b ea       	ldi	r18, 0xAB	; 171
    3974:	3a ea       	ldi	r19, 0xAA	; 170
    3976:	4a ea       	ldi	r20, 0xAA	; 170
    3978:	50 e4       	ldi	r21, 0x40	; 64
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	f8 01       	movw	r30, r16
    3984:	80 83       	st	Z, r24
    3986:	91 83       	std	Z+1, r25	; 0x01
    3988:	a2 83       	std	Z+2, r26	; 0x02
    398a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    398c:	fe 01       	movw	r30, r28
    398e:	e1 57       	subi	r30, 0x71	; 113
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	60 81       	ld	r22, Z
    3994:	71 81       	ldd	r23, Z+1	; 0x01
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e8       	ldi	r20, 0x80	; 128
    39a0:	5f e3       	ldi	r21, 0x3F	; 63
    39a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a6:	88 23       	and	r24, r24
    39a8:	34 f4       	brge	.+12     	; 0x39b6 <main+0xfc>
		__ticks = 1;
    39aa:	fe 01       	movw	r30, r28
    39ac:	e2 57       	subi	r30, 0x72	; 114
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	80 83       	st	Z, r24
    39b4:	e0 c0       	rjmp	.+448    	; 0x3b76 <main+0x2bc>
	else if (__tmp > 255)
    39b6:	fe 01       	movw	r30, r28
    39b8:	e1 57       	subi	r30, 0x71	; 113
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	60 81       	ld	r22, Z
    39be:	71 81       	ldd	r23, Z+1	; 0x01
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	93 81       	ldd	r25, Z+3	; 0x03
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	4f e7       	ldi	r20, 0x7F	; 127
    39ca:	53 e4       	ldi	r21, 0x43	; 67
    39cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d0:	18 16       	cp	r1, r24
    39d2:	0c f0       	brlt	.+2      	; 0x39d6 <main+0x11c>
    39d4:	c0 c0       	rjmp	.+384    	; 0x3b56 <main+0x29c>
	{
		_delay_ms(__us / 1000.0);
    39d6:	fe 01       	movw	r30, r28
    39d8:	ed 56       	subi	r30, 0x6D	; 109
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	4a e7       	ldi	r20, 0x7A	; 122
    39ea:	54 e4       	ldi	r21, 0x44	; 68
    39ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	fe 01       	movw	r30, r28
    39f6:	e6 57       	subi	r30, 0x76	; 118
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 83       	st	Z, r24
    39fc:	91 83       	std	Z+1, r25	; 0x01
    39fe:	a2 83       	std	Z+2, r26	; 0x02
    3a00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a02:	8e 01       	movw	r16, r28
    3a04:	0a 57       	subi	r16, 0x7A	; 122
    3a06:	1f 4f       	sbci	r17, 0xFF	; 255
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e6 57       	subi	r30, 0x76	; 118
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	60 81       	ld	r22, Z
    3a10:	71 81       	ldd	r23, Z+1	; 0x01
    3a12:	82 81       	ldd	r24, Z+2	; 0x02
    3a14:	93 81       	ldd	r25, Z+3	; 0x03
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	4a e7       	ldi	r20, 0x7A	; 122
    3a1c:	55 e4       	ldi	r21, 0x45	; 69
    3a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	f8 01       	movw	r30, r16
    3a28:	80 83       	st	Z, r24
    3a2a:	91 83       	std	Z+1, r25	; 0x01
    3a2c:	a2 83       	std	Z+2, r26	; 0x02
    3a2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a30:	fe 01       	movw	r30, r28
    3a32:	ea 57       	subi	r30, 0x7A	; 122
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	60 81       	ld	r22, Z
    3a38:	71 81       	ldd	r23, Z+1	; 0x01
    3a3a:	82 81       	ldd	r24, Z+2	; 0x02
    3a3c:	93 81       	ldd	r25, Z+3	; 0x03
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e8       	ldi	r20, 0x80	; 128
    3a44:	5f e3       	ldi	r21, 0x3F	; 63
    3a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4a:	88 23       	and	r24, r24
    3a4c:	44 f4       	brge	.+16     	; 0x3a5e <main+0x1a4>
		__ticks = 1;
    3a4e:	fe 01       	movw	r30, r28
    3a50:	ec 57       	subi	r30, 0x7C	; 124
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	80 83       	st	Z, r24
    3a5c:	64 c0       	rjmp	.+200    	; 0x3b26 <main+0x26c>
	else if (__tmp > 65535)
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ea 57       	subi	r30, 0x7A	; 122
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	60 81       	ld	r22, Z
    3a66:	71 81       	ldd	r23, Z+1	; 0x01
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	3f ef       	ldi	r19, 0xFF	; 255
    3a70:	4f e7       	ldi	r20, 0x7F	; 127
    3a72:	57 e4       	ldi	r21, 0x47	; 71
    3a74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a78:	18 16       	cp	r1, r24
    3a7a:	0c f0       	brlt	.+2      	; 0x3a7e <main+0x1c4>
    3a7c:	43 c0       	rjmp	.+134    	; 0x3b04 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e6 57       	subi	r30, 0x76	; 118
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8e 01       	movw	r16, r28
    3a9e:	0c 57       	subi	r16, 0x7C	; 124
    3aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	f8 01       	movw	r30, r16
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    3ab4:	1f c0       	rjmp	.+62     	; 0x3af4 <main+0x23a>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ee 57       	subi	r30, 0x7E	; 126
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 e9       	ldi	r24, 0x90	; 144
    3abe:	91 e0       	ldi	r25, 0x01	; 1
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	ee 57       	subi	r30, 0x7E	; 126
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	80 81       	ld	r24, Z
    3acc:	91 81       	ldd	r25, Z+1	; 0x01
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <main+0x214>
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ee 57       	subi	r30, 0x7E	; 126
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	91 83       	std	Z+1, r25	; 0x01
    3ada:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3adc:	de 01       	movw	r26, r28
    3ade:	ac 57       	subi	r26, 0x7C	; 124
    3ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	ec 57       	subi	r30, 0x7C	; 124
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	80 81       	ld	r24, Z
    3aea:	91 81       	ldd	r25, Z+1	; 0x01
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	11 96       	adiw	r26, 0x01	; 1
    3af0:	9c 93       	st	X, r25
    3af2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	fe 01       	movw	r30, r28
    3af6:	ec 57       	subi	r30, 0x7C	; 124
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	d1 f6       	brne	.-76     	; 0x3ab6 <main+0x1fc>
    3b02:	4b c0       	rjmp	.+150    	; 0x3b9a <main+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b04:	8e 01       	movw	r16, r28
    3b06:	0c 57       	subi	r16, 0x7C	; 124
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	ea 57       	subi	r30, 0x7A	; 122
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	60 81       	ld	r22, Z
    3b12:	71 81       	ldd	r23, Z+1	; 0x01
    3b14:	82 81       	ldd	r24, Z+2	; 0x02
    3b16:	93 81       	ldd	r25, Z+3	; 0x03
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	f8 01       	movw	r30, r16
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	de 01       	movw	r26, r28
    3b28:	a0 58       	subi	r26, 0x80	; 128
    3b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	ec 57       	subi	r30, 0x7C	; 124
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	11 96       	adiw	r26, 0x01	; 1
    3b38:	9c 93       	st	X, r25
    3b3a:	8e 93       	st	-X, r24
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e0 58       	subi	r30, 0x80	; 128
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <main+0x28c>
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e0 58       	subi	r30, 0x80	; 128
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	22 c0       	rjmp	.+68     	; 0x3b9a <main+0x2e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b56:	8e 01       	movw	r16, r28
    3b58:	02 57       	subi	r16, 0x72	; 114
    3b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e1 57       	subi	r30, 0x71	; 113
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	60 81       	ld	r22, Z
    3b64:	71 81       	ldd	r23, Z+1	; 0x01
    3b66:	82 81       	ldd	r24, Z+2	; 0x02
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	f8 01       	movw	r30, r16
    3b74:	80 83       	st	Z, r24
    3b76:	de 01       	movw	r26, r28
    3b78:	a1 58       	subi	r26, 0x81	; 129
    3b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e2 57       	subi	r30, 0x72	; 114
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b86:	fe 01       	movw	r30, r28
    3b88:	e1 58       	subi	r30, 0x81	; 129
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	80 81       	ld	r24, Z
    3b8e:	8a 95       	dec	r24
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <main+0x2d4>
    3b92:	fe 01       	movw	r30, r28
    3b94:	e1 58       	subi	r30, 0x81	; 129
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 83       	st	Z, r24
	_delay_us(10);
	MDIO_voidSetPinValue(PC5, LOW);
    3b9a:	83 e2       	ldi	r24, 0x23	; 35
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <MDIO_voidSetPinValue>

	while (g_State != STATE3);
    3ba2:	80 91 83 01 	lds	r24, 0x0183
    3ba6:	83 30       	cpi	r24, 0x03	; 3
    3ba8:	e1 f7       	brne	.-8      	; 0x3ba2 <main+0x2e8>

	u32 TimeTicks = ((u32) g_Reading2 + ((u32) g_Reading2_Y * MAX_LEN)) - ((u32) g_Reading1 + ((u32) g_Reading1_X * MAX_LEN));
    3baa:	80 91 cd 01 	lds	r24, 0x01CD
    3bae:	90 91 ce 01 	lds	r25, 0x01CE
    3bb2:	7c 01       	movw	r14, r24
    3bb4:	00 e0       	ldi	r16, 0x00	; 0
    3bb6:	10 e0       	ldi	r17, 0x00	; 0
    3bb8:	80 91 d1 01 	lds	r24, 0x01D1
    3bbc:	90 91 d2 01 	lds	r25, 0x01D2
    3bc0:	cc 01       	movw	r24, r24
    3bc2:	a0 e0       	ldi	r26, 0x00	; 0
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	29 e4       	ldi	r18, 0x49	; 73
    3bc8:	3f ef       	ldi	r19, 0xFF	; 255
    3bca:	40 e0       	ldi	r20, 0x00	; 0
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__mulsi3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	57 01       	movw	r10, r14
    3bdc:	68 01       	movw	r12, r16
    3bde:	a8 0e       	add	r10, r24
    3be0:	b9 1e       	adc	r11, r25
    3be2:	ca 1e       	adc	r12, r26
    3be4:	db 1e       	adc	r13, r27
    3be6:	80 91 cb 01 	lds	r24, 0x01CB
    3bea:	90 91 cc 01 	lds	r25, 0x01CC
    3bee:	7c 01       	movw	r14, r24
    3bf0:	00 e0       	ldi	r16, 0x00	; 0
    3bf2:	10 e0       	ldi	r17, 0x00	; 0
    3bf4:	80 91 cf 01 	lds	r24, 0x01CF
    3bf8:	90 91 d0 01 	lds	r25, 0x01D0
    3bfc:	cc 01       	movw	r24, r24
    3bfe:	a0 e0       	ldi	r26, 0x00	; 0
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	29 e4       	ldi	r18, 0x49	; 73
    3c04:	3f ef       	ldi	r19, 0xFF	; 255
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <__mulsi3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	8e 0d       	add	r24, r14
    3c18:	9f 1d       	adc	r25, r15
    3c1a:	a0 1f       	adc	r26, r16
    3c1c:	b1 1f       	adc	r27, r17
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ea 55       	subi	r30, 0x5A	; 90
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	a6 01       	movw	r20, r12
    3c26:	95 01       	movw	r18, r10
    3c28:	28 1b       	sub	r18, r24
    3c2a:	39 0b       	sbc	r19, r25
    3c2c:	4a 0b       	sbc	r20, r26
    3c2e:	5b 0b       	sbc	r21, r27
    3c30:	da 01       	movw	r26, r20
    3c32:	c9 01       	movw	r24, r18
    3c34:	80 83       	st	Z, r24
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	a2 83       	std	Z+2, r26	; 0x02
    3c3a:	b3 83       	std	Z+3, r27	; 0x03
	TimeTicks = g_Reading2 - g_Reading1;
    3c3c:	20 91 cd 01 	lds	r18, 0x01CD
    3c40:	30 91 ce 01 	lds	r19, 0x01CE
    3c44:	80 91 cb 01 	lds	r24, 0x01CB
    3c48:	90 91 cc 01 	lds	r25, 0x01CC
    3c4c:	a9 01       	movw	r20, r18
    3c4e:	48 1b       	sub	r20, r24
    3c50:	59 0b       	sbc	r21, r25
    3c52:	ca 01       	movw	r24, r20
    3c54:	fe 01       	movw	r30, r28
    3c56:	ea 55       	subi	r30, 0x5A	; 90
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	cc 01       	movw	r24, r24
    3c5c:	a0 e0       	ldi	r26, 0x00	; 0
    3c5e:	b0 e0       	ldi	r27, 0x00	; 0
    3c60:	80 83       	st	Z, r24
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	a2 83       	std	Z+2, r26	; 0x02
    3c66:	b3 83       	std	Z+3, r27	; 0x03
	f32 TickTime = 1024 / 16; // Micro Sec
    3c68:	fe 01       	movw	r30, r28
    3c6a:	ee 55       	subi	r30, 0x5E	; 94
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a0 e8       	ldi	r26, 0x80	; 128
    3c74:	b2 e4       	ldi	r27, 0x42	; 66
    3c76:	80 83       	st	Z, r24
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	a2 83       	std	Z+2, r26	; 0x02
    3c7c:	b3 83       	std	Z+3, r27	; 0x03
	f32 Time = (TimeTicks * TickTime) / 1000000.0;
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ea 55       	subi	r30, 0x5A	; 90
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	fe 01       	movw	r30, r28
    3c96:	ee 55       	subi	r30, 0x5E	; 94
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	20 81       	ld	r18, Z
    3ca0:	31 81       	ldd	r19, Z+1	; 0x01
    3ca2:	42 81       	ldd	r20, Z+2	; 0x02
    3ca4:	53 81       	ldd	r21, Z+3	; 0x03
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8e 01       	movw	r16, r28
    3cb0:	02 56       	subi	r16, 0x62	; 98
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	34 e2       	ldi	r19, 0x24	; 36
    3cbc:	44 e7       	ldi	r20, 0x74	; 116
    3cbe:	59 e4       	ldi	r21, 0x49	; 73
    3cc0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	f8 01       	movw	r30, r16
    3cca:	80 83       	st	Z, r24
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	a2 83       	std	Z+2, r26	; 0x02
    3cd0:	b3 83       	std	Z+3, r27	; 0x03
	u32 Distance = ceil(34300 * (Time / 2));
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e2 56       	subi	r30, 0x62	; 98
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	60 81       	ld	r22, Z
    3cda:	71 81       	ldd	r23, Z+1	; 0x01
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	93 81       	ldd	r25, Z+3	; 0x03
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e0       	ldi	r20, 0x00	; 0
    3ce6:	50 e4       	ldi	r21, 0x40	; 64
    3ce8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	bc 01       	movw	r22, r24
    3cf2:	cd 01       	movw	r24, r26
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	3c ef       	ldi	r19, 0xFC	; 252
    3cf8:	45 e0       	ldi	r20, 0x05	; 5
    3cfa:	57 e4       	ldi	r21, 0x47	; 71
    3cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	bc 01       	movw	r22, r24
    3d06:	cd 01       	movw	r24, r26
    3d08:	0e 94 32 26 	call	0x4c64	; 0x4c64 <ceil>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	8e 01       	movw	r16, r28
    3d12:	06 56       	subi	r16, 0x66	; 102
    3d14:	1f 4f       	sbci	r17, 0xFF	; 255
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	f8 01       	movw	r30, r16
    3d24:	80 83       	st	Z, r24
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	a2 83       	std	Z+2, r26	; 0x02
    3d2a:	b3 83       	std	Z+3, r27	; 0x03

	while (g_State != STATE3);
    3d2c:	80 91 83 01 	lds	r24, 0x0183
    3d30:	83 30       	cpi	r24, 0x03	; 3
    3d32:	e1 f7       	brne	.-8      	; 0x3d2c <main+0x472>

	// Store Data in EEPROM
	u8 ReadData[4];
	u8 i;
	u8 Pass [4] = {1, 2, 3, 4};
    3d34:	fe 01       	movw	r30, r28
    3d36:	e2 55       	subi	r30, 0x52	; 82
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	80 83       	st	Z, r24
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e2 55       	subi	r30, 0x52	; 82
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	81 83       	std	Z+1, r24	; 0x01
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e2 55       	subi	r30, 0x52	; 82
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	83 e0       	ldi	r24, 0x03	; 3
    3d50:	82 83       	std	Z+2, r24	; 0x02
    3d52:	fe 01       	movw	r30, r28
    3d54:	e2 55       	subi	r30, 0x52	; 82
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	84 e0       	ldi	r24, 0x04	; 4
    3d5a:	83 83       	std	Z+3, r24	; 0x03

	for (i = 0; i <= 4; i++)
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	e7 56       	subi	r30, 0x67	; 103
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	10 82       	st	Z, r1
    3d64:	d3 c0       	rjmp	.+422    	; 0x3f0c <main+0x652>
	{
		HEEPROM_enWriteByte(i, Pass[i]);
    3d66:	fe 01       	movw	r30, r28
    3d68:	e7 56       	subi	r30, 0x67	; 103
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	80 81       	ld	r24, Z
    3d6e:	48 2f       	mov	r20, r24
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	fe 01       	movw	r30, r28
    3d74:	e7 56       	subi	r30, 0x67	; 103
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	28 2f       	mov	r18, r24
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	ce 01       	movw	r24, r28
    3d80:	82 55       	subi	r24, 0x52	; 82
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	fc 01       	movw	r30, r24
    3d86:	e2 0f       	add	r30, r18
    3d88:	f3 1f       	adc	r31, r19
    3d8a:	20 81       	ld	r18, Z
    3d8c:	ca 01       	movw	r24, r20
    3d8e:	62 2f       	mov	r22, r18
    3d90:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <HEEPROM_enWriteByte>
    3d94:	fe 01       	movw	r30, r28
    3d96:	e5 58       	subi	r30, 0x85	; 133
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	a8 ec       	ldi	r26, 0xC8	; 200
    3da0:	b2 e4       	ldi	r27, 0x42	; 66
    3da2:	80 83       	st	Z, r24
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	a2 83       	std	Z+2, r26	; 0x02
    3da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3daa:	8e 01       	movw	r16, r28
    3dac:	09 58       	subi	r16, 0x89	; 137
    3dae:	1f 4f       	sbci	r17, 0xFF	; 255
    3db0:	fe 01       	movw	r30, r28
    3db2:	e5 58       	subi	r30, 0x85	; 133
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	4a e7       	ldi	r20, 0x7A	; 122
    3dc4:	55 e4       	ldi	r21, 0x45	; 69
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	f8 01       	movw	r30, r16
    3dd0:	80 83       	st	Z, r24
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	a2 83       	std	Z+2, r26	; 0x02
    3dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e9 58       	subi	r30, 0x89	; 137
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e8       	ldi	r20, 0x80	; 128
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df2:	88 23       	and	r24, r24
    3df4:	44 f4       	brge	.+16     	; 0x3e06 <main+0x54c>
		__ticks = 1;
    3df6:	fe 01       	movw	r30, r28
    3df8:	eb 58       	subi	r30, 0x8B	; 139
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
    3e04:	64 c0       	rjmp	.+200    	; 0x3ece <main+0x614>
	else if (__tmp > 65535)
    3e06:	fe 01       	movw	r30, r28
    3e08:	e9 58       	subi	r30, 0x89	; 137
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	60 81       	ld	r22, Z
    3e0e:	71 81       	ldd	r23, Z+1	; 0x01
    3e10:	82 81       	ldd	r24, Z+2	; 0x02
    3e12:	93 81       	ldd	r25, Z+3	; 0x03
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	3f ef       	ldi	r19, 0xFF	; 255
    3e18:	4f e7       	ldi	r20, 0x7F	; 127
    3e1a:	57 e4       	ldi	r21, 0x47	; 71
    3e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e20:	18 16       	cp	r1, r24
    3e22:	0c f0       	brlt	.+2      	; 0x3e26 <main+0x56c>
    3e24:	43 c0       	rjmp	.+134    	; 0x3eac <main+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e26:	fe 01       	movw	r30, r28
    3e28:	e5 58       	subi	r30, 0x85	; 133
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	60 81       	ld	r22, Z
    3e2e:	71 81       	ldd	r23, Z+1	; 0x01
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	93 81       	ldd	r25, Z+3	; 0x03
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	51 e4       	ldi	r21, 0x41	; 65
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	8e 01       	movw	r16, r28
    3e46:	0b 58       	subi	r16, 0x8B	; 139
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	cd 01       	movw	r24, r26
    3e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	f8 01       	movw	r30, r16
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
    3e5c:	1f c0       	rjmp	.+62     	; 0x3e9c <main+0x5e2>
    3e5e:	fe 01       	movw	r30, r28
    3e60:	ed 58       	subi	r30, 0x8D	; 141
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	80 e9       	ldi	r24, 0x90	; 144
    3e66:	91 e0       	ldi	r25, 0x01	; 1
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	ed 58       	subi	r30, 0x8D	; 141
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	80 81       	ld	r24, Z
    3e74:	91 81       	ldd	r25, Z+1	; 0x01
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <main+0x5bc>
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	ed 58       	subi	r30, 0x8D	; 141
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	91 83       	std	Z+1, r25	; 0x01
    3e82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e84:	de 01       	movw	r26, r28
    3e86:	ab 58       	subi	r26, 0x8B	; 139
    3e88:	bf 4f       	sbci	r27, 0xFF	; 255
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	eb 58       	subi	r30, 0x8B	; 139
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	11 96       	adiw	r26, 0x01	; 1
    3e98:	9c 93       	st	X, r25
    3e9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	eb 58       	subi	r30, 0x8B	; 139
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	d1 f6       	brne	.-76     	; 0x3e5e <main+0x5a4>
    3eaa:	27 c0       	rjmp	.+78     	; 0x3efa <main+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	8e 01       	movw	r16, r28
    3eae:	0b 58       	subi	r16, 0x8B	; 139
    3eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e9 58       	subi	r30, 0x89	; 137
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	f8 01       	movw	r30, r16
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	de 01       	movw	r26, r28
    3ed0:	af 58       	subi	r26, 0x8F	; 143
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	eb 58       	subi	r30, 0x8B	; 139
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	8d 93       	st	X+, r24
    3ee0:	9c 93       	st	X, r25
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ef 58       	subi	r30, 0x8F	; 143
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <main+0x632>
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	ef 58       	subi	r30, 0x8F	; 143
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
	// Store Data in EEPROM
	u8 ReadData[4];
	u8 i;
	u8 Pass [4] = {1, 2, 3, 4};

	for (i = 0; i <= 4; i++)
    3efa:	de 01       	movw	r26, r28
    3efc:	a7 56       	subi	r26, 0x67	; 103
    3efe:	bf 4f       	sbci	r27, 0xFF	; 255
    3f00:	fe 01       	movw	r30, r28
    3f02:	e7 56       	subi	r30, 0x67	; 103
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	80 81       	ld	r24, Z
    3f08:	8f 5f       	subi	r24, 0xFF	; 255
    3f0a:	8c 93       	st	X, r24
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e7 56       	subi	r30, 0x67	; 103
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	80 81       	ld	r24, Z
    3f14:	85 30       	cpi	r24, 0x05	; 5
    3f16:	08 f4       	brcc	.+2      	; 0x3f1a <main+0x660>
    3f18:	26 cf       	rjmp	.-436    	; 0x3d66 <main+0x4ac>
	{
		HEEPROM_enWriteByte(i, Pass[i]);
		_delay_ms(100);
	}

	HEEPROM_enReadByte(0, &ReadData[0]);
    3f1a:	9e 01       	movw	r18, r28
    3f1c:	26 55       	subi	r18, 0x56	; 86
    3f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	b9 01       	movw	r22, r18
    3f26:	0e 94 ae 1b 	call	0x375c	; 0x375c <HEEPROM_enReadByte>
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e3 59       	subi	r30, 0x93	; 147
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	a8 ec       	ldi	r26, 0xC8	; 200
    3f36:	b2 e4       	ldi	r27, 0x42	; 66
    3f38:	80 83       	st	Z, r24
    3f3a:	91 83       	std	Z+1, r25	; 0x01
    3f3c:	a2 83       	std	Z+2, r26	; 0x02
    3f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f40:	8e 01       	movw	r16, r28
    3f42:	07 59       	subi	r16, 0x97	; 151
    3f44:	1f 4f       	sbci	r17, 0xFF	; 255
    3f46:	fe 01       	movw	r30, r28
    3f48:	e3 59       	subi	r30, 0x93	; 147
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	60 81       	ld	r22, Z
    3f4e:	71 81       	ldd	r23, Z+1	; 0x01
    3f50:	82 81       	ldd	r24, Z+2	; 0x02
    3f52:	93 81       	ldd	r25, Z+3	; 0x03
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	4a e7       	ldi	r20, 0x7A	; 122
    3f5a:	55 e4       	ldi	r21, 0x45	; 69
    3f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	f8 01       	movw	r30, r16
    3f66:	80 83       	st	Z, r24
    3f68:	91 83       	std	Z+1, r25	; 0x01
    3f6a:	a2 83       	std	Z+2, r26	; 0x02
    3f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e7 59       	subi	r30, 0x97	; 151
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e8       	ldi	r20, 0x80	; 128
    3f82:	5f e3       	ldi	r21, 0x3F	; 63
    3f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	44 f4       	brge	.+16     	; 0x3f9c <main+0x6e2>
		__ticks = 1;
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	e9 59       	subi	r30, 0x99	; 153
    3f90:	ff 4f       	sbci	r31, 0xFF	; 255
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	80 83       	st	Z, r24
    3f9a:	64 c0       	rjmp	.+200    	; 0x4064 <main+0x7aa>
	else if (__tmp > 65535)
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e7 59       	subi	r30, 0x97	; 151
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	60 81       	ld	r22, Z
    3fa4:	71 81       	ldd	r23, Z+1	; 0x01
    3fa6:	82 81       	ldd	r24, Z+2	; 0x02
    3fa8:	93 81       	ldd	r25, Z+3	; 0x03
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	3f ef       	ldi	r19, 0xFF	; 255
    3fae:	4f e7       	ldi	r20, 0x7F	; 127
    3fb0:	57 e4       	ldi	r21, 0x47	; 71
    3fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb6:	18 16       	cp	r1, r24
    3fb8:	0c f0       	brlt	.+2      	; 0x3fbc <main+0x702>
    3fba:	43 c0       	rjmp	.+134    	; 0x4042 <main+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e3 59       	subi	r30, 0x93	; 147
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	60 81       	ld	r22, Z
    3fc4:	71 81       	ldd	r23, Z+1	; 0x01
    3fc6:	82 81       	ldd	r24, Z+2	; 0x02
    3fc8:	93 81       	ldd	r25, Z+3	; 0x03
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e2       	ldi	r20, 0x20	; 32
    3fd0:	51 e4       	ldi	r21, 0x41	; 65
    3fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	8e 01       	movw	r16, r28
    3fdc:	09 59       	subi	r16, 0x99	; 153
    3fde:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe0:	bc 01       	movw	r22, r24
    3fe2:	cd 01       	movw	r24, r26
    3fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	f8 01       	movw	r30, r16
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
    3ff2:	1f c0       	rjmp	.+62     	; 0x4032 <main+0x778>
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	eb 59       	subi	r30, 0x9B	; 155
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 e9       	ldi	r24, 0x90	; 144
    3ffc:	91 e0       	ldi	r25, 0x01	; 1
    3ffe:	91 83       	std	Z+1, r25	; 0x01
    4000:	80 83       	st	Z, r24
    4002:	fe 01       	movw	r30, r28
    4004:	eb 59       	subi	r30, 0x9B	; 155
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	f1 f7       	brne	.-4      	; 0x400c <main+0x752>
    4010:	fe 01       	movw	r30, r28
    4012:	eb 59       	subi	r30, 0x9B	; 155
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401a:	de 01       	movw	r26, r28
    401c:	a9 59       	subi	r26, 0x99	; 153
    401e:	bf 4f       	sbci	r27, 0xFF	; 255
    4020:	fe 01       	movw	r30, r28
    4022:	e9 59       	subi	r30, 0x99	; 153
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	11 96       	adiw	r26, 0x01	; 1
    402e:	9c 93       	st	X, r25
    4030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4032:	fe 01       	movw	r30, r28
    4034:	e9 59       	subi	r30, 0x99	; 153
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	00 97       	sbiw	r24, 0x00	; 0
    403e:	d1 f6       	brne	.-76     	; 0x3ff4 <main+0x73a>
    4040:	27 c0       	rjmp	.+78     	; 0x4090 <main+0x7d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4042:	8e 01       	movw	r16, r28
    4044:	09 59       	subi	r16, 0x99	; 153
    4046:	1f 4f       	sbci	r17, 0xFF	; 255
    4048:	fe 01       	movw	r30, r28
    404a:	e7 59       	subi	r30, 0x97	; 151
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	60 81       	ld	r22, Z
    4050:	71 81       	ldd	r23, Z+1	; 0x01
    4052:	82 81       	ldd	r24, Z+2	; 0x02
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	f8 01       	movw	r30, r16
    4060:	91 83       	std	Z+1, r25	; 0x01
    4062:	80 83       	st	Z, r24
    4064:	de 01       	movw	r26, r28
    4066:	ad 59       	subi	r26, 0x9D	; 157
    4068:	bf 4f       	sbci	r27, 0xFF	; 255
    406a:	fe 01       	movw	r30, r28
    406c:	e9 59       	subi	r30, 0x99	; 153
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 81       	ld	r24, Z
    4072:	91 81       	ldd	r25, Z+1	; 0x01
    4074:	8d 93       	st	X+, r24
    4076:	9c 93       	st	X, r25
    4078:	fe 01       	movw	r30, r28
    407a:	ed 59       	subi	r30, 0x9D	; 157
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	80 81       	ld	r24, Z
    4080:	91 81       	ldd	r25, Z+1	; 0x01
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	f1 f7       	brne	.-4      	; 0x4082 <main+0x7c8>
    4086:	fe 01       	movw	r30, r28
    4088:	ed 59       	subi	r30, 0x9D	; 157
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	91 83       	std	Z+1, r25	; 0x01
    408e:	80 83       	st	Z, r24
	_delay_ms(100);
	HEEPROM_enReadByte(1, &ReadData[1]);
    4090:	ce 01       	movw	r24, r28
    4092:	86 55       	subi	r24, 0x56	; 86
    4094:	9f 4f       	sbci	r25, 0xFF	; 255
    4096:	9c 01       	movw	r18, r24
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	b9 01       	movw	r22, r18
    40a2:	0e 94 ae 1b 	call	0x375c	; 0x375c <HEEPROM_enReadByte>
    40a6:	fe 01       	movw	r30, r28
    40a8:	e1 5a       	subi	r30, 0xA1	; 161
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	a8 ec       	ldi	r26, 0xC8	; 200
    40b2:	b2 e4       	ldi	r27, 0x42	; 66
    40b4:	80 83       	st	Z, r24
    40b6:	91 83       	std	Z+1, r25	; 0x01
    40b8:	a2 83       	std	Z+2, r26	; 0x02
    40ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40bc:	8e 01       	movw	r16, r28
    40be:	05 5a       	subi	r16, 0xA5	; 165
    40c0:	1f 4f       	sbci	r17, 0xFF	; 255
    40c2:	fe 01       	movw	r30, r28
    40c4:	e1 5a       	subi	r30, 0xA1	; 161
    40c6:	ff 4f       	sbci	r31, 0xFF	; 255
    40c8:	60 81       	ld	r22, Z
    40ca:	71 81       	ldd	r23, Z+1	; 0x01
    40cc:	82 81       	ldd	r24, Z+2	; 0x02
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	4a e7       	ldi	r20, 0x7A	; 122
    40d6:	55 e4       	ldi	r21, 0x45	; 69
    40d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	f8 01       	movw	r30, r16
    40e2:	80 83       	st	Z, r24
    40e4:	91 83       	std	Z+1, r25	; 0x01
    40e6:	a2 83       	std	Z+2, r26	; 0x02
    40e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40ea:	fe 01       	movw	r30, r28
    40ec:	e5 5a       	subi	r30, 0xA5	; 165
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	60 81       	ld	r22, Z
    40f2:	71 81       	ldd	r23, Z+1	; 0x01
    40f4:	82 81       	ldd	r24, Z+2	; 0x02
    40f6:	93 81       	ldd	r25, Z+3	; 0x03
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	40 e8       	ldi	r20, 0x80	; 128
    40fe:	5f e3       	ldi	r21, 0x3F	; 63
    4100:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4104:	88 23       	and	r24, r24
    4106:	44 f4       	brge	.+16     	; 0x4118 <main+0x85e>
		__ticks = 1;
    4108:	fe 01       	movw	r30, r28
    410a:	e7 5a       	subi	r30, 0xA7	; 167
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	91 83       	std	Z+1, r25	; 0x01
    4114:	80 83       	st	Z, r24
    4116:	64 c0       	rjmp	.+200    	; 0x41e0 <main+0x926>
	else if (__tmp > 65535)
    4118:	fe 01       	movw	r30, r28
    411a:	e5 5a       	subi	r30, 0xA5	; 165
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	60 81       	ld	r22, Z
    4120:	71 81       	ldd	r23, Z+1	; 0x01
    4122:	82 81       	ldd	r24, Z+2	; 0x02
    4124:	93 81       	ldd	r25, Z+3	; 0x03
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	3f ef       	ldi	r19, 0xFF	; 255
    412a:	4f e7       	ldi	r20, 0x7F	; 127
    412c:	57 e4       	ldi	r21, 0x47	; 71
    412e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4132:	18 16       	cp	r1, r24
    4134:	0c f0       	brlt	.+2      	; 0x4138 <main+0x87e>
    4136:	43 c0       	rjmp	.+134    	; 0x41be <main+0x904>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4138:	fe 01       	movw	r30, r28
    413a:	e1 5a       	subi	r30, 0xA1	; 161
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	60 81       	ld	r22, Z
    4140:	71 81       	ldd	r23, Z+1	; 0x01
    4142:	82 81       	ldd	r24, Z+2	; 0x02
    4144:	93 81       	ldd	r25, Z+3	; 0x03
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e2       	ldi	r20, 0x20	; 32
    414c:	51 e4       	ldi	r21, 0x41	; 65
    414e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	8e 01       	movw	r16, r28
    4158:	07 5a       	subi	r16, 0xA7	; 167
    415a:	1f 4f       	sbci	r17, 0xFF	; 255
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	f8 01       	movw	r30, r16
    416a:	91 83       	std	Z+1, r25	; 0x01
    416c:	80 83       	st	Z, r24
    416e:	1f c0       	rjmp	.+62     	; 0x41ae <main+0x8f4>
    4170:	fe 01       	movw	r30, r28
    4172:	e9 5a       	subi	r30, 0xA9	; 169
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	80 e9       	ldi	r24, 0x90	; 144
    4178:	91 e0       	ldi	r25, 0x01	; 1
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
    417e:	fe 01       	movw	r30, r28
    4180:	e9 5a       	subi	r30, 0xA9	; 169
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	80 81       	ld	r24, Z
    4186:	91 81       	ldd	r25, Z+1	; 0x01
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <main+0x8ce>
    418c:	fe 01       	movw	r30, r28
    418e:	e9 5a       	subi	r30, 0xA9	; 169
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4196:	de 01       	movw	r26, r28
    4198:	a7 5a       	subi	r26, 0xA7	; 167
    419a:	bf 4f       	sbci	r27, 0xFF	; 255
    419c:	fe 01       	movw	r30, r28
    419e:	e7 5a       	subi	r30, 0xA7	; 167
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	91 81       	ldd	r25, Z+1	; 0x01
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	11 96       	adiw	r26, 0x01	; 1
    41aa:	9c 93       	st	X, r25
    41ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ae:	fe 01       	movw	r30, r28
    41b0:	e7 5a       	subi	r30, 0xA7	; 167
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	80 81       	ld	r24, Z
    41b6:	91 81       	ldd	r25, Z+1	; 0x01
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	d1 f6       	brne	.-76     	; 0x4170 <main+0x8b6>
    41bc:	27 c0       	rjmp	.+78     	; 0x420c <main+0x952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41be:	8e 01       	movw	r16, r28
    41c0:	07 5a       	subi	r16, 0xA7	; 167
    41c2:	1f 4f       	sbci	r17, 0xFF	; 255
    41c4:	fe 01       	movw	r30, r28
    41c6:	e5 5a       	subi	r30, 0xA5	; 165
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	f8 01       	movw	r30, r16
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	80 83       	st	Z, r24
    41e0:	de 01       	movw	r26, r28
    41e2:	ab 5a       	subi	r26, 0xAB	; 171
    41e4:	bf 4f       	sbci	r27, 0xFF	; 255
    41e6:	fe 01       	movw	r30, r28
    41e8:	e7 5a       	subi	r30, 0xA7	; 167
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	91 81       	ldd	r25, Z+1	; 0x01
    41f0:	8d 93       	st	X+, r24
    41f2:	9c 93       	st	X, r25
    41f4:	fe 01       	movw	r30, r28
    41f6:	eb 5a       	subi	r30, 0xAB	; 171
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	80 81       	ld	r24, Z
    41fc:	91 81       	ldd	r25, Z+1	; 0x01
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	f1 f7       	brne	.-4      	; 0x41fe <main+0x944>
    4202:	fe 01       	movw	r30, r28
    4204:	eb 5a       	subi	r30, 0xAB	; 171
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	91 83       	std	Z+1, r25	; 0x01
    420a:	80 83       	st	Z, r24
	_delay_ms(100);
	HEEPROM_enReadByte(2, &ReadData[2]);
    420c:	ce 01       	movw	r24, r28
    420e:	86 55       	subi	r24, 0x56	; 86
    4210:	9f 4f       	sbci	r25, 0xFF	; 255
    4212:	9c 01       	movw	r18, r24
    4214:	2e 5f       	subi	r18, 0xFE	; 254
    4216:	3f 4f       	sbci	r19, 0xFF	; 255
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	b9 01       	movw	r22, r18
    421e:	0e 94 ae 1b 	call	0x375c	; 0x375c <HEEPROM_enReadByte>
    4222:	fe 01       	movw	r30, r28
    4224:	ef 5a       	subi	r30, 0xAF	; 175
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	a8 ec       	ldi	r26, 0xC8	; 200
    422e:	b2 e4       	ldi	r27, 0x42	; 66
    4230:	80 83       	st	Z, r24
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	a2 83       	std	Z+2, r26	; 0x02
    4236:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4238:	8e 01       	movw	r16, r28
    423a:	03 5b       	subi	r16, 0xB3	; 179
    423c:	1f 4f       	sbci	r17, 0xFF	; 255
    423e:	fe 01       	movw	r30, r28
    4240:	ef 5a       	subi	r30, 0xAF	; 175
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	60 81       	ld	r22, Z
    4246:	71 81       	ldd	r23, Z+1	; 0x01
    4248:	82 81       	ldd	r24, Z+2	; 0x02
    424a:	93 81       	ldd	r25, Z+3	; 0x03
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	4a e7       	ldi	r20, 0x7A	; 122
    4252:	55 e4       	ldi	r21, 0x45	; 69
    4254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	f8 01       	movw	r30, r16
    425e:	80 83       	st	Z, r24
    4260:	91 83       	std	Z+1, r25	; 0x01
    4262:	a2 83       	std	Z+2, r26	; 0x02
    4264:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4266:	fe 01       	movw	r30, r28
    4268:	e3 5b       	subi	r30, 0xB3	; 179
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	60 81       	ld	r22, Z
    426e:	71 81       	ldd	r23, Z+1	; 0x01
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	93 81       	ldd	r25, Z+3	; 0x03
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e8       	ldi	r20, 0x80	; 128
    427a:	5f e3       	ldi	r21, 0x3F	; 63
    427c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4280:	88 23       	and	r24, r24
    4282:	44 f4       	brge	.+16     	; 0x4294 <main+0x9da>
		__ticks = 1;
    4284:	fe 01       	movw	r30, r28
    4286:	e5 5b       	subi	r30, 0xB5	; 181
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	91 83       	std	Z+1, r25	; 0x01
    4290:	80 83       	st	Z, r24
    4292:	64 c0       	rjmp	.+200    	; 0x435c <main+0xaa2>
	else if (__tmp > 65535)
    4294:	fe 01       	movw	r30, r28
    4296:	e3 5b       	subi	r30, 0xB3	; 179
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	82 81       	ldd	r24, Z+2	; 0x02
    42a0:	93 81       	ldd	r25, Z+3	; 0x03
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	3f ef       	ldi	r19, 0xFF	; 255
    42a6:	4f e7       	ldi	r20, 0x7F	; 127
    42a8:	57 e4       	ldi	r21, 0x47	; 71
    42aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ae:	18 16       	cp	r1, r24
    42b0:	0c f0       	brlt	.+2      	; 0x42b4 <main+0x9fa>
    42b2:	43 c0       	rjmp	.+134    	; 0x433a <main+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b4:	fe 01       	movw	r30, r28
    42b6:	ef 5a       	subi	r30, 0xAF	; 175
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	60 81       	ld	r22, Z
    42bc:	71 81       	ldd	r23, Z+1	; 0x01
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	93 81       	ldd	r25, Z+3	; 0x03
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e2       	ldi	r20, 0x20	; 32
    42c8:	51 e4       	ldi	r21, 0x41	; 65
    42ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	8e 01       	movw	r16, r28
    42d4:	05 5b       	subi	r16, 0xB5	; 181
    42d6:	1f 4f       	sbci	r17, 0xFF	; 255
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	f8 01       	movw	r30, r16
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	80 83       	st	Z, r24
    42ea:	1f c0       	rjmp	.+62     	; 0x432a <main+0xa70>
    42ec:	fe 01       	movw	r30, r28
    42ee:	e7 5b       	subi	r30, 0xB7	; 183
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	80 e9       	ldi	r24, 0x90	; 144
    42f4:	91 e0       	ldi	r25, 0x01	; 1
    42f6:	91 83       	std	Z+1, r25	; 0x01
    42f8:	80 83       	st	Z, r24
    42fa:	fe 01       	movw	r30, r28
    42fc:	e7 5b       	subi	r30, 0xB7	; 183
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	80 81       	ld	r24, Z
    4302:	91 81       	ldd	r25, Z+1	; 0x01
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	f1 f7       	brne	.-4      	; 0x4304 <main+0xa4a>
    4308:	fe 01       	movw	r30, r28
    430a:	e7 5b       	subi	r30, 0xB7	; 183
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4312:	de 01       	movw	r26, r28
    4314:	a5 5b       	subi	r26, 0xB5	; 181
    4316:	bf 4f       	sbci	r27, 0xFF	; 255
    4318:	fe 01       	movw	r30, r28
    431a:	e5 5b       	subi	r30, 0xB5	; 181
    431c:	ff 4f       	sbci	r31, 0xFF	; 255
    431e:	80 81       	ld	r24, Z
    4320:	91 81       	ldd	r25, Z+1	; 0x01
    4322:	01 97       	sbiw	r24, 0x01	; 1
    4324:	11 96       	adiw	r26, 0x01	; 1
    4326:	9c 93       	st	X, r25
    4328:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432a:	fe 01       	movw	r30, r28
    432c:	e5 5b       	subi	r30, 0xB5	; 181
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	d1 f6       	brne	.-76     	; 0x42ec <main+0xa32>
    4338:	27 c0       	rjmp	.+78     	; 0x4388 <main+0xace>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    433a:	8e 01       	movw	r16, r28
    433c:	05 5b       	subi	r16, 0xB5	; 181
    433e:	1f 4f       	sbci	r17, 0xFF	; 255
    4340:	fe 01       	movw	r30, r28
    4342:	e3 5b       	subi	r30, 0xB3	; 179
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	60 81       	ld	r22, Z
    4348:	71 81       	ldd	r23, Z+1	; 0x01
    434a:	82 81       	ldd	r24, Z+2	; 0x02
    434c:	93 81       	ldd	r25, Z+3	; 0x03
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	f8 01       	movw	r30, r16
    4358:	91 83       	std	Z+1, r25	; 0x01
    435a:	80 83       	st	Z, r24
    435c:	de 01       	movw	r26, r28
    435e:	a9 5b       	subi	r26, 0xB9	; 185
    4360:	bf 4f       	sbci	r27, 0xFF	; 255
    4362:	fe 01       	movw	r30, r28
    4364:	e5 5b       	subi	r30, 0xB5	; 181
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 81       	ld	r24, Z
    436a:	91 81       	ldd	r25, Z+1	; 0x01
    436c:	8d 93       	st	X+, r24
    436e:	9c 93       	st	X, r25
    4370:	fe 01       	movw	r30, r28
    4372:	e9 5b       	subi	r30, 0xB9	; 185
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	f1 f7       	brne	.-4      	; 0x437a <main+0xac0>
    437e:	fe 01       	movw	r30, r28
    4380:	e9 5b       	subi	r30, 0xB9	; 185
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	91 83       	std	Z+1, r25	; 0x01
    4386:	80 83       	st	Z, r24
	_delay_ms(100);
	HEEPROM_enReadByte(3, &ReadData[3]);
    4388:	ce 01       	movw	r24, r28
    438a:	86 55       	subi	r24, 0x56	; 86
    438c:	9f 4f       	sbci	r25, 0xFF	; 255
    438e:	9c 01       	movw	r18, r24
    4390:	2d 5f       	subi	r18, 0xFD	; 253
    4392:	3f 4f       	sbci	r19, 0xFF	; 255
    4394:	83 e0       	ldi	r24, 0x03	; 3
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	b9 01       	movw	r22, r18
    439a:	0e 94 ae 1b 	call	0x375c	; 0x375c <HEEPROM_enReadByte>
    439e:	fe 01       	movw	r30, r28
    43a0:	ed 5b       	subi	r30, 0xBD	; 189
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	a8 ec       	ldi	r26, 0xC8	; 200
    43aa:	b2 e4       	ldi	r27, 0x42	; 66
    43ac:	80 83       	st	Z, r24
    43ae:	91 83       	std	Z+1, r25	; 0x01
    43b0:	a2 83       	std	Z+2, r26	; 0x02
    43b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b4:	8e 01       	movw	r16, r28
    43b6:	01 5c       	subi	r16, 0xC1	; 193
    43b8:	1f 4f       	sbci	r17, 0xFF	; 255
    43ba:	fe 01       	movw	r30, r28
    43bc:	ed 5b       	subi	r30, 0xBD	; 189
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	60 81       	ld	r22, Z
    43c2:	71 81       	ldd	r23, Z+1	; 0x01
    43c4:	82 81       	ldd	r24, Z+2	; 0x02
    43c6:	93 81       	ldd	r25, Z+3	; 0x03
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	4a e7       	ldi	r20, 0x7A	; 122
    43ce:	55 e4       	ldi	r21, 0x45	; 69
    43d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	f8 01       	movw	r30, r16
    43da:	80 83       	st	Z, r24
    43dc:	91 83       	std	Z+1, r25	; 0x01
    43de:	a2 83       	std	Z+2, r26	; 0x02
    43e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43e2:	fe 01       	movw	r30, r28
    43e4:	ff 96       	adiw	r30, 0x3f	; 63
    43e6:	60 81       	ld	r22, Z
    43e8:	71 81       	ldd	r23, Z+1	; 0x01
    43ea:	82 81       	ldd	r24, Z+2	; 0x02
    43ec:	93 81       	ldd	r25, Z+3	; 0x03
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	40 e8       	ldi	r20, 0x80	; 128
    43f4:	5f e3       	ldi	r21, 0x3F	; 63
    43f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43fa:	88 23       	and	r24, r24
    43fc:	2c f4       	brge	.+10     	; 0x4408 <main+0xb4e>
		__ticks = 1;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	9e af       	std	Y+62, r25	; 0x3e
    4404:	8d af       	std	Y+61, r24	; 0x3d
    4406:	46 c0       	rjmp	.+140    	; 0x4494 <main+0xbda>
	else if (__tmp > 65535)
    4408:	fe 01       	movw	r30, r28
    440a:	ff 96       	adiw	r30, 0x3f	; 63
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	3f ef       	ldi	r19, 0xFF	; 255
    4418:	4f e7       	ldi	r20, 0x7F	; 127
    441a:	57 e4       	ldi	r21, 0x47	; 71
    441c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4420:	18 16       	cp	r1, r24
    4422:	64 f5       	brge	.+88     	; 0x447c <main+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4424:	fe 01       	movw	r30, r28
    4426:	ed 5b       	subi	r30, 0xBD	; 189
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	60 81       	ld	r22, Z
    442c:	71 81       	ldd	r23, Z+1	; 0x01
    442e:	82 81       	ldd	r24, Z+2	; 0x02
    4430:	93 81       	ldd	r25, Z+3	; 0x03
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	40 e2       	ldi	r20, 0x20	; 32
    4438:	51 e4       	ldi	r21, 0x41	; 65
    443a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	9e af       	std	Y+62, r25	; 0x3e
    4450:	8d af       	std	Y+61, r24	; 0x3d
    4452:	0f c0       	rjmp	.+30     	; 0x4472 <main+0xbb8>
    4454:	80 e9       	ldi	r24, 0x90	; 144
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	9c af       	std	Y+60, r25	; 0x3c
    445a:	8b af       	std	Y+59, r24	; 0x3b
    445c:	8b ad       	ldd	r24, Y+59	; 0x3b
    445e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4460:	01 97       	sbiw	r24, 0x01	; 1
    4462:	f1 f7       	brne	.-4      	; 0x4460 <main+0xba6>
    4464:	9c af       	std	Y+60, r25	; 0x3c
    4466:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4468:	8d ad       	ldd	r24, Y+61	; 0x3d
    446a:	9e ad       	ldd	r25, Y+62	; 0x3e
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	9e af       	std	Y+62, r25	; 0x3e
    4470:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4472:	8d ad       	ldd	r24, Y+61	; 0x3d
    4474:	9e ad       	ldd	r25, Y+62	; 0x3e
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	69 f7       	brne	.-38     	; 0x4454 <main+0xb9a>
    447a:	16 c0       	rjmp	.+44     	; 0x44a8 <main+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447c:	fe 01       	movw	r30, r28
    447e:	ff 96       	adiw	r30, 0x3f	; 63
    4480:	60 81       	ld	r22, Z
    4482:	71 81       	ldd	r23, Z+1	; 0x01
    4484:	82 81       	ldd	r24, Z+2	; 0x02
    4486:	93 81       	ldd	r25, Z+3	; 0x03
    4488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	9e af       	std	Y+62, r25	; 0x3e
    4492:	8d af       	std	Y+61, r24	; 0x3d
    4494:	8d ad       	ldd	r24, Y+61	; 0x3d
    4496:	9e ad       	ldd	r25, Y+62	; 0x3e
    4498:	9a af       	std	Y+58, r25	; 0x3a
    449a:	89 af       	std	Y+57, r24	; 0x39
    449c:	89 ad       	ldd	r24, Y+57	; 0x39
    449e:	9a ad       	ldd	r25, Y+58	; 0x3a
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <main+0xbe6>
    44a4:	9a af       	std	Y+58, r25	; 0x3a
    44a6:	89 af       	std	Y+57, r24	; 0x39

		// Temperature Sector

		u16 Temper;

		HTEMPREATURE_enRead(&Temper);
    44a8:	ce 01       	movw	r24, r28
    44aa:	8e 54       	subi	r24, 0x4E	; 78
    44ac:	9f 4f       	sbci	r25, 0xFF	; 255
    44ae:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HTEMPREATURE_enRead>
		if(Temper <= 25)
    44b2:	fe 01       	movw	r30, r28
    44b4:	ee 54       	subi	r30, 0x4E	; 78
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	80 81       	ld	r24, Z
    44ba:	91 81       	ldd	r25, Z+1	; 0x01
    44bc:	8a 31       	cpi	r24, 0x1A	; 26
    44be:	91 05       	cpc	r25, r1
    44c0:	18 f4       	brcc	.+6      	; 0x44c8 <main+0xc0e>
		{
			HDCMOTOR_enOFF();
    44c2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <HDCMOTOR_enOFF>
    44c6:	01 c1       	rjmp	.+514    	; 0x46ca <main+0xe10>
		}
		else if(Temper > 25)
    44c8:	fe 01       	movw	r30, r28
    44ca:	ee 54       	subi	r30, 0x4E	; 78
    44cc:	ff 4f       	sbci	r31, 0xFF	; 255
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	8a 31       	cpi	r24, 0x1A	; 26
    44d4:	91 05       	cpc	r25, r1
    44d6:	08 f4       	brcc	.+2      	; 0x44da <main+0xc20>
    44d8:	78 c0       	rjmp	.+240    	; 0x45ca <main+0xd10>
		{
			HDCMOTOR_enCLK_Wise();
    44da:	0e 94 3b 1c 	call	0x3876	; 0x3876 <HDCMOTOR_enCLK_Wise>
			MTIMER0_enPhaseCorrectPWM(50);
    44de:	82 e3       	ldi	r24, 0x32	; 50
    44e0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <MTIMER0_enPhaseCorrectPWM>
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	aa e7       	ldi	r26, 0x7A	; 122
    44ea:	b4 e4       	ldi	r27, 0x44	; 68
    44ec:	8d ab       	std	Y+53, r24	; 0x35
    44ee:	9e ab       	std	Y+54, r25	; 0x36
    44f0:	af ab       	std	Y+55, r26	; 0x37
    44f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f4:	6d a9       	ldd	r22, Y+53	; 0x35
    44f6:	7e a9       	ldd	r23, Y+54	; 0x36
    44f8:	8f a9       	ldd	r24, Y+55	; 0x37
    44fa:	98 ad       	ldd	r25, Y+56	; 0x38
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	4a e7       	ldi	r20, 0x7A	; 122
    4502:	55 e4       	ldi	r21, 0x45	; 69
    4504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	89 ab       	std	Y+49, r24	; 0x31
    450e:	9a ab       	std	Y+50, r25	; 0x32
    4510:	ab ab       	std	Y+51, r26	; 0x33
    4512:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4514:	69 a9       	ldd	r22, Y+49	; 0x31
    4516:	7a a9       	ldd	r23, Y+50	; 0x32
    4518:	8b a9       	ldd	r24, Y+51	; 0x33
    451a:	9c a9       	ldd	r25, Y+52	; 0x34
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	40 e8       	ldi	r20, 0x80	; 128
    4522:	5f e3       	ldi	r21, 0x3F	; 63
    4524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4528:	88 23       	and	r24, r24
    452a:	2c f4       	brge	.+10     	; 0x4536 <main+0xc7c>
		__ticks = 1;
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	98 ab       	std	Y+48, r25	; 0x30
    4532:	8f a7       	std	Y+47, r24	; 0x2f
    4534:	3f c0       	rjmp	.+126    	; 0x45b4 <main+0xcfa>
	else if (__tmp > 65535)
    4536:	69 a9       	ldd	r22, Y+49	; 0x31
    4538:	7a a9       	ldd	r23, Y+50	; 0x32
    453a:	8b a9       	ldd	r24, Y+51	; 0x33
    453c:	9c a9       	ldd	r25, Y+52	; 0x34
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	3f ef       	ldi	r19, 0xFF	; 255
    4542:	4f e7       	ldi	r20, 0x7F	; 127
    4544:	57 e4       	ldi	r21, 0x47	; 71
    4546:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    454a:	18 16       	cp	r1, r24
    454c:	4c f5       	brge	.+82     	; 0x45a0 <main+0xce6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454e:	6d a9       	ldd	r22, Y+53	; 0x35
    4550:	7e a9       	ldd	r23, Y+54	; 0x36
    4552:	8f a9       	ldd	r24, Y+55	; 0x37
    4554:	98 ad       	ldd	r25, Y+56	; 0x38
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 e2       	ldi	r20, 0x20	; 32
    455c:	51 e4       	ldi	r21, 0x41	; 65
    455e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	bc 01       	movw	r22, r24
    4568:	cd 01       	movw	r24, r26
    456a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	98 ab       	std	Y+48, r25	; 0x30
    4574:	8f a7       	std	Y+47, r24	; 0x2f
    4576:	0f c0       	rjmp	.+30     	; 0x4596 <main+0xcdc>
    4578:	80 e9       	ldi	r24, 0x90	; 144
    457a:	91 e0       	ldi	r25, 0x01	; 1
    457c:	9e a7       	std	Y+46, r25	; 0x2e
    457e:	8d a7       	std	Y+45, r24	; 0x2d
    4580:	8d a5       	ldd	r24, Y+45	; 0x2d
    4582:	9e a5       	ldd	r25, Y+46	; 0x2e
    4584:	01 97       	sbiw	r24, 0x01	; 1
    4586:	f1 f7       	brne	.-4      	; 0x4584 <main+0xcca>
    4588:	9e a7       	std	Y+46, r25	; 0x2e
    458a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458c:	8f a5       	ldd	r24, Y+47	; 0x2f
    458e:	98 a9       	ldd	r25, Y+48	; 0x30
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	98 ab       	std	Y+48, r25	; 0x30
    4594:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4596:	8f a5       	ldd	r24, Y+47	; 0x2f
    4598:	98 a9       	ldd	r25, Y+48	; 0x30
    459a:	00 97       	sbiw	r24, 0x00	; 0
    459c:	69 f7       	brne	.-38     	; 0x4578 <main+0xcbe>
    459e:	95 c0       	rjmp	.+298    	; 0x46ca <main+0xe10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a0:	69 a9       	ldd	r22, Y+49	; 0x31
    45a2:	7a a9       	ldd	r23, Y+50	; 0x32
    45a4:	8b a9       	ldd	r24, Y+51	; 0x33
    45a6:	9c a9       	ldd	r25, Y+52	; 0x34
    45a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	98 ab       	std	Y+48, r25	; 0x30
    45b2:	8f a7       	std	Y+47, r24	; 0x2f
    45b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    45b6:	98 a9       	ldd	r25, Y+48	; 0x30
    45b8:	9c a7       	std	Y+44, r25	; 0x2c
    45ba:	8b a7       	std	Y+43, r24	; 0x2b
    45bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    45be:	9c a5       	ldd	r25, Y+44	; 0x2c
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	f1 f7       	brne	.-4      	; 0x45c0 <main+0xd06>
    45c4:	9c a7       	std	Y+44, r25	; 0x2c
    45c6:	8b a7       	std	Y+43, r24	; 0x2b
    45c8:	80 c0       	rjmp	.+256    	; 0x46ca <main+0xe10>
			_delay_ms(1000);
		}
		else if(Temper >= 30)
    45ca:	fe 01       	movw	r30, r28
    45cc:	ee 54       	subi	r30, 0x4E	; 78
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	80 81       	ld	r24, Z
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	8e 31       	cpi	r24, 0x1E	; 30
    45d6:	91 05       	cpc	r25, r1
    45d8:	08 f4       	brcc	.+2      	; 0x45dc <main+0xd22>
    45da:	77 c0       	rjmp	.+238    	; 0x46ca <main+0xe10>
		{
			HDCMOTOR_enCLK_Wise();
    45dc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <HDCMOTOR_enCLK_Wise>
			MTIMER0_enPhaseCorrectPWM(100);
    45e0:	84 e6       	ldi	r24, 0x64	; 100
    45e2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <MTIMER0_enPhaseCorrectPWM>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	aa e7       	ldi	r26, 0x7A	; 122
    45ec:	b4 e4       	ldi	r27, 0x44	; 68
    45ee:	8f a3       	std	Y+39, r24	; 0x27
    45f0:	98 a7       	std	Y+40, r25	; 0x28
    45f2:	a9 a7       	std	Y+41, r26	; 0x29
    45f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f6:	6f a1       	ldd	r22, Y+39	; 0x27
    45f8:	78 a5       	ldd	r23, Y+40	; 0x28
    45fa:	89 a5       	ldd	r24, Y+41	; 0x29
    45fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	4a e7       	ldi	r20, 0x7A	; 122
    4604:	55 e4       	ldi	r21, 0x45	; 69
    4606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
    460e:	8b a3       	std	Y+35, r24	; 0x23
    4610:	9c a3       	std	Y+36, r25	; 0x24
    4612:	ad a3       	std	Y+37, r26	; 0x25
    4614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4616:	6b a1       	ldd	r22, Y+35	; 0x23
    4618:	7c a1       	ldd	r23, Y+36	; 0x24
    461a:	8d a1       	ldd	r24, Y+37	; 0x25
    461c:	9e a1       	ldd	r25, Y+38	; 0x26
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	40 e8       	ldi	r20, 0x80	; 128
    4624:	5f e3       	ldi	r21, 0x3F	; 63
    4626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    462a:	88 23       	and	r24, r24
    462c:	2c f4       	brge	.+10     	; 0x4638 <main+0xd7e>
		__ticks = 1;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	9a a3       	std	Y+34, r25	; 0x22
    4634:	89 a3       	std	Y+33, r24	; 0x21
    4636:	3f c0       	rjmp	.+126    	; 0x46b6 <main+0xdfc>
	else if (__tmp > 65535)
    4638:	6b a1       	ldd	r22, Y+35	; 0x23
    463a:	7c a1       	ldd	r23, Y+36	; 0x24
    463c:	8d a1       	ldd	r24, Y+37	; 0x25
    463e:	9e a1       	ldd	r25, Y+38	; 0x26
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	3f ef       	ldi	r19, 0xFF	; 255
    4644:	4f e7       	ldi	r20, 0x7F	; 127
    4646:	57 e4       	ldi	r21, 0x47	; 71
    4648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    464c:	18 16       	cp	r1, r24
    464e:	4c f5       	brge	.+82     	; 0x46a2 <main+0xde8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4650:	6f a1       	ldd	r22, Y+39	; 0x27
    4652:	78 a5       	ldd	r23, Y+40	; 0x28
    4654:	89 a5       	ldd	r24, Y+41	; 0x29
    4656:	9a a5       	ldd	r25, Y+42	; 0x2a
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	40 e2       	ldi	r20, 0x20	; 32
    465e:	51 e4       	ldi	r21, 0x41	; 65
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	bc 01       	movw	r22, r24
    466a:	cd 01       	movw	r24, r26
    466c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	9a a3       	std	Y+34, r25	; 0x22
    4676:	89 a3       	std	Y+33, r24	; 0x21
    4678:	0f c0       	rjmp	.+30     	; 0x4698 <main+0xdde>
    467a:	80 e9       	ldi	r24, 0x90	; 144
    467c:	91 e0       	ldi	r25, 0x01	; 1
    467e:	98 a3       	std	Y+32, r25	; 0x20
    4680:	8f 8f       	std	Y+31, r24	; 0x1f
    4682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4684:	98 a1       	ldd	r25, Y+32	; 0x20
    4686:	01 97       	sbiw	r24, 0x01	; 1
    4688:	f1 f7       	brne	.-4      	; 0x4686 <main+0xdcc>
    468a:	98 a3       	std	Y+32, r25	; 0x20
    468c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468e:	89 a1       	ldd	r24, Y+33	; 0x21
    4690:	9a a1       	ldd	r25, Y+34	; 0x22
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	9a a3       	std	Y+34, r25	; 0x22
    4696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4698:	89 a1       	ldd	r24, Y+33	; 0x21
    469a:	9a a1       	ldd	r25, Y+34	; 0x22
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	69 f7       	brne	.-38     	; 0x467a <main+0xdc0>
    46a0:	14 c0       	rjmp	.+40     	; 0x46ca <main+0xe10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a2:	6b a1       	ldd	r22, Y+35	; 0x23
    46a4:	7c a1       	ldd	r23, Y+36	; 0x24
    46a6:	8d a1       	ldd	r24, Y+37	; 0x25
    46a8:	9e a1       	ldd	r25, Y+38	; 0x26
    46aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	9a a3       	std	Y+34, r25	; 0x22
    46b4:	89 a3       	std	Y+33, r24	; 0x21
    46b6:	89 a1       	ldd	r24, Y+33	; 0x21
    46b8:	9a a1       	ldd	r25, Y+34	; 0x22
    46ba:	9e 8f       	std	Y+30, r25	; 0x1e
    46bc:	8d 8f       	std	Y+29, r24	; 0x1d
    46be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <main+0xe08>
    46c6:	9e 8f       	std	Y+30, r25	; 0x1e
    46c8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
		}

		// Authentication Sector

		u8 Key = HKPAD_NO_PRESSED_KEY;
    46ca:	fe 01       	movw	r30, r28
    46cc:	ec 54       	subi	r30, 0x4C	; 76
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	8f ef       	ldi	r24, 0xFF	; 255
    46d2:	80 83       	st	Z, r24
		u8 CheckPass[4];
		u8 Counter = 0;
    46d4:	fe 01       	movw	r30, r28
    46d6:	e8 56       	subi	r30, 0x68	; 104
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	10 82       	st	Z, r1
		u8 i;

		if(Distance >= 0 && Distance <= 15)
    46dc:	fe 01       	movw	r30, r28
    46de:	e6 56       	subi	r30, 0x66	; 102
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	80 81       	ld	r24, Z
    46e4:	91 81       	ldd	r25, Z+1	; 0x01
    46e6:	a2 81       	ldd	r26, Z+2	; 0x02
    46e8:	b3 81       	ldd	r27, Z+3	; 0x03
    46ea:	80 31       	cpi	r24, 0x10	; 16
    46ec:	91 05       	cpc	r25, r1
    46ee:	a1 05       	cpc	r26, r1
    46f0:	b1 05       	cpc	r27, r1
    46f2:	08 f0       	brcs	.+2      	; 0x46f6 <main+0xe3c>
    46f4:	a8 c1       	rjmp	.+848    	; 0x4a46 <main+0x118c>
		{
			HLCD_enGoToXY(1, 0);
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <HLCD_enGoToXY>
			HLCD_enSendString('Enter Password');
    46fe:	84 e6       	ldi	r24, 0x64	; 100
    4700:	92 e7       	ldi	r25, 0x72	; 114
    4702:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <HLCD_enSendString>
			HKPAD_enGetPressKey(&Key);
    4706:	ce 01       	movw	r24, r28
    4708:	8c 54       	subi	r24, 0x4C	; 76
    470a:	9f 4f       	sbci	r25, 0xFF	; 255
    470c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <HKPAD_enGetPressKey>

			if(&Key == Pass[0] && &Key == Pass[1] && &Key == Pass[2] && &Key == Pass[3])
    4710:	fe 01       	movw	r30, r28
    4712:	e2 55       	subi	r30, 0x52	; 82
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	80 81       	ld	r24, Z
    4718:	88 2f       	mov	r24, r24
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	9c 01       	movw	r18, r24
    471e:	ce 01       	movw	r24, r28
    4720:	8c 54       	subi	r24, 0x4C	; 76
    4722:	9f 4f       	sbci	r25, 0xFF	; 255
    4724:	28 17       	cp	r18, r24
    4726:	39 07       	cpc	r19, r25
    4728:	09 f0       	breq	.+2      	; 0x472c <main+0xe72>
    472a:	49 c0       	rjmp	.+146    	; 0x47be <main+0xf04>
    472c:	fe 01       	movw	r30, r28
    472e:	e2 55       	subi	r30, 0x52	; 82
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	81 81       	ldd	r24, Z+1	; 0x01
    4734:	88 2f       	mov	r24, r24
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9c 01       	movw	r18, r24
    473a:	ce 01       	movw	r24, r28
    473c:	8c 54       	subi	r24, 0x4C	; 76
    473e:	9f 4f       	sbci	r25, 0xFF	; 255
    4740:	28 17       	cp	r18, r24
    4742:	39 07       	cpc	r19, r25
    4744:	e1 f5       	brne	.+120    	; 0x47be <main+0xf04>
    4746:	fe 01       	movw	r30, r28
    4748:	e2 55       	subi	r30, 0x52	; 82
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	82 81       	ldd	r24, Z+2	; 0x02
    474e:	88 2f       	mov	r24, r24
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	9c 01       	movw	r18, r24
    4754:	ce 01       	movw	r24, r28
    4756:	8c 54       	subi	r24, 0x4C	; 76
    4758:	9f 4f       	sbci	r25, 0xFF	; 255
    475a:	28 17       	cp	r18, r24
    475c:	39 07       	cpc	r19, r25
    475e:	79 f5       	brne	.+94     	; 0x47be <main+0xf04>
    4760:	fe 01       	movw	r30, r28
    4762:	e2 55       	subi	r30, 0x52	; 82
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	83 81       	ldd	r24, Z+3	; 0x03
    4768:	88 2f       	mov	r24, r24
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	9c 01       	movw	r18, r24
    476e:	ce 01       	movw	r24, r28
    4770:	8c 54       	subi	r24, 0x4C	; 76
    4772:	9f 4f       	sbci	r25, 0xFF	; 255
    4774:	28 17       	cp	r18, r24
    4776:	39 07       	cpc	r19, r25
    4778:	11 f5       	brne	.+68     	; 0x47be <main+0xf04>
			{
				HLCD_enClear();
    477a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <HLCD_enClear>
				HLCD_enGoToXY(1, 0);
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	60 e0       	ldi	r22, 0x00	; 0
    4782:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <HLCD_enGoToXY>
				HLCD_enSendString("Hello Ahmed");
    4786:	80 e6       	ldi	r24, 0x60	; 96
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <HLCD_enSendString>

				HRELAY_enOnce();
    478e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <HRELAY_enOnce>

				if(&Key == 'ON')
    4792:	ce 01       	movw	r24, r28
    4794:	8c 54       	subi	r24, 0x4C	; 76
    4796:	9f 4f       	sbci	r25, 0xFF	; 255
    4798:	ff e4       	ldi	r31, 0x4F	; 79
    479a:	8e 34       	cpi	r24, 0x4E	; 78
    479c:	9f 07       	cpc	r25, r31
    479e:	19 f4       	brne	.+6      	; 0x47a6 <main+0xeec>
				{
					HLED_enSetON(HLED_GRN_ID);
    47a0:	83 e0       	ldi	r24, 0x03	; 3
    47a2:	0e 94 21 14 	call	0x2842	; 0x2842 <HLED_enSetON>
				}
				if(&Key == 'OFF')
    47a6:	ce 01       	movw	r24, r28
    47a8:	8c 54       	subi	r24, 0x4C	; 76
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
    47ac:	26 e4       	ldi	r18, 0x46	; 70
    47ae:	86 34       	cpi	r24, 0x46	; 70
    47b0:	92 07       	cpc	r25, r18
    47b2:	09 f0       	breq	.+2      	; 0x47b6 <main+0xefc>
    47b4:	79 ce       	rjmp	.-782    	; 0x44a8 <main+0xbee>
				{
					HLED_enSetOFF(HLED_GRN_ID);
    47b6:	83 e0       	ldi	r24, 0x03	; 3
    47b8:	0e 94 56 14 	call	0x28ac	; 0x28ac <HLED_enSetOFF>
    47bc:	75 ce       	rjmp	.-790    	; 0x44a8 <main+0xbee>
				}
			}
			else
			{
				for(i = 0; i <= 3 ; i++)
    47be:	fe 01       	movw	r30, r28
    47c0:	e9 56       	subi	r30, 0x69	; 105
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	10 82       	st	Z, r1
    47c6:	c5 c0       	rjmp	.+394    	; 0x4952 <main+0x1098>
				{
					HLCD_enClear();
    47c8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <HLCD_enClear>
					HLCD_enGoToXY(1, 0);
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <HLCD_enGoToXY>
					HLCD_enSendString("Wrong Password");
    47d4:	8c e6       	ldi	r24, 0x6C	; 108
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <HLCD_enSendString>
					if (&Key == Pass[0] && &Key == Pass[1] && &Key == Pass[2] && &Key == Pass[3])
    47dc:	fe 01       	movw	r30, r28
    47de:	e2 55       	subi	r30, 0x52	; 82
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	80 81       	ld	r24, Z
    47e4:	88 2f       	mov	r24, r24
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	9c 01       	movw	r18, r24
    47ea:	ce 01       	movw	r24, r28
    47ec:	8c 54       	subi	r24, 0x4C	; 76
    47ee:	9f 4f       	sbci	r25, 0xFF	; 255
    47f0:	28 17       	cp	r18, r24
    47f2:	39 07       	cpc	r19, r25
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <main+0xf3e>
    47f6:	a4 c0       	rjmp	.+328    	; 0x4940 <main+0x1086>
    47f8:	fe 01       	movw	r30, r28
    47fa:	e2 55       	subi	r30, 0x52	; 82
    47fc:	ff 4f       	sbci	r31, 0xFF	; 255
    47fe:	81 81       	ldd	r24, Z+1	; 0x01
    4800:	88 2f       	mov	r24, r24
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	9c 01       	movw	r18, r24
    4806:	ce 01       	movw	r24, r28
    4808:	8c 54       	subi	r24, 0x4C	; 76
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	28 17       	cp	r18, r24
    480e:	39 07       	cpc	r19, r25
    4810:	09 f0       	breq	.+2      	; 0x4814 <main+0xf5a>
    4812:	96 c0       	rjmp	.+300    	; 0x4940 <main+0x1086>
    4814:	fe 01       	movw	r30, r28
    4816:	e2 55       	subi	r30, 0x52	; 82
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	88 2f       	mov	r24, r24
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9c 01       	movw	r18, r24
    4822:	ce 01       	movw	r24, r28
    4824:	8c 54       	subi	r24, 0x4C	; 76
    4826:	9f 4f       	sbci	r25, 0xFF	; 255
    4828:	28 17       	cp	r18, r24
    482a:	39 07       	cpc	r19, r25
    482c:	09 f0       	breq	.+2      	; 0x4830 <main+0xf76>
    482e:	88 c0       	rjmp	.+272    	; 0x4940 <main+0x1086>
    4830:	fe 01       	movw	r30, r28
    4832:	e2 55       	subi	r30, 0x52	; 82
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	83 81       	ldd	r24, Z+3	; 0x03
    4838:	88 2f       	mov	r24, r24
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	9c 01       	movw	r18, r24
    483e:	ce 01       	movw	r24, r28
    4840:	8c 54       	subi	r24, 0x4C	; 76
    4842:	9f 4f       	sbci	r25, 0xFF	; 255
    4844:	28 17       	cp	r18, r24
    4846:	39 07       	cpc	r19, r25
    4848:	09 f0       	breq	.+2      	; 0x484c <main+0xf92>
    484a:	7a c0       	rjmp	.+244    	; 0x4940 <main+0x1086>
					{

						HLCD_enClear();
    484c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <HLCD_enClear>
						HLCD_enSendString("Hello Ahmed");
    4850:	80 e6       	ldi	r24, 0x60	; 96
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <HLCD_enSendString>
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	aa ef       	ldi	r26, 0xFA	; 250
    485e:	b3 e4       	ldi	r27, 0x43	; 67
    4860:	89 8f       	std	Y+25, r24	; 0x19
    4862:	9a 8f       	std	Y+26, r25	; 0x1a
    4864:	ab 8f       	std	Y+27, r26	; 0x1b
    4866:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4868:	69 8d       	ldd	r22, Y+25	; 0x19
    486a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    486c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    486e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	4a e7       	ldi	r20, 0x7A	; 122
    4876:	55 e4       	ldi	r21, 0x45	; 69
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	8d 8b       	std	Y+21, r24	; 0x15
    4882:	9e 8b       	std	Y+22, r25	; 0x16
    4884:	af 8b       	std	Y+23, r26	; 0x17
    4886:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4888:	6d 89       	ldd	r22, Y+21	; 0x15
    488a:	7e 89       	ldd	r23, Y+22	; 0x16
    488c:	8f 89       	ldd	r24, Y+23	; 0x17
    488e:	98 8d       	ldd	r25, Y+24	; 0x18
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	40 e8       	ldi	r20, 0x80	; 128
    4896:	5f e3       	ldi	r21, 0x3F	; 63
    4898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    489c:	88 23       	and	r24, r24
    489e:	2c f4       	brge	.+10     	; 0x48aa <main+0xff0>
		__ticks = 1;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	9c 8b       	std	Y+20, r25	; 0x14
    48a6:	8b 8b       	std	Y+19, r24	; 0x13
    48a8:	3f c0       	rjmp	.+126    	; 0x4928 <main+0x106e>
	else if (__tmp > 65535)
    48aa:	6d 89       	ldd	r22, Y+21	; 0x15
    48ac:	7e 89       	ldd	r23, Y+22	; 0x16
    48ae:	8f 89       	ldd	r24, Y+23	; 0x17
    48b0:	98 8d       	ldd	r25, Y+24	; 0x18
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	3f ef       	ldi	r19, 0xFF	; 255
    48b6:	4f e7       	ldi	r20, 0x7F	; 127
    48b8:	57 e4       	ldi	r21, 0x47	; 71
    48ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48be:	18 16       	cp	r1, r24
    48c0:	4c f5       	brge	.+82     	; 0x4914 <main+0x105a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c2:	69 8d       	ldd	r22, Y+25	; 0x19
    48c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	40 e2       	ldi	r20, 0x20	; 32
    48d0:	51 e4       	ldi	r21, 0x41	; 65
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	bc 01       	movw	r22, r24
    48dc:	cd 01       	movw	r24, r26
    48de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	9c 8b       	std	Y+20, r25	; 0x14
    48e8:	8b 8b       	std	Y+19, r24	; 0x13
    48ea:	0f c0       	rjmp	.+30     	; 0x490a <main+0x1050>
    48ec:	80 e9       	ldi	r24, 0x90	; 144
    48ee:	91 e0       	ldi	r25, 0x01	; 1
    48f0:	9a 8b       	std	Y+18, r25	; 0x12
    48f2:	89 8b       	std	Y+17, r24	; 0x11
    48f4:	89 89       	ldd	r24, Y+17	; 0x11
    48f6:	9a 89       	ldd	r25, Y+18	; 0x12
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <main+0x103e>
    48fc:	9a 8b       	std	Y+18, r25	; 0x12
    48fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4900:	8b 89       	ldd	r24, Y+19	; 0x13
    4902:	9c 89       	ldd	r25, Y+20	; 0x14
    4904:	01 97       	sbiw	r24, 0x01	; 1
    4906:	9c 8b       	std	Y+20, r25	; 0x14
    4908:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    490a:	8b 89       	ldd	r24, Y+19	; 0x13
    490c:	9c 89       	ldd	r25, Y+20	; 0x14
    490e:	00 97       	sbiw	r24, 0x00	; 0
    4910:	69 f7       	brne	.-38     	; 0x48ec <main+0x1032>
    4912:	14 c0       	rjmp	.+40     	; 0x493c <main+0x1082>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4914:	6d 89       	ldd	r22, Y+21	; 0x15
    4916:	7e 89       	ldd	r23, Y+22	; 0x16
    4918:	8f 89       	ldd	r24, Y+23	; 0x17
    491a:	98 8d       	ldd	r25, Y+24	; 0x18
    491c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	9c 8b       	std	Y+20, r25	; 0x14
    4926:	8b 8b       	std	Y+19, r24	; 0x13
    4928:	8b 89       	ldd	r24, Y+19	; 0x13
    492a:	9c 89       	ldd	r25, Y+20	; 0x14
    492c:	98 8b       	std	Y+16, r25	; 0x10
    492e:	8f 87       	std	Y+15, r24	; 0x0f
    4930:	8f 85       	ldd	r24, Y+15	; 0x0f
    4932:	98 89       	ldd	r25, Y+16	; 0x10
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <main+0x107a>
    4938:	98 8b       	std	Y+16, r25	; 0x10
    493a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						HLCD_enClear();
    493c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <HLCD_enClear>
					HLED_enSetOFF(HLED_GRN_ID);
				}
			}
			else
			{
				for(i = 0; i <= 3 ; i++)
    4940:	de 01       	movw	r26, r28
    4942:	a9 56       	subi	r26, 0x69	; 105
    4944:	bf 4f       	sbci	r27, 0xFF	; 255
    4946:	fe 01       	movw	r30, r28
    4948:	e9 56       	subi	r30, 0x69	; 105
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	80 81       	ld	r24, Z
    494e:	8f 5f       	subi	r24, 0xFF	; 255
    4950:	8c 93       	st	X, r24
    4952:	fe 01       	movw	r30, r28
    4954:	e9 56       	subi	r30, 0x69	; 105
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	80 81       	ld	r24, Z
    495a:	84 30       	cpi	r24, 0x04	; 4
    495c:	08 f4       	brcc	.+2      	; 0x4960 <main+0x10a6>
    495e:	34 cf       	rjmp	.-408    	; 0x47c8 <main+0xf0e>
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	aa ef       	ldi	r26, 0xFA	; 250
    4966:	b4 e4       	ldi	r27, 0x44	; 68
    4968:	8b 87       	std	Y+11, r24	; 0x0b
    496a:	9c 87       	std	Y+12, r25	; 0x0c
    496c:	ad 87       	std	Y+13, r26	; 0x0d
    496e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4970:	6b 85       	ldd	r22, Y+11	; 0x0b
    4972:	7c 85       	ldd	r23, Y+12	; 0x0c
    4974:	8d 85       	ldd	r24, Y+13	; 0x0d
    4976:	9e 85       	ldd	r25, Y+14	; 0x0e
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	4a e7       	ldi	r20, 0x7A	; 122
    497e:	55 e4       	ldi	r21, 0x45	; 69
    4980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	8f 83       	std	Y+7, r24	; 0x07
    498a:	98 87       	std	Y+8, r25	; 0x08
    498c:	a9 87       	std	Y+9, r26	; 0x09
    498e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4990:	6f 81       	ldd	r22, Y+7	; 0x07
    4992:	78 85       	ldd	r23, Y+8	; 0x08
    4994:	89 85       	ldd	r24, Y+9	; 0x09
    4996:	9a 85       	ldd	r25, Y+10	; 0x0a
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	40 e8       	ldi	r20, 0x80	; 128
    499e:	5f e3       	ldi	r21, 0x3F	; 63
    49a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49a4:	88 23       	and	r24, r24
    49a6:	2c f4       	brge	.+10     	; 0x49b2 <main+0x10f8>
		__ticks = 1;
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	8d 83       	std	Y+5, r24	; 0x05
    49b0:	3f c0       	rjmp	.+126    	; 0x4a30 <main+0x1176>
	else if (__tmp > 65535)
    49b2:	6f 81       	ldd	r22, Y+7	; 0x07
    49b4:	78 85       	ldd	r23, Y+8	; 0x08
    49b6:	89 85       	ldd	r24, Y+9	; 0x09
    49b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	3f ef       	ldi	r19, 0xFF	; 255
    49be:	4f e7       	ldi	r20, 0x7F	; 127
    49c0:	57 e4       	ldi	r21, 0x47	; 71
    49c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49c6:	18 16       	cp	r1, r24
    49c8:	4c f5       	brge	.+82     	; 0x4a1c <main+0x1162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    49cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	40 e2       	ldi	r20, 0x20	; 32
    49d8:	51 e4       	ldi	r21, 0x41	; 65
    49da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	bc 01       	movw	r22, r24
    49e4:	cd 01       	movw	r24, r26
    49e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ea:	dc 01       	movw	r26, r24
    49ec:	cb 01       	movw	r24, r22
    49ee:	9e 83       	std	Y+6, r25	; 0x06
    49f0:	8d 83       	std	Y+5, r24	; 0x05
    49f2:	0f c0       	rjmp	.+30     	; 0x4a12 <main+0x1158>
    49f4:	80 e9       	ldi	r24, 0x90	; 144
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	9c 83       	std	Y+4, r25	; 0x04
    49fa:	8b 83       	std	Y+3, r24	; 0x03
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <main+0x1146>
    4a04:	9c 83       	std	Y+4, r25	; 0x04
    4a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a08:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	9e 83       	std	Y+6, r25	; 0x06
    4a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a12:	8d 81       	ldd	r24, Y+5	; 0x05
    4a14:	9e 81       	ldd	r25, Y+6	; 0x06
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	69 f7       	brne	.-38     	; 0x49f4 <main+0x113a>
    4a1a:	46 cd       	rjmp	.-1396   	; 0x44a8 <main+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a1e:	78 85       	ldd	r23, Y+8	; 0x08
    4a20:	89 85       	ldd	r24, Y+9	; 0x09
    4a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	9e 83       	std	Y+6, r25	; 0x06
    4a2e:	8d 83       	std	Y+5, r24	; 0x05
    4a30:	8d 81       	ldd	r24, Y+5	; 0x05
    4a32:	9e 81       	ldd	r25, Y+6	; 0x06
    4a34:	9a 83       	std	Y+2, r25	; 0x02
    4a36:	89 83       	std	Y+1, r24	; 0x01
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	01 97       	sbiw	r24, 0x01	; 1
    4a3e:	f1 f7       	brne	.-4      	; 0x4a3c <main+0x1182>
    4a40:	9a 83       	std	Y+2, r25	; 0x02
    4a42:	89 83       	std	Y+1, r24	; 0x01
    4a44:	31 cd       	rjmp	.-1438   	; 0x44a8 <main+0xbee>
				_delay_ms(2000);
			}
		}
		else
		{
			HLCD_enSendString('Out Of Range');
    4a46:	85 e6       	ldi	r24, 0x65	; 101
    4a48:	97 e6       	ldi	r25, 0x67	; 103
    4a4a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <HLCD_enSendString>
    4a4e:	2c cd       	rjmp	.-1448   	; 0x44a8 <main+0xbee>

00004a50 <ICU_HW>:


}

void ICU_HW(void)
{
    4a50:	df 93       	push	r29
    4a52:	cf 93       	push	r28
    4a54:	cd b7       	in	r28, 0x3d	; 61
    4a56:	de b7       	in	r29, 0x3e	; 62
	if(g_State == STATE1)
    4a58:	80 91 83 01 	lds	r24, 0x0183
    4a5c:	81 30       	cpi	r24, 0x01	; 1
    4a5e:	99 f4       	brne	.+38     	; 0x4a86 <ICU_HW+0x36>
	{
		MTIMER1_ICU_enRead(&g_Reading1);
    4a60:	8b ec       	ldi	r24, 0xCB	; 203
    4a62:	91 e0       	ldi	r25, 0x01	; 1
    4a64:	0e 94 3d 08 	call	0x107a	; 0x107a <MTIMER1_ICU_enRead>
		g_Reading1_X = g_OVFCount;
    4a68:	80 91 d3 01 	lds	r24, 0x01D3
    4a6c:	88 2f       	mov	r24, r24
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	90 93 d0 01 	sts	0x01D0, r25
    4a74:	80 93 cf 01 	sts	0x01CF, r24
		MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_FALL_EDGE_TRIG);
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MTIMER1_ICU_enSetTrigger>
		g_State = STATE2;
    4a7e:	82 e0       	ldi	r24, 0x02	; 2
    4a80:	80 93 83 01 	sts	0x0183, r24
    4a84:	1a c0       	rjmp	.+52     	; 0x4aba <ICU_HW+0x6a>
	}
	else if(g_State == STATE2)
    4a86:	80 91 83 01 	lds	r24, 0x0183
    4a8a:	82 30       	cpi	r24, 0x02	; 2
    4a8c:	b1 f4       	brne	.+44     	; 0x4aba <ICU_HW+0x6a>
	{
		MTIMER1_ICU_enRead(&g_Reading2);
    4a8e:	8d ec       	ldi	r24, 0xCD	; 205
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	0e 94 3d 08 	call	0x107a	; 0x107a <MTIMER1_ICU_enRead>
		g_Reading2_Y = g_OVFCount;
    4a96:	80 91 d3 01 	lds	r24, 0x01D3
    4a9a:	88 2f       	mov	r24, r24
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	90 93 d2 01 	sts	0x01D2, r25
    4aa2:	80 93 d1 01 	sts	0x01D1, r24
		g_State = STATE3;
    4aa6:	83 e0       	ldi	r24, 0x03	; 3
    4aa8:	80 93 83 01 	sts	0x0183, r24
		MTIMER1_ICU_enSetTrigger(MTIMER1_ICU_RISE_EDGE_TRIG);
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MTIMER1_ICU_enSetTrigger>

		MTIMER1_enStop();
    4ab2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <MTIMER1_enStop>
		MTIMER1_ICU_enDisableInt();
    4ab6:	0e 94 0f 08 	call	0x101e	; 0x101e <MTIMER1_ICU_enDisableInt>
	}
}
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	08 95       	ret

00004ac0 <OVF_INT>:

void OVF_INT(void)
{
    4ac0:	df 93       	push	r29
    4ac2:	cf 93       	push	r28
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
	g_OVFCount++;
    4ac8:	80 91 d3 01 	lds	r24, 0x01D3
    4acc:	8f 5f       	subi	r24, 0xFF	; 255
    4ace:	80 93 d3 01 	sts	0x01D3, r24
}
    4ad2:	cf 91       	pop	r28
    4ad4:	df 91       	pop	r29
    4ad6:	08 95       	ret

00004ad8 <__mulsi3>:
    4ad8:	62 9f       	mul	r22, r18
    4ada:	d0 01       	movw	r26, r0
    4adc:	73 9f       	mul	r23, r19
    4ade:	f0 01       	movw	r30, r0
    4ae0:	82 9f       	mul	r24, r18
    4ae2:	e0 0d       	add	r30, r0
    4ae4:	f1 1d       	adc	r31, r1
    4ae6:	64 9f       	mul	r22, r20
    4ae8:	e0 0d       	add	r30, r0
    4aea:	f1 1d       	adc	r31, r1
    4aec:	92 9f       	mul	r25, r18
    4aee:	f0 0d       	add	r31, r0
    4af0:	83 9f       	mul	r24, r19
    4af2:	f0 0d       	add	r31, r0
    4af4:	74 9f       	mul	r23, r20
    4af6:	f0 0d       	add	r31, r0
    4af8:	65 9f       	mul	r22, r21
    4afa:	f0 0d       	add	r31, r0
    4afc:	99 27       	eor	r25, r25
    4afe:	72 9f       	mul	r23, r18
    4b00:	b0 0d       	add	r27, r0
    4b02:	e1 1d       	adc	r30, r1
    4b04:	f9 1f       	adc	r31, r25
    4b06:	63 9f       	mul	r22, r19
    4b08:	b0 0d       	add	r27, r0
    4b0a:	e1 1d       	adc	r30, r1
    4b0c:	f9 1f       	adc	r31, r25
    4b0e:	bd 01       	movw	r22, r26
    4b10:	cf 01       	movw	r24, r30
    4b12:	11 24       	eor	r1, r1
    4b14:	08 95       	ret

00004b16 <__udivmodqi4>:
    4b16:	99 1b       	sub	r25, r25
    4b18:	79 e0       	ldi	r23, 0x09	; 9
    4b1a:	04 c0       	rjmp	.+8      	; 0x4b24 <__udivmodqi4_ep>

00004b1c <__udivmodqi4_loop>:
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	96 17       	cp	r25, r22
    4b20:	08 f0       	brcs	.+2      	; 0x4b24 <__udivmodqi4_ep>
    4b22:	96 1b       	sub	r25, r22

00004b24 <__udivmodqi4_ep>:
    4b24:	88 1f       	adc	r24, r24
    4b26:	7a 95       	dec	r23
    4b28:	c9 f7       	brne	.-14     	; 0x4b1c <__udivmodqi4_loop>
    4b2a:	80 95       	com	r24
    4b2c:	08 95       	ret

00004b2e <__divmodhi4>:
    4b2e:	97 fb       	bst	r25, 7
    4b30:	09 2e       	mov	r0, r25
    4b32:	07 26       	eor	r0, r23
    4b34:	0a d0       	rcall	.+20     	; 0x4b4a <__divmodhi4_neg1>
    4b36:	77 fd       	sbrc	r23, 7
    4b38:	04 d0       	rcall	.+8      	; 0x4b42 <__divmodhi4_neg2>
    4b3a:	49 d0       	rcall	.+146    	; 0x4bce <__udivmodhi4>
    4b3c:	06 d0       	rcall	.+12     	; 0x4b4a <__divmodhi4_neg1>
    4b3e:	00 20       	and	r0, r0
    4b40:	1a f4       	brpl	.+6      	; 0x4b48 <__divmodhi4_exit>

00004b42 <__divmodhi4_neg2>:
    4b42:	70 95       	com	r23
    4b44:	61 95       	neg	r22
    4b46:	7f 4f       	sbci	r23, 0xFF	; 255

00004b48 <__divmodhi4_exit>:
    4b48:	08 95       	ret

00004b4a <__divmodhi4_neg1>:
    4b4a:	f6 f7       	brtc	.-4      	; 0x4b48 <__divmodhi4_exit>
    4b4c:	90 95       	com	r25
    4b4e:	81 95       	neg	r24
    4b50:	9f 4f       	sbci	r25, 0xFF	; 255
    4b52:	08 95       	ret

00004b54 <__udivmodsi4>:
    4b54:	a1 e2       	ldi	r26, 0x21	; 33
    4b56:	1a 2e       	mov	r1, r26
    4b58:	aa 1b       	sub	r26, r26
    4b5a:	bb 1b       	sub	r27, r27
    4b5c:	fd 01       	movw	r30, r26
    4b5e:	0d c0       	rjmp	.+26     	; 0x4b7a <__udivmodsi4_ep>

00004b60 <__udivmodsi4_loop>:
    4b60:	aa 1f       	adc	r26, r26
    4b62:	bb 1f       	adc	r27, r27
    4b64:	ee 1f       	adc	r30, r30
    4b66:	ff 1f       	adc	r31, r31
    4b68:	a2 17       	cp	r26, r18
    4b6a:	b3 07       	cpc	r27, r19
    4b6c:	e4 07       	cpc	r30, r20
    4b6e:	f5 07       	cpc	r31, r21
    4b70:	20 f0       	brcs	.+8      	; 0x4b7a <__udivmodsi4_ep>
    4b72:	a2 1b       	sub	r26, r18
    4b74:	b3 0b       	sbc	r27, r19
    4b76:	e4 0b       	sbc	r30, r20
    4b78:	f5 0b       	sbc	r31, r21

00004b7a <__udivmodsi4_ep>:
    4b7a:	66 1f       	adc	r22, r22
    4b7c:	77 1f       	adc	r23, r23
    4b7e:	88 1f       	adc	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	1a 94       	dec	r1
    4b84:	69 f7       	brne	.-38     	; 0x4b60 <__udivmodsi4_loop>
    4b86:	60 95       	com	r22
    4b88:	70 95       	com	r23
    4b8a:	80 95       	com	r24
    4b8c:	90 95       	com	r25
    4b8e:	9b 01       	movw	r18, r22
    4b90:	ac 01       	movw	r20, r24
    4b92:	bd 01       	movw	r22, r26
    4b94:	cf 01       	movw	r24, r30
    4b96:	08 95       	ret

00004b98 <__divmodsi4>:
    4b98:	97 fb       	bst	r25, 7
    4b9a:	09 2e       	mov	r0, r25
    4b9c:	05 26       	eor	r0, r21
    4b9e:	0e d0       	rcall	.+28     	; 0x4bbc <__divmodsi4_neg1>
    4ba0:	57 fd       	sbrc	r21, 7
    4ba2:	04 d0       	rcall	.+8      	; 0x4bac <__divmodsi4_neg2>
    4ba4:	d7 df       	rcall	.-82     	; 0x4b54 <__udivmodsi4>
    4ba6:	0a d0       	rcall	.+20     	; 0x4bbc <__divmodsi4_neg1>
    4ba8:	00 1c       	adc	r0, r0
    4baa:	38 f4       	brcc	.+14     	; 0x4bba <__divmodsi4_exit>

00004bac <__divmodsi4_neg2>:
    4bac:	50 95       	com	r21
    4bae:	40 95       	com	r20
    4bb0:	30 95       	com	r19
    4bb2:	21 95       	neg	r18
    4bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    4bb8:	5f 4f       	sbci	r21, 0xFF	; 255

00004bba <__divmodsi4_exit>:
    4bba:	08 95       	ret

00004bbc <__divmodsi4_neg1>:
    4bbc:	f6 f7       	brtc	.-4      	; 0x4bba <__divmodsi4_exit>
    4bbe:	90 95       	com	r25
    4bc0:	80 95       	com	r24
    4bc2:	70 95       	com	r23
    4bc4:	61 95       	neg	r22
    4bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4bca:	9f 4f       	sbci	r25, 0xFF	; 255
    4bcc:	08 95       	ret

00004bce <__udivmodhi4>:
    4bce:	aa 1b       	sub	r26, r26
    4bd0:	bb 1b       	sub	r27, r27
    4bd2:	51 e1       	ldi	r21, 0x11	; 17
    4bd4:	07 c0       	rjmp	.+14     	; 0x4be4 <__udivmodhi4_ep>

00004bd6 <__udivmodhi4_loop>:
    4bd6:	aa 1f       	adc	r26, r26
    4bd8:	bb 1f       	adc	r27, r27
    4bda:	a6 17       	cp	r26, r22
    4bdc:	b7 07       	cpc	r27, r23
    4bde:	10 f0       	brcs	.+4      	; 0x4be4 <__udivmodhi4_ep>
    4be0:	a6 1b       	sub	r26, r22
    4be2:	b7 0b       	sbc	r27, r23

00004be4 <__udivmodhi4_ep>:
    4be4:	88 1f       	adc	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	5a 95       	dec	r21
    4bea:	a9 f7       	brne	.-22     	; 0x4bd6 <__udivmodhi4_loop>
    4bec:	80 95       	com	r24
    4bee:	90 95       	com	r25
    4bf0:	bc 01       	movw	r22, r24
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	08 95       	ret

00004bf6 <__prologue_saves__>:
    4bf6:	2f 92       	push	r2
    4bf8:	3f 92       	push	r3
    4bfa:	4f 92       	push	r4
    4bfc:	5f 92       	push	r5
    4bfe:	6f 92       	push	r6
    4c00:	7f 92       	push	r7
    4c02:	8f 92       	push	r8
    4c04:	9f 92       	push	r9
    4c06:	af 92       	push	r10
    4c08:	bf 92       	push	r11
    4c0a:	cf 92       	push	r12
    4c0c:	df 92       	push	r13
    4c0e:	ef 92       	push	r14
    4c10:	ff 92       	push	r15
    4c12:	0f 93       	push	r16
    4c14:	1f 93       	push	r17
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	cd b7       	in	r28, 0x3d	; 61
    4c1c:	de b7       	in	r29, 0x3e	; 62
    4c1e:	ca 1b       	sub	r28, r26
    4c20:	db 0b       	sbc	r29, r27
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	09 94       	ijmp

00004c2e <__epilogue_restores__>:
    4c2e:	2a 88       	ldd	r2, Y+18	; 0x12
    4c30:	39 88       	ldd	r3, Y+17	; 0x11
    4c32:	48 88       	ldd	r4, Y+16	; 0x10
    4c34:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c36:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c38:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c40:	b9 84       	ldd	r11, Y+9	; 0x09
    4c42:	c8 84       	ldd	r12, Y+8	; 0x08
    4c44:	df 80       	ldd	r13, Y+7	; 0x07
    4c46:	ee 80       	ldd	r14, Y+6	; 0x06
    4c48:	fd 80       	ldd	r15, Y+5	; 0x05
    4c4a:	0c 81       	ldd	r16, Y+4	; 0x04
    4c4c:	1b 81       	ldd	r17, Y+3	; 0x03
    4c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    4c50:	b9 81       	ldd	r27, Y+1	; 0x01
    4c52:	ce 0f       	add	r28, r30
    4c54:	d1 1d       	adc	r29, r1
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	ed 01       	movw	r28, r26
    4c62:	08 95       	ret

00004c64 <ceil>:
    4c64:	3b d0       	rcall	.+118    	; 0x4cdc <__fp_trunc>
    4c66:	80 f0       	brcs	.+32     	; 0x4c88 <ceil+0x24>
    4c68:	9f 37       	cpi	r25, 0x7F	; 127
    4c6a:	40 f4       	brcc	.+16     	; 0x4c7c <ceil+0x18>
    4c6c:	91 11       	cpse	r25, r1
    4c6e:	0e f4       	brtc	.+2      	; 0x4c72 <ceil+0xe>
    4c70:	4d c0       	rjmp	.+154    	; 0x4d0c <__fp_szero>
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	70 e0       	ldi	r23, 0x00	; 0
    4c76:	80 e8       	ldi	r24, 0x80	; 128
    4c78:	9f e3       	ldi	r25, 0x3F	; 63
    4c7a:	08 95       	ret
    4c7c:	26 f0       	brts	.+8      	; 0x4c86 <ceil+0x22>
    4c7e:	1b 16       	cp	r1, r27
    4c80:	61 1d       	adc	r22, r1
    4c82:	71 1d       	adc	r23, r1
    4c84:	81 1d       	adc	r24, r1
    4c86:	01 c0       	rjmp	.+2      	; 0x4c8a <__fp_mintl>
    4c88:	1b c0       	rjmp	.+54     	; 0x4cc0 <__fp_mpack>

00004c8a <__fp_mintl>:
    4c8a:	88 23       	and	r24, r24
    4c8c:	71 f4       	brne	.+28     	; 0x4caa <__fp_mintl+0x20>
    4c8e:	77 23       	and	r23, r23
    4c90:	21 f0       	breq	.+8      	; 0x4c9a <__fp_mintl+0x10>
    4c92:	98 50       	subi	r25, 0x08	; 8
    4c94:	87 2b       	or	r24, r23
    4c96:	76 2f       	mov	r23, r22
    4c98:	07 c0       	rjmp	.+14     	; 0x4ca8 <__fp_mintl+0x1e>
    4c9a:	66 23       	and	r22, r22
    4c9c:	11 f4       	brne	.+4      	; 0x4ca2 <__fp_mintl+0x18>
    4c9e:	99 27       	eor	r25, r25
    4ca0:	0d c0       	rjmp	.+26     	; 0x4cbc <__fp_mintl+0x32>
    4ca2:	90 51       	subi	r25, 0x10	; 16
    4ca4:	86 2b       	or	r24, r22
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	2a f0       	brmi	.+10     	; 0x4cb6 <__fp_mintl+0x2c>
    4cac:	9a 95       	dec	r25
    4cae:	66 0f       	add	r22, r22
    4cb0:	77 1f       	adc	r23, r23
    4cb2:	88 1f       	adc	r24, r24
    4cb4:	da f7       	brpl	.-10     	; 0x4cac <__fp_mintl+0x22>
    4cb6:	88 0f       	add	r24, r24
    4cb8:	96 95       	lsr	r25
    4cba:	87 95       	ror	r24
    4cbc:	97 f9       	bld	r25, 7
    4cbe:	08 95       	ret

00004cc0 <__fp_mpack>:
    4cc0:	9f 3f       	cpi	r25, 0xFF	; 255
    4cc2:	31 f0       	breq	.+12     	; 0x4cd0 <__fp_mpack_finite+0xc>

00004cc4 <__fp_mpack_finite>:
    4cc4:	91 50       	subi	r25, 0x01	; 1
    4cc6:	20 f4       	brcc	.+8      	; 0x4cd0 <__fp_mpack_finite+0xc>
    4cc8:	87 95       	ror	r24
    4cca:	77 95       	ror	r23
    4ccc:	67 95       	ror	r22
    4cce:	b7 95       	ror	r27
    4cd0:	88 0f       	add	r24, r24
    4cd2:	91 1d       	adc	r25, r1
    4cd4:	96 95       	lsr	r25
    4cd6:	87 95       	ror	r24
    4cd8:	97 f9       	bld	r25, 7
    4cda:	08 95       	ret

00004cdc <__fp_trunc>:
    4cdc:	25 d0       	rcall	.+74     	; 0x4d28 <__fp_splitA>
    4cde:	a0 f0       	brcs	.+40     	; 0x4d08 <__fp_trunc+0x2c>
    4ce0:	be e7       	ldi	r27, 0x7E	; 126
    4ce2:	b9 17       	cp	r27, r25
    4ce4:	88 f4       	brcc	.+34     	; 0x4d08 <__fp_trunc+0x2c>
    4ce6:	bb 27       	eor	r27, r27
    4ce8:	9f 38       	cpi	r25, 0x8F	; 143
    4cea:	60 f4       	brcc	.+24     	; 0x4d04 <__fp_trunc+0x28>
    4cec:	16 16       	cp	r1, r22
    4cee:	b1 1d       	adc	r27, r1
    4cf0:	67 2f       	mov	r22, r23
    4cf2:	78 2f       	mov	r23, r24
    4cf4:	88 27       	eor	r24, r24
    4cf6:	98 5f       	subi	r25, 0xF8	; 248
    4cf8:	f7 cf       	rjmp	.-18     	; 0x4ce8 <__fp_trunc+0xc>
    4cfa:	86 95       	lsr	r24
    4cfc:	77 95       	ror	r23
    4cfe:	67 95       	ror	r22
    4d00:	b1 1d       	adc	r27, r1
    4d02:	93 95       	inc	r25
    4d04:	96 39       	cpi	r25, 0x96	; 150
    4d06:	c8 f3       	brcs	.-14     	; 0x4cfa <__fp_trunc+0x1e>
    4d08:	08 95       	ret

00004d0a <__fp_zero>:
    4d0a:	e8 94       	clt

00004d0c <__fp_szero>:
    4d0c:	bb 27       	eor	r27, r27
    4d0e:	66 27       	eor	r22, r22
    4d10:	77 27       	eor	r23, r23
    4d12:	cb 01       	movw	r24, r22
    4d14:	97 f9       	bld	r25, 7
    4d16:	08 95       	ret

00004d18 <__fp_split3>:
    4d18:	57 fd       	sbrc	r21, 7
    4d1a:	90 58       	subi	r25, 0x80	; 128
    4d1c:	44 0f       	add	r20, r20
    4d1e:	55 1f       	adc	r21, r21
    4d20:	59 f0       	breq	.+22     	; 0x4d38 <__fp_splitA+0x10>
    4d22:	5f 3f       	cpi	r21, 0xFF	; 255
    4d24:	71 f0       	breq	.+28     	; 0x4d42 <__fp_splitA+0x1a>
    4d26:	47 95       	ror	r20

00004d28 <__fp_splitA>:
    4d28:	88 0f       	add	r24, r24
    4d2a:	97 fb       	bst	r25, 7
    4d2c:	99 1f       	adc	r25, r25
    4d2e:	61 f0       	breq	.+24     	; 0x4d48 <__fp_splitA+0x20>
    4d30:	9f 3f       	cpi	r25, 0xFF	; 255
    4d32:	79 f0       	breq	.+30     	; 0x4d52 <__fp_splitA+0x2a>
    4d34:	87 95       	ror	r24
    4d36:	08 95       	ret
    4d38:	12 16       	cp	r1, r18
    4d3a:	13 06       	cpc	r1, r19
    4d3c:	14 06       	cpc	r1, r20
    4d3e:	55 1f       	adc	r21, r21
    4d40:	f2 cf       	rjmp	.-28     	; 0x4d26 <__fp_split3+0xe>
    4d42:	46 95       	lsr	r20
    4d44:	f1 df       	rcall	.-30     	; 0x4d28 <__fp_splitA>
    4d46:	08 c0       	rjmp	.+16     	; 0x4d58 <__fp_splitA+0x30>
    4d48:	16 16       	cp	r1, r22
    4d4a:	17 06       	cpc	r1, r23
    4d4c:	18 06       	cpc	r1, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	f1 cf       	rjmp	.-30     	; 0x4d34 <__fp_splitA+0xc>
    4d52:	86 95       	lsr	r24
    4d54:	71 05       	cpc	r23, r1
    4d56:	61 05       	cpc	r22, r1
    4d58:	08 94       	sec
    4d5a:	08 95       	ret

00004d5c <_exit>:
    4d5c:	f8 94       	cli

00004d5e <__stop_program>:
    4d5e:	ff cf       	rjmp	.-2      	; 0x4d5e <__stop_program>
